{
    "pipes": [],
    "interfaces": [
        {
            "name": "CheckboxConfig",
            "id": "interface-CheckboxConfig-9de70f3f7eecf2e3a140c50064babdd9",
            "file": "src/app/ui/checkbox/checkbox-config.interface.ts",
            "type": "interface",
            "sourceCode": "export interface CheckboxConfig {\n  containerClass?: string;\n}\n",
            "properties": [
                {
                    "name": "containerClass",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "DialogConfig",
            "id": "interface-DialogConfig-f41569f98250e697f69991481ece5b6d",
            "file": "src/app/ui/dialog/dialog-config.interface.ts",
            "type": "interface",
            "sourceCode": "export interface DialogConfig {\n  closeOnEsc?: boolean;\n  closeOnClickOutside?: boolean;\n  containerClass?: string;\n}\n",
            "properties": [
                {
                    "name": "closeOnClickOutside",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "closeOnEsc",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "containerClass",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "DialogOptions",
            "id": "interface-DialogOptions-fe0645021aca13cc6868e8881676da8f",
            "file": "src/app/ui/dialog/dialog-container/dialog-container.component.ts",
            "type": "interface",
            "sourceCode": "import {\n  Component,\n  OnInit,\n  ChangeDetectionStrategy,\n  HostListener,\n  ElementRef,\n  Output,\n  EventEmitter,\n  Renderer2,\n  AfterViewInit,\n  Input,\n  ViewEncapsulation\n} from '@angular/core';\n\nexport interface DialogOptions {\n  escToClose?: boolean;\n  clickToClose?: boolean;\n  containerClass?: string;\n  onClose?: (dialog: IDialog) => void;\n}\n\nexport interface IDialog {\n  close(): void;\n}\n\n@Component({\n  selector: 'iw-dialog-container',\n  templateUrl: './dialog-container.component.html',\n  styleUrls: ['./dialog-container.component.sass'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None\n})\nexport class DialogContainerComponent implements OnInit, AfterViewInit {\n  @Input() dialogOptions: DialogOptions;\n  @Output() onClose = new EventEmitter();\n\n  constructor(\n    private elementRef: ElementRef,\n    private renderer: Renderer2\n  ) { }\n\n  @HostListener('body:keydown', ['$event'])\n  onKeydown($event: KeyboardEvent) {\n    if ($event.keyCode === 27 && this.dialogOptions.escToClose) {\n      this.onClose.emit();\n      $event.preventDefault();\n    }\n  }\n\n  @HostListener('click', ['$event'])\n  onClick($event: MouseEvent) {\n    if ($event.target === this.elementRef.nativeElement && this.dialogOptions.clickToClose) {\n      this.onClose.emit();\n      $event.preventDefault();\n      $event.stopPropagation();\n    }\n  }\n\n\n  ngOnInit() {\n    const classes = this.dialogOptions.containerClass.split(' ').filter(s => !!s);\n    for (const c of classes) {\n      this.renderer.addClass(this.elementRef.nativeElement, c);\n    }\n  }\n\n  ngAfterViewInit() {\n    this.renderer.setAttribute(this.elementRef.nativeElement, 'tabindex', '0');\n    this.focus();\n    setTimeout(() => {\n      this.renderer.addClass(this.elementRef.nativeElement, 'iw-dialog-container--visible');\n    }, 0);\n  }\n\n  focus() {\n    const element = <HTMLElement>this.elementRef.nativeElement;\n    element.focus();\n  }\n}\n",
            "properties": [
                {
                    "name": "clickToClose",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "containerClass",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "escToClose",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "onClose",
                    "type": "function",
                    "optional": true,
                    "description": "",
                    "line": 19
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "IDialog",
            "id": "interface-IDialog-fe0645021aca13cc6868e8881676da8f",
            "file": "src/app/ui/dialog/dialog-container/dialog-container.component.ts",
            "type": "interface",
            "sourceCode": "import {\n  Component,\n  OnInit,\n  ChangeDetectionStrategy,\n  HostListener,\n  ElementRef,\n  Output,\n  EventEmitter,\n  Renderer2,\n  AfterViewInit,\n  Input,\n  ViewEncapsulation\n} from '@angular/core';\n\nexport interface DialogOptions {\n  escToClose?: boolean;\n  clickToClose?: boolean;\n  containerClass?: string;\n  onClose?: (dialog: IDialog) => void;\n}\n\nexport interface IDialog {\n  close(): void;\n}\n\n@Component({\n  selector: 'iw-dialog-container',\n  templateUrl: './dialog-container.component.html',\n  styleUrls: ['./dialog-container.component.sass'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None\n})\nexport class DialogContainerComponent implements OnInit, AfterViewInit {\n  @Input() dialogOptions: DialogOptions;\n  @Output() onClose = new EventEmitter();\n\n  constructor(\n    private elementRef: ElementRef,\n    private renderer: Renderer2\n  ) { }\n\n  @HostListener('body:keydown', ['$event'])\n  onKeydown($event: KeyboardEvent) {\n    if ($event.keyCode === 27 && this.dialogOptions.escToClose) {\n      this.onClose.emit();\n      $event.preventDefault();\n    }\n  }\n\n  @HostListener('click', ['$event'])\n  onClick($event: MouseEvent) {\n    if ($event.target === this.elementRef.nativeElement && this.dialogOptions.clickToClose) {\n      this.onClose.emit();\n      $event.preventDefault();\n      $event.stopPropagation();\n    }\n  }\n\n\n  ngOnInit() {\n    const classes = this.dialogOptions.containerClass.split(' ').filter(s => !!s);\n    for (const c of classes) {\n      this.renderer.addClass(this.elementRef.nativeElement, c);\n    }\n  }\n\n  ngAfterViewInit() {\n    this.renderer.setAttribute(this.elementRef.nativeElement, 'tabindex', '0');\n    this.focus();\n    setTimeout(() => {\n      this.renderer.addClass(this.elementRef.nativeElement, 'iw-dialog-container--visible');\n    }, 0);\n  }\n\n  focus() {\n    const element = <HTMLElement>this.elementRef.nativeElement;\n    element.focus();\n  }\n}\n",
            "properties": [],
            "indexSignatures": [],
            "kind": 152,
            "methods": [
                {
                    "name": "close",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23
                }
            ]
        },
        {
            "name": "IDialogService",
            "id": "interface-IDialogService-05c21102ad1d6785d8955d00473e946c",
            "file": "src/app/ui/dialog/dialog.service.ts",
            "type": "interface",
            "sourceCode": "import {\n  Injectable,\n  ComponentFactoryResolver,\n  ComponentFactory,\n  Type,\n  Injector,\n  ApplicationRef,\n  TemplateRef,\n  Inject,\n  Optional\n} from '@angular/core';\nimport {\n  DialogContainerComponent,\n  DialogOptions,\n  IDialog\n} from './dialog-container/dialog-container.component';\nimport { IW_DIALOG_CONFIG } from './dialog.config';\nimport { DialogConfig } from './dialog-config.interface';\nimport { DialogRef } from './dialog-ref.class';\nexport { IDialog };\n\nexport interface IDialogService {\n  open: <T>(componentType: Type<T>, options?: DialogOptions, data?: {[key: string]: any}) => IDialog;\n  openTemplateRef: <T>(templateRef: TemplateRef<T>, context: T, options: DialogOptions) => IDialog;\n  close: () => void;\n}\n\n@Injectable()\nexport class DialogService implements IDialogService {\n  private __containerFactory: ComponentFactory<DialogContainerComponent>;\n\n  private __defaultOptions: DialogOptions = {\n    containerClass: '',\n    clickToClose: true,\n    escToClose: true,\n    onClose: () => {}\n  };\n\n  private __previousDialog: DialogRef;\n\n  constructor(\n    private appRef: ApplicationRef,\n    private injector: Injector,\n    private componentFactoryResolver: ComponentFactoryResolver,\n    @Optional() @Inject(IW_DIALOG_CONFIG) private dialogConfig: DialogConfig\n  ) {\n    this.__containerFactory = this.componentFactoryResolver.resolveComponentFactory(DialogContainerComponent);\n  }\n\n  /**\n   * Open a dialog that embeds an entry component.\n   * @param componentType the component class to embed into the dialog\n   * @param options the options to use with the dialog\n   * @param data the data to pass to the embedded component\n   */\n  open<T>(componentType: Type<T>, options?: DialogOptions, data?: {[key: string]: any}): IDialog {\n    const factory = this.componentFactoryResolver.resolveComponentFactory<{[key: string]: any}>(componentType);\n    const component = factory.create(this.injector);\n    const _data = data || {};\n    for (const key in _data) {\n      if (_data.hasOwnProperty(key)) {\n        component.instance[key] = _data[key];\n      }\n    }\n    const dialogRef = new DialogRef(\n      this.__containerFactory.create(this.injector, [[component.location.nativeElement]]),\n      component.hostView,\n      this.appRef,\n      () => {\n        this.__close(dialogRef);\n      },\n      this.__createOptions(options)\n    );\n    return this.__open(dialogRef);\n  }\n\n  /**\n   * Open a dialog that loads a template.\n   * @param templateRef the template to load inside the dialog\n   * @param context the context to associate with the template\n   * @param options the options to use with the dialog\n   */\n  openTemplateRef<T>(templateRef: TemplateRef<T>, context: T, options: DialogOptions): IDialog {\n    const view = templateRef.createEmbeddedView(context);\n    const dialogRef = new DialogRef(\n      this.__containerFactory.create(this.injector, [view.rootNodes]),\n      view,\n      this.appRef,\n      () => {\n        this.__close(dialogRef);\n      },\n      this.__createOptions(options)\n    );\n    return this.__open(dialogRef);\n  }\n\n  /**\n   * Close the currently opened dialog, if any\n   */\n  close() {\n    if (this.__previousDialog) {\n      this.__close(this.__previousDialog);\n    }\n  }\n\n  private __close(dialogRef: DialogRef) {\n    if (this.__previousDialog === dialogRef) {\n      this.__previousDialog.detach();\n      this.__previousDialog = undefined;\n    }\n  }\n\n  private __open(dialogRef: DialogRef): IDialog {\n    this.close();\n    this.__previousDialog = dialogRef;\n    dialogRef.attach();\n    return dialogRef;\n  }\n\n  private __createOptions(_options?: DialogOptions) {\n    const dialogConfig = this.dialogConfig || {};\n    const options = _options || {};\n    return Object.assign({}, this.__defaultOptions, dialogConfig, options, {\n      containerClass: (dialogConfig.containerClass || '') + ' ' + (options.containerClass || '')\n    });\n  }\n}\n\n",
            "properties": [
                {
                    "name": "close",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "open",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "openTemplateRef",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 24
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "IPopover",
            "id": "interface-IPopover-76cfd7b2d39dc44f4eedc9539cdd160f",
            "file": "src/app/ui/popover/popover.service.ts",
            "type": "interface",
            "sourceCode": "import {\n  Injectable,\n  TemplateRef,\n  ComponentRef,\n  Injector,\n  ComponentFactoryResolver,\n  ApplicationRef,\n  EmbeddedViewRef,\n  Type,\n  Optional,\n  Inject\n} from '@angular/core';\nimport { PopoverContainerComponent } from './popover-container/popover-container.component';\nimport { PopoverScrollMaskComponent } from './popover-scroll-mask/popover-scroll-mask.component';\nimport { IW_POPOVER_CONFIG } from './popover.config';\nimport { PopoverConfig } from './popover-config.interface';\nimport { smartPosition, addClasses, combineOptionsAndDefaults } from './helpers';\nimport { PopoverOptions } from './popover-options.interface';\nexport { PopoverPosition } from './popover-position.interface';\nexport { PopoverOptions };\n\nexport interface IPopover {\n  close: () => void;\n}\n\nclass PopoverImpl implements IPopover {\n  private isClosed = false;\n\n  constructor(\n    private embeddedViewRef: EmbeddedViewRef<any>,\n    private appRef: ApplicationRef,\n    private componentRef: ComponentRef<any>,\n    private container: ComponentRef<PopoverContainerComponent>,\n    private scrollMask: ComponentRef<PopoverScrollMaskComponent>,\n    private arrowElement: HTMLElement\n  ) {\n\n  }\n\n  close() {\n    if (this.isClosed) {\n      return;\n    }\n    this.isClosed = true;\n    if (this.embeddedViewRef) {\n      this.embeddedViewRef.destroy();\n      this.appRef.detachView(this.embeddedViewRef);\n    }\n    if (this.componentRef) {\n      this.componentRef.destroy();\n      this.appRef.detachView(this.componentRef.hostView);\n    }\n    this.arrowElement.remove();\n    this.appRef.detachView(this.container.hostView);\n    this.appRef.detachView(this.scrollMask.hostView);\n    this.container.destroy();\n    this.scrollMask.destroy();\n  }\n}\n\n@Injectable()\nexport class Popover {\n  private __instance: IPopover;\n\n  constructor() { }\n\n  close() {\n    this.__instance.close();\n  }\n\n  setInstance(instance: IPopover) {\n    this.__instance = instance;\n  }\n}\n\n@Injectable()\nexport class PopoverService {\n\n  constructor(\n    private injector: Injector,\n    private componentFactoryResolver: ComponentFactoryResolver,\n    private appRef: ApplicationRef,\n    @Optional() @Inject(IW_POPOVER_CONFIG) private popoverConfig: PopoverConfig\n  ) { }\n\n  openTemplateRef<T>(templateRef: TemplateRef<T>, target: HTMLElement, options: PopoverOptions): IPopover {\n    return this.__open(\n      null,\n      templateRef.createEmbeddedView(null),\n      target,\n      combineOptionsAndDefaults(this.popoverConfig, options)\n    );\n  }\n\n  open<T>(componentType: Type<T>, target: HTMLElement, options?: PopoverOptions, init?: (component: T) => void): IPopover {\n    const reflInj = Injector.create([{provide: Popover, deps: []}], this.injector);\n\n    const factory = this.componentFactoryResolver.resolveComponentFactory(componentType);\n    const component = factory.create(reflInj);\n    if (init) {\n      init(component.instance);\n    }\n    const popover: Popover = reflInj.get(Popover);\n    const popoverOptions: PopoverOptions = Object.assign({}, options || {});\n    popoverOptions.shouldClose = () => {\n      if (options && options.shouldClose) {\n        options.shouldClose();\n      }\n      popover.close();\n    };\n\n    const instance = this.__open(\n      component,\n      null,\n      target,\n      combineOptionsAndDefaults(this.popoverConfig, popoverOptions)\n    );\n    popover.setInstance(instance);\n    return instance;\n  }\n\n  private __open<T>(\n    componentRef: ComponentRef<T>,\n    embeddedViewRef: EmbeddedViewRef<T>,\n    target: HTMLElement,\n    options: PopoverOptions\n  ) {\n    const arrowElement = document.createElement('div');\n    arrowElement.classList.add('iw-popover-arrow-element');\n\n    // create the popover container\n    const container = this.componentFactoryResolver.resolveComponentFactory(PopoverContainerComponent)\n      .create(this.injector, componentRef ? [[componentRef.location.nativeElement]] : [embeddedViewRef.rootNodes]);\n    // create the mask component\n    const scrollMask = this.componentFactoryResolver.resolveComponentFactory(PopoverScrollMaskComponent)\n      .create(this.injector);\n\n    // we bind to the output (which is an observable)\n    scrollMask.instance.clickOutsideToClose = options.clickOutsideToClose;\n    scrollMask.instance.onClose.subscribe(() => {\n      options.shouldClose();\n    });\n\n    container.instance.escToClose = options.escToClose;\n    container.instance.onClose.subscribe(() => {\n      options.shouldClose();\n    });\n\n\n    if (componentRef) {\n      this.appRef.attachView(componentRef.hostView);\n    }\n    if (embeddedViewRef) {\n      this.appRef.attachView(embeddedViewRef);\n    }\n    this.appRef.attachView(container.hostView);\n    this.appRef.attachView(scrollMask.hostView);\n\n    this.__showPopover({\n      arrowElement,\n      container: container.location.nativeElement,\n      scrollMask: scrollMask.location.nativeElement,\n      target\n    }, options);\n\n    return new PopoverImpl(\n      embeddedViewRef,\n      this.appRef,\n      componentRef,\n      container,\n      scrollMask,\n      arrowElement\n    );\n  }\n\n  private __showPopover(elements: {\n    container: HTMLElement\n    scrollMask: HTMLElement\n    arrowElement: HTMLElement\n    target: HTMLElement\n  }, options: PopoverOptions) {\n    const container: HTMLElement = elements.container;\n    const scrollMask: HTMLElement = elements.scrollMask;\n    const arrowElement: HTMLElement = elements.arrowElement;\n\n    setTimeout(() => {\n      container.style.visibility = 'hidden';\n      arrowElement.style.visibility = 'hidden';\n      addClasses(container, options.popoverClass);\n      addClasses(scrollMask, options.scrollMaskClass);\n      addClasses(arrowElement, options.arrowClass);\n      document.body.appendChild(container);\n      document.body.appendChild(arrowElement);\n      document.body.appendChild(scrollMask);\n\n      smartPosition(elements, options);\n\n      container.classList.add('iw-popover-container--visible');\n      arrowElement.classList.add('iw-popover-arrow-element--visible');\n    }, 0);\n  }\n\n}\n\n",
            "properties": [
                {
                    "name": "close",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 23
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "IStateButtonDirective",
            "id": "interface-IStateButtonDirective-db449cfaaa026b8324ff72b38f38c51d",
            "file": "src/app/ui/state-button/state-button-directive.interface.ts",
            "type": "interface",
            "sourceCode": "import { Observable } from 'rxjs';\nimport { ButtonState } from './button-state';\n\nexport interface IStateButtonDirective {\n  state: Observable<ButtonState>;\n}\n",
            "properties": [
                {
                    "name": "state",
                    "type": "Observable<ButtonState>",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "NavData",
            "id": "interface-NavData-d6b4a2d65d494a25e74d525135283c8f",
            "file": "src/app/demo/navigation-demo/navigation.demo.component.ts",
            "type": "interface",
            "sourceCode": "import { Component, OnInit, ViewChild, Inject } from '@angular/core';\nimport { NavigationController, NavigationData } from '../../ui/navigation/navigation-controller.service';\nimport { NavigationComponent } from '../../ui/navigation/navigation.module';\n\ninterface NavData {\n  depth: number;\n}\n\n@Component({\n  template: `\n    <p>some component (current depth: {{ depth }}, nested depth: {{ nestedDepth }})</p>\n    <button (click)=\"present()\">Present</button><button (click)=\"dismiss()\">Dismiss</button>\n  `\n})\nexport class SomeComponent {\n  depth = -1;\n  nestedDepth = -1;\n\n  constructor(private navCtrl: NavigationController, @Inject(NavigationData) private data: NavData) {\n    this.depth = this.data.depth;\n    this.nestedDepth = this.depth;\n  }\n\n  dismiss() {\n    this.navCtrl.dismiss(this.nestedDepth);\n  }\n\n  present() {\n    this.navCtrl.present<number>(SomeComponent, {depth: this.depth + 1}).then(v => this.nestedDepth = v);\n  }\n}\n\n\n@Component({\n  template: `\n    <p>some other component (current depth: {{ depth }}, nested depth: {{ nestedDepth }})</p>\n    <button (click)=\"present()\">Present</button><button (click)=\"dismiss()\">Dismiss</button>\n  `\n})\nexport class SomeOtherComponent extends SomeComponent {\n}\n\n@Component({\n  templateUrl: './navigation.demo.component.html',\n  styleUrls: ['./navigation.demo.component.sass']\n})\nexport class NavigationDemoComponent implements OnInit {\n  @ViewChild('nav') nav: NavigationComponent;\n  depth = 0;\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n  present() {\n    this.depth = 0;\n    this.nav.present<number, NavData>(SomeComponent, {depth: this.depth + 1}).then(v => this.depth = v);\n  }\n\n  presentOther() {\n    this.nav.present<number, NavData>(SomeOtherComponent, {depth: this.depth + 1}).then(v => this.depth = v);\n  }\n}\n",
            "properties": [
                {
                    "name": "depth",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "NavigationItem",
            "id": "interface-NavigationItem-107144ca8824f0fd556b81cef44c7699",
            "file": "src/app/ui/navigation/navigation-controller.service.ts",
            "type": "interface",
            "sourceCode": "import { Injectable, Type, Injector, ReflectiveInjector, InjectionToken } from '@angular/core';\n\nexport const NavigationData = new InjectionToken<any>('iw-navigation.NAVIGATION_DATA');\n\nexport interface NavigationItem {\n  type: Type<any>;\n  resolve: (v: any) => void;\n  injector: Injector;\n}\n\n@Injectable()\nexport class NavigationController {\n  stack: NavigationItem[] = [];\n\n  constructor(\n    private injector: Injector\n  ) { }\n\n  present<ReturnDataType>(type: Type<any>, data?: any): Promise<ReturnDataType> {\n    const injector = ReflectiveInjector.resolveAndCreate([{\n      provide: NavigationData,\n      useValue: data\n    }], this.injector);\n    return new Promise(resolve => {\n      this.stack.push(\n        { type, resolve, injector }\n      );\n    });\n  }\n\n  dismiss<ReturnDataType>(value?: ReturnDataType) {\n    const last = this.stack.pop();\n    last.resolve(value);\n  }\n}\n",
            "properties": [
                {
                    "name": "injector",
                    "type": "Injector",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "resolve",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "type",
                    "type": "Type<any>",
                    "optional": false,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "Person",
            "id": "interface-Person-d97f961b052ac42bf6fc9632a94c0e01",
            "file": "src/app/demo/popover/popover-demo/popover-demo.component.ts",
            "type": "interface",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { PropertyEditPopoverComponent } from '../property-edit-popover/property-edit-popover.component';\nimport { PopoverService } from '../../../ui/popover/popover.module';\n\n@Component({\n  selector: 'app-popover-demo',\n  templateUrl: './popover-demo.component.html',\n  styleUrls: ['./popover-demo.component.sass']\n})\nexport class PopoverDemoComponent implements OnInit {\n  editedPerson: Person;\n  editedField: string;\n  persons: Person[] = [];\n  firsts = ['Mark', 'Edy', 'Jack', 'John', 'Mike'];\n  lasts = ['Johnson', 'Willis', 'Chapman', 'Bob', 'Last'];\n  isPopoverOpen3 = false;\n  isPopoverOpen2 = false;\n  isPopoverOpen = false;\n  isPopoverOpen4 = false;\n  isPopoverOpen5 = false;\n\n  constructor(private popoverService: PopoverService) {\n    for (let i = 0; i < 1000; i++) {\n      this.persons.push({\n        first: this.firsts[Math.floor(Math.random() * this.firsts.length)],\n        last: this.lasts[Math.floor(Math.random() * this.lasts.length)],\n      });\n    }\n  }\n\n  trackBy(index: number) {\n    return index;\n  }\n\n  openEditFirstNamePopover(person: Person, $event: MouseEvent) {\n    return this.openEditPropertyPopover(person, 'First Name', 'first', $event);\n  }\n\n  openEditLastNamePopover(person: Person, $event: MouseEvent) {\n    return this.openEditPropertyPopover(person, 'Last Name', 'last', $event);\n  }\n\n  openEditPropertyPopover(person: Person, propertyName: string, p: keyof Person, $event: MouseEvent) {\n    this.popoverService.open(PropertyEditPopoverComponent, <HTMLElement>$event.target, {\n      popoverClass: 'popover-demo',\n      escToClose: true\n    }, component => {\n      component.value = person[p];\n      component.propertyName = propertyName;\n      component.onValueChange.subscribe((v: string) => {\n        person[p] = v;\n      });\n    });\n  }\n\n  ngOnInit() {\n  }\n}\n\ninterface Person {\n  first: string;\n  last: string;\n}\n",
            "properties": [
                {
                    "name": "first",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 61
                },
                {
                    "name": "last",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 62
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "PopoverConfig",
            "id": "interface-PopoverConfig-2dae20447b80a516d29eb7ea5f92cd54",
            "file": "src/app/ui/popover/popover-config.interface.ts",
            "type": "interface",
            "sourceCode": "export interface PopoverConfig {\n  popoverClass?: string;\n  arrowClass?: string;\n  horizontalAlignment?: 'leftWithLeft';\n  scrollMaskClass?: string;\n  escToClose?: boolean;\n  clickOutsideToClose?: boolean;\n  horizontal?: boolean;\n}\n",
            "properties": [
                {
                    "name": "arrowClass",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "clickOutsideToClose",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "escToClose",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "horizontal",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "horizontalAlignment",
                    "type": "",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "popoverClass",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "scrollMaskClass",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "PopoverOptions",
            "id": "interface-PopoverOptions-0da6345ffe8c17d0144ca19e8a57afd3",
            "file": "src/app/ui/popover/popover-options.interface.ts",
            "type": "interface",
            "sourceCode": "import { PopoverPosition } from './popover-position.interface';\n\nexport interface PopoverOptions {\n  popoverClass?: string;\n  arrowClass?: string;\n  horizontal?: boolean;\n  horizontalAlignment?: 'leftWithLeft' | 'rightWithRight' | undefined;\n  scrollMaskClass?: string;\n  escToClose?: boolean;\n  clickOutsideToClose?: boolean;\n  shouldClose?: () => void;\n  popoverPosition?: (p: PopoverPosition) => void;\n}\n",
            "properties": [
                {
                    "name": "arrowClass",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "clickOutsideToClose",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "escToClose",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "horizontal",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "horizontalAlignment",
                    "type": "\"leftWithLeft\" | \"rightWithRight\" | undefined",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "popoverClass",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "popoverPosition",
                    "type": "function",
                    "optional": true,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "scrollMaskClass",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "shouldClose",
                    "type": "function",
                    "optional": true,
                    "description": "",
                    "line": 11
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "PopoverPosition",
            "id": "interface-PopoverPosition-fcbe8aa95533e0e51a336a3ebe28e415",
            "file": "src/app/ui/popover/popover-position.interface.ts",
            "type": "interface",
            "sourceCode": "export interface PopoverPosition {\n  vertical?: 'top' | 'bottom';\n  horizontal?: 'left' | 'right';\n}\n\n",
            "properties": [
                {
                    "name": "horizontal",
                    "type": "\"left\" | \"right\"",
                    "optional": true,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "vertical",
                    "type": "\"top\" | \"bottom\"",
                    "optional": true,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "TooltipConfig",
            "id": "interface-TooltipConfig-369223d6ce1fa1a7b1a5decd9ef70ff7",
            "file": "src/app/ui/tooltip/tooltip-config.interface.ts",
            "type": "interface",
            "sourceCode": "export interface TooltipConfig {\n  containerClass?: string;\n  horizontal?: boolean;\n  delay?: number;\n}\n",
            "properties": [
                {
                    "name": "containerClass",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "delay",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "horizontal",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "TreeItem",
            "id": "interface-TreeItem-a587e83a8b2903380b120d3da5d23847",
            "file": "src/app/ui/tree/tree/tree.component.ts",
            "type": "interface",
            "sourceCode": "import { Component, Input, Directive, HostListener, ElementRef, OnInit, OnDestroy, Output, EventEmitter, TemplateRef } from '@angular/core';\nimport { Subject, Subscription } from 'rxjs';\nimport { filter } from 'rxjs/operators';\n\nexport interface TreeItem {\n  data: any;\n  children?: TreeItem[];\n}\n\n/**\n * This component renders a tree of DOM elements based on the provided `tree` input.\n * It does nothing else than rendering. You have to provide a template for the node.\n ```ts\n import { TreeModule } from 'iwerk-angular-ui';\n ```\n */\n@Component({\n  selector: 'iw-tree',\n  templateUrl: './tree.component.html',\n  styleUrls: ['./tree.component.sass']\n})\nexport class TreeComponent {\n  /**\n   * The tree input to render. Use the `TreeItem` type definition.\n   */\n  @Input() set tree(v: TreeItem[]) {\n    this.__tree = v;\n    this.updateParentMap();\n  }\n  get tree(): TreeItem[] {\n    return this.__tree;\n  }\n\n  /**\n   * The expanded nodes: their children will be displayed.\n   */\n  @Input() expanded: TreeItem[] = [];\n  nodeTemplate: TemplateRef<any>;\n\n  /**\n   * Event that is emitted when the set of expanded nodes changes.\n   */\n  @Output() expand = new EventEmitter<TreeItem[]>();\n\n  focusEvent = new Subject<TreeItem>();\n  parentMap = new Map<TreeItem, TreeItem>();\n\n  private __tree: TreeItem[] = [];\n\n  /**\n   * Return `true` if the item has children, `false` otherwise.\n   * @param item the item\n   */\n  hasChildren(item: TreeItem): boolean {\n    return item.children && item.children.length > 0;\n  }\n\n  /**\n   * Return `true` if the item is expanded, `false` otherwise.\n   * @param item the item\n   */\n  isExpanded(item: TreeItem): boolean {\n    return this.expanded.indexOf(item) > -1;\n  }\n\n  /**\n   * Toggle the expanded state of the item.\n   * @param item the item\n   */\n  toggleExpand(item: TreeItem) {\n    if (!this.hasChildren(item)) {\n      return;\n    }\n    if (this.isExpanded(item)) {\n      this.collapseItem(item);\n    } else {\n      this.expandItem(item);\n    }\n  }\n\n  /**\n   * Expand the item: display its children.\n   * @param item the item\n   */\n  expandItem(item: TreeItem) {\n    if (!this.hasChildren(item)) {\n      return;\n    }\n    this.setExpanded(this.expanded.concat([item]));\n  }\n\n  /**\n   * Collapse the item: hide its children.\n   * @param item the item\n   */\n  collapseItem(item: TreeItem) {\n    this.setExpanded(this.expanded.filter(e => e !== item));\n  }\n\n  /**\n   * @ignore\n   */\n  sendFocusEvent(item: TreeItem) {\n    this.focusEvent.next(item);\n  }\n\n  /**\n   * @ignore\n   */\n  private setExpanded(v: TreeItem[]) {\n    this.expanded = v;\n    this.expand.emit(v);\n  }\n\n  /**\n   * @ignore\n   */\n  private updateParentMap() {\n    this.parentMap = new Map();\n    const aux = (parent: TreeItem, nodes: TreeItem[]) => {\n      nodes.forEach(n => {\n        this.parentMap.set(n, parent);\n        aux(n, n.children || []);\n      });\n    };\n    aux(undefined, this.__tree);\n  }\n}\n\n@Directive({\n  selector: '[iwTreeNodeTemplate]'\n})\nexport class TreeNodeTemplateDirective {\n  constructor(public templateRef: TemplateRef<any>, private menu: TreeComponent) {\n    this.menu.nodeTemplate = this.templateRef;\n  }\n}\n\n@Directive({\n  selector: '[iwTreeItem]'\n})\nexport class TreeItemDirective implements OnInit, OnDestroy {\n  @Input('iwTreeItem') item: TreeItem;\n\n  private subscription = new Subscription;\n\n  constructor(\n    private menu: TreeComponent,\n    private elementRef: ElementRef\n  ) {\n  }\n\n  ngOnInit() {\n    this.subscription.add(this.menu.focusEvent\n      .pipe(filter(e => e === this.item))\n      .subscribe(e => {\n        this.elementRef.nativeElement.focus();\n      }));\n  }\n\n  ngOnDestroy() {\n    this.subscription.unsubscribe();\n  }\n\n  @HostListener('keydown', ['$event'])\n  keydown($event: KeyboardEvent) {\n    switch ($event.keyCode) {\n      case 39:\n        this.goRight($event); break;\n      case 40:\n        this.goDown($event); break;\n      case 38:\n        this.goUp($event); break;\n      case 37:\n        this.goLeft($event); break;\n    }\n  }\n\n  private goLeft($event: KeyboardEvent) {\n    $event.preventDefault();\n    if (this.menu.isExpanded(this.item)) {\n      return this.menu.collapseItem(this.item);\n    }\n    const parent = this.menu.parentMap.get(this.item);\n    if (parent) {\n      this.menu.sendFocusEvent(parent);\n    } else {\n      this.goUp($event);\n    }\n  }\n\n  private goRight($event: KeyboardEvent) {\n    $event.preventDefault();\n    if (!this.menu.hasChildren(this.item)) {\n      return this.goDown($event);\n    }\n    if (!this.menu.isExpanded(this.item)) {\n      return this.menu.expandItem(this.item);\n    }\n    this.menu.sendFocusEvent(this.item.children[0]);\n  }\n\n  private goDown($event: KeyboardEvent) {\n    $event.preventDefault();\n    if (\n      this.menu.hasChildren(this.item) &&\n      this.menu.isExpanded(this.item)\n    ) {\n      return this.menu.sendFocusEvent(this.item.children[0]);\n    }\n    const selectAfter = (item: TreeItem) => {\n      const parent = this.menu.parentMap.get(item);\n      const children = parent ? parent.children : this.menu.tree;\n      const index = children.indexOf(item);\n      const next = children[index + 1];\n      if (next) {\n        this.menu.sendFocusEvent(next);\n      } else if (parent) {\n        selectAfter(parent);\n      }\n    };\n    selectAfter(this.item);\n  }\n\n  private goUp($event: KeyboardEvent) {\n    $event.preventDefault();\n    const selectLastPossible = (item: TreeItem) => {\n      if (this.menu.hasChildren(item) && this.menu.isExpanded(item)) {\n        selectLastPossible(item.children[item.children.length - 1]);\n      } else {\n        this.menu.sendFocusEvent(item);\n      }\n    };\n    const selectBefore = (item: TreeItem) => {\n      const parent = this.menu.parentMap.get(item);\n      const children = parent ? parent.children : this.menu.tree;\n      const index = children.indexOf(item);\n      const previous = children[index - 1];\n      if (previous) {\n        selectLastPossible(previous);\n      } else if (parent) {\n        this.menu.sendFocusEvent(parent);\n      }\n    };\n    selectBefore(this.item);\n  }\n}\n",
            "properties": [
                {
                    "name": "children",
                    "type": "TreeItem[]",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "data",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        }
    ],
    "injectables": [
        {
            "name": "DialogService",
            "id": "injectable-DialogService-05c21102ad1d6785d8955d00473e946c",
            "file": "src/app/ui/dialog/dialog.service.ts",
            "properties": [
                {
                    "name": "__containerFactory",
                    "type": "ComponentFactory<DialogContainerComponent>",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "__defaultOptions",
                    "defaultValue": "{\n    containerClass: '',\n    clickToClose: true,\n    escToClose: true,\n    onClose: () => {}\n  }",
                    "type": "DialogOptions",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "__previousDialog",
                    "type": "DialogRef",
                    "optional": false,
                    "description": "",
                    "line": 39,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "methods": [
                {
                    "name": "__close",
                    "args": [
                        {
                            "name": "dialogRef",
                            "type": "DialogRef"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 106,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "dialogRef",
                            "type": "DialogRef",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "__createOptions",
                    "args": [
                        {
                            "name": "_options",
                            "type": "DialogOptions",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 120,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "_options",
                            "type": "DialogOptions",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "__open",
                    "args": [
                        {
                            "name": "dialogRef",
                            "type": "DialogRef"
                        }
                    ],
                    "optional": false,
                    "returnType": "IDialog",
                    "typeParameters": [],
                    "line": 113,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "dialogRef",
                            "type": "DialogRef",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "close",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 100,
                    "description": "<p>Close the currently opened dialog, if any</p>\n"
                },
                {
                    "name": "open",
                    "args": [
                        {
                            "name": "componentType",
                            "type": "Type<T>"
                        },
                        {
                            "name": "options",
                            "type": "DialogOptions",
                            "optional": true
                        },
                        {
                            "name": "data",
                            "type": "literal type",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "IDialog",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 56,
                    "description": "<p>Open a dialog that embeds an entry component.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1471,
                                "end": 1484,
                                "flags": 0,
                                "escapedText": "componentType"
                            },
                            "type": "Type<T>",
                            "tagName": {
                                "pos": 1465,
                                "end": 1470,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>the component class to embed into the dialog</p>\n"
                        },
                        {
                            "name": {
                                "pos": 1542,
                                "end": 1549,
                                "flags": 0,
                                "escapedText": "options"
                            },
                            "type": "DialogOptions",
                            "optional": true,
                            "tagName": {
                                "pos": 1536,
                                "end": 1541,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>the options to use with the dialog</p>\n"
                        },
                        {
                            "name": {
                                "pos": 1597,
                                "end": 1601,
                                "flags": 0,
                                "escapedText": "data"
                            },
                            "type": "literal type",
                            "optional": true,
                            "tagName": {
                                "pos": 1591,
                                "end": 1596,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>the data to pass to the embedded component</p>\n"
                        }
                    ]
                },
                {
                    "name": "openTemplateRef",
                    "args": [
                        {
                            "name": "templateRef",
                            "type": "TemplateRef<T>"
                        },
                        {
                            "name": "context",
                            "type": "T"
                        },
                        {
                            "name": "options",
                            "type": "DialogOptions"
                        }
                    ],
                    "optional": false,
                    "returnType": "IDialog",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 83,
                    "description": "<p>Open a dialog that loads a template.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 2447,
                                "end": 2458,
                                "flags": 0,
                                "escapedText": "templateRef"
                            },
                            "type": "TemplateRef<T>",
                            "tagName": {
                                "pos": 2441,
                                "end": 2446,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>the template to load inside the dialog</p>\n"
                        },
                        {
                            "name": {
                                "pos": 2510,
                                "end": 2517,
                                "flags": 0,
                                "escapedText": "context"
                            },
                            "type": "T",
                            "tagName": {
                                "pos": 2504,
                                "end": 2509,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>the context to associate with the template</p>\n"
                        },
                        {
                            "name": {
                                "pos": 2573,
                                "end": 2580,
                                "flags": 0,
                                "escapedText": "options"
                            },
                            "type": "DialogOptions",
                            "tagName": {
                                "pos": 2567,
                                "end": 2572,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>the options to use with the dialog</p>\n"
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import {\n  Injectable,\n  ComponentFactoryResolver,\n  ComponentFactory,\n  Type,\n  Injector,\n  ApplicationRef,\n  TemplateRef,\n  Inject,\n  Optional\n} from '@angular/core';\nimport {\n  DialogContainerComponent,\n  DialogOptions,\n  IDialog\n} from './dialog-container/dialog-container.component';\nimport { IW_DIALOG_CONFIG } from './dialog.config';\nimport { DialogConfig } from './dialog-config.interface';\nimport { DialogRef } from './dialog-ref.class';\nexport { IDialog };\n\nexport interface IDialogService {\n  open: <T>(componentType: Type<T>, options?: DialogOptions, data?: {[key: string]: any}) => IDialog;\n  openTemplateRef: <T>(templateRef: TemplateRef<T>, context: T, options: DialogOptions) => IDialog;\n  close: () => void;\n}\n\n@Injectable()\nexport class DialogService implements IDialogService {\n  private __containerFactory: ComponentFactory<DialogContainerComponent>;\n\n  private __defaultOptions: DialogOptions = {\n    containerClass: '',\n    clickToClose: true,\n    escToClose: true,\n    onClose: () => {}\n  };\n\n  private __previousDialog: DialogRef;\n\n  constructor(\n    private appRef: ApplicationRef,\n    private injector: Injector,\n    private componentFactoryResolver: ComponentFactoryResolver,\n    @Optional() @Inject(IW_DIALOG_CONFIG) private dialogConfig: DialogConfig\n  ) {\n    this.__containerFactory = this.componentFactoryResolver.resolveComponentFactory(DialogContainerComponent);\n  }\n\n  /**\n   * Open a dialog that embeds an entry component.\n   * @param componentType the component class to embed into the dialog\n   * @param options the options to use with the dialog\n   * @param data the data to pass to the embedded component\n   */\n  open<T>(componentType: Type<T>, options?: DialogOptions, data?: {[key: string]: any}): IDialog {\n    const factory = this.componentFactoryResolver.resolveComponentFactory<{[key: string]: any}>(componentType);\n    const component = factory.create(this.injector);\n    const _data = data || {};\n    for (const key in _data) {\n      if (_data.hasOwnProperty(key)) {\n        component.instance[key] = _data[key];\n      }\n    }\n    const dialogRef = new DialogRef(\n      this.__containerFactory.create(this.injector, [[component.location.nativeElement]]),\n      component.hostView,\n      this.appRef,\n      () => {\n        this.__close(dialogRef);\n      },\n      this.__createOptions(options)\n    );\n    return this.__open(dialogRef);\n  }\n\n  /**\n   * Open a dialog that loads a template.\n   * @param templateRef the template to load inside the dialog\n   * @param context the context to associate with the template\n   * @param options the options to use with the dialog\n   */\n  openTemplateRef<T>(templateRef: TemplateRef<T>, context: T, options: DialogOptions): IDialog {\n    const view = templateRef.createEmbeddedView(context);\n    const dialogRef = new DialogRef(\n      this.__containerFactory.create(this.injector, [view.rootNodes]),\n      view,\n      this.appRef,\n      () => {\n        this.__close(dialogRef);\n      },\n      this.__createOptions(options)\n    );\n    return this.__open(dialogRef);\n  }\n\n  /**\n   * Close the currently opened dialog, if any\n   */\n  close() {\n    if (this.__previousDialog) {\n      this.__close(this.__previousDialog);\n    }\n  }\n\n  private __close(dialogRef: DialogRef) {\n    if (this.__previousDialog === dialogRef) {\n      this.__previousDialog.detach();\n      this.__previousDialog = undefined;\n    }\n  }\n\n  private __open(dialogRef: DialogRef): IDialog {\n    this.close();\n    this.__previousDialog = dialogRef;\n    dialogRef.attach();\n    return dialogRef;\n  }\n\n  private __createOptions(_options?: DialogOptions) {\n    const dialogConfig = this.dialogConfig || {};\n    const options = _options || {};\n    return Object.assign({}, this.__defaultOptions, dialogConfig, options, {\n      containerClass: (dialogConfig.containerClass || '') + ' ' + (options.containerClass || '')\n    });\n  }\n}\n\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "appRef",
                        "type": "ApplicationRef"
                    },
                    {
                        "name": "injector",
                        "type": "Injector"
                    },
                    {
                        "name": "componentFactoryResolver",
                        "type": "ComponentFactoryResolver"
                    },
                    {
                        "name": "dialogConfig",
                        "type": "DialogConfig"
                    }
                ],
                "line": 39,
                "jsdoctags": [
                    {
                        "name": "appRef",
                        "type": "ApplicationRef",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "injector",
                        "type": "Injector",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "componentFactoryResolver",
                        "type": "ComponentFactoryResolver",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dialogConfig",
                        "type": "DialogConfig",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "MovableService",
            "id": "injectable-MovableService-55efb8339fd69b2882d13eccfc7fa3c1",
            "file": "src/app/ui/movable/movable.service.ts",
            "properties": [
                {
                    "name": "initialPosition",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "move$",
                    "defaultValue": "new Subject<{ x: number, y: number }>()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "stopped$",
                    "defaultValue": "new Subject()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "methods": [
                {
                    "name": "handleEvent",
                    "args": [
                        {
                            "name": "event",
                            "type": "MouseEvent | TouchEvent"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "MouseEvent | TouchEvent",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "makeHandle",
                    "args": [
                        {
                            "name": "target",
                            "type": "literal type"
                        }
                    ],
                    "optional": false,
                    "returnType": "Function",
                    "typeParameters": [],
                    "line": 45,
                    "jsdoctags": [
                        {
                            "name": "target",
                            "type": "literal type",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "startMoving",
                    "args": [
                        {
                            "name": "position",
                            "type": "literal type"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 16,
                    "jsdoctags": [
                        {
                            "name": "position",
                            "type": "literal type",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "stopMoving",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable, ElementRef } from '@angular/core';\nimport { Subject } from 'rxjs';\n\n@Injectable()\nexport class MovableService implements EventListenerObject {\n  initialPosition: {\n    top: number\n    left: number\n  };\n\n  move$ = new Subject<{ x: number, y: number }>();\n  stopped$ = new Subject();\n\n  constructor() { }\n\n  startMoving(position: { top: number, left: number }) {\n    this.initialPosition = position;\n    document.addEventListener('mousemove', this);\n    document.addEventListener('touchmove', this);\n  }\n\n  stopMoving() {\n    document.removeEventListener('touchmove', this);\n    document.removeEventListener('mousemove', this);\n    this.stopped$.next();\n  }\n\n  handleEvent(event: MouseEvent | TouchEvent) {\n    if (event instanceof MouseEvent) {\n      // we do that to avoid selecting text while dragging\n      event.preventDefault();\n      event.stopPropagation();\n      this.move$.next({\n        x: event.pageX - this.initialPosition.left,\n        y: event.pageY - this.initialPosition.top\n      });\n    } else if (event instanceof TouchEvent) {\n      this.move$.next({\n        x: event.touches[0].pageX - this.initialPosition.left,\n        y: event.touches[0].pageY - this.initialPosition.top\n      });\n    }\n  }\n\n  makeHandle(target: { elementRef: ElementRef }): Function {\n    const element = target.elementRef.nativeElement as HTMLElement;\n\n    const listeners = [\n      { event: 'mousedown', fn: ($event: MouseEvent) => {\n        $event.preventDefault();\n        this.startMoving({\n          top: $event.pageY,\n          left: $event.pageX\n        });\n      }},\n      { event: 'mouseup', fn: () => {\n        this.stopMoving();\n      }},\n      { event: 'touchstart', fn: ($event: TouchEvent) => {\n        // we avoid scrolling\n        $event.preventDefault();\n        this.startMoving({\n          top: $event.touches[0].pageY,\n          left: $event.touches[0].pageX\n        });\n      }},\n      { event: 'touchend', fn: () => {\n        this.stopMoving();\n      }}\n    ];\n\n    listeners.forEach(item => element.addEventListener(item.event, item.fn));\n\n    return () => {\n      listeners.forEach(item => element.removeEventListener(item.event, item.fn));\n    };\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 12
            },
            "type": "injectable"
        },
        {
            "name": "NavigationController",
            "id": "injectable-NavigationController-107144ca8824f0fd556b81cef44c7699",
            "file": "src/app/ui/navigation/navigation-controller.service.ts",
            "properties": [
                {
                    "name": "stack",
                    "defaultValue": "[]",
                    "type": "NavigationItem[]",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "methods": [
                {
                    "name": "dismiss",
                    "args": [
                        {
                            "name": "value",
                            "type": "ReturnDataType",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [
                        "ReturnDataType"
                    ],
                    "line": 31,
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "ReturnDataType",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "present",
                    "args": [
                        {
                            "name": "type",
                            "type": "Type<any>"
                        },
                        {
                            "name": "data",
                            "type": "any",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<ReturnDataType>",
                    "typeParameters": [
                        "ReturnDataType"
                    ],
                    "line": 19,
                    "jsdoctags": [
                        {
                            "name": "type",
                            "type": "Type<any>",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "data",
                            "type": "any",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable, Type, Injector, ReflectiveInjector, InjectionToken } from '@angular/core';\n\nexport const NavigationData = new InjectionToken<any>('iw-navigation.NAVIGATION_DATA');\n\nexport interface NavigationItem {\n  type: Type<any>;\n  resolve: (v: any) => void;\n  injector: Injector;\n}\n\n@Injectable()\nexport class NavigationController {\n  stack: NavigationItem[] = [];\n\n  constructor(\n    private injector: Injector\n  ) { }\n\n  present<ReturnDataType>(type: Type<any>, data?: any): Promise<ReturnDataType> {\n    const injector = ReflectiveInjector.resolveAndCreate([{\n      provide: NavigationData,\n      useValue: data\n    }], this.injector);\n    return new Promise(resolve => {\n      this.stack.push(\n        { type, resolve, injector }\n      );\n    });\n  }\n\n  dismiss<ReturnDataType>(value?: ReturnDataType) {\n    const last = this.stack.pop();\n    last.resolve(value);\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "injector",
                        "type": "Injector"
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "injector",
                        "type": "Injector",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "Popover",
            "id": "injectable-Popover-76cfd7b2d39dc44f4eedc9539cdd160f",
            "file": "src/app/ui/popover/popover.service.ts",
            "properties": [
                {
                    "name": "__instance",
                    "type": "IPopover",
                    "optional": false,
                    "description": "",
                    "line": 63,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "methods": [
                {
                    "name": "close",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 67
                },
                {
                    "name": "setInstance",
                    "args": [
                        {
                            "name": "instance",
                            "type": "IPopover"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 71,
                    "jsdoctags": [
                        {
                            "name": "instance",
                            "type": "IPopover",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import {\n  Injectable,\n  TemplateRef,\n  ComponentRef,\n  Injector,\n  ComponentFactoryResolver,\n  ApplicationRef,\n  EmbeddedViewRef,\n  Type,\n  Optional,\n  Inject\n} from '@angular/core';\nimport { PopoverContainerComponent } from './popover-container/popover-container.component';\nimport { PopoverScrollMaskComponent } from './popover-scroll-mask/popover-scroll-mask.component';\nimport { IW_POPOVER_CONFIG } from './popover.config';\nimport { PopoverConfig } from './popover-config.interface';\nimport { smartPosition, addClasses, combineOptionsAndDefaults } from './helpers';\nimport { PopoverOptions } from './popover-options.interface';\nexport { PopoverPosition } from './popover-position.interface';\nexport { PopoverOptions };\n\nexport interface IPopover {\n  close: () => void;\n}\n\nclass PopoverImpl implements IPopover {\n  private isClosed = false;\n\n  constructor(\n    private embeddedViewRef: EmbeddedViewRef<any>,\n    private appRef: ApplicationRef,\n    private componentRef: ComponentRef<any>,\n    private container: ComponentRef<PopoverContainerComponent>,\n    private scrollMask: ComponentRef<PopoverScrollMaskComponent>,\n    private arrowElement: HTMLElement\n  ) {\n\n  }\n\n  close() {\n    if (this.isClosed) {\n      return;\n    }\n    this.isClosed = true;\n    if (this.embeddedViewRef) {\n      this.embeddedViewRef.destroy();\n      this.appRef.detachView(this.embeddedViewRef);\n    }\n    if (this.componentRef) {\n      this.componentRef.destroy();\n      this.appRef.detachView(this.componentRef.hostView);\n    }\n    this.arrowElement.remove();\n    this.appRef.detachView(this.container.hostView);\n    this.appRef.detachView(this.scrollMask.hostView);\n    this.container.destroy();\n    this.scrollMask.destroy();\n  }\n}\n\n@Injectable()\nexport class Popover {\n  private __instance: IPopover;\n\n  constructor() { }\n\n  close() {\n    this.__instance.close();\n  }\n\n  setInstance(instance: IPopover) {\n    this.__instance = instance;\n  }\n}\n\n@Injectable()\nexport class PopoverService {\n\n  constructor(\n    private injector: Injector,\n    private componentFactoryResolver: ComponentFactoryResolver,\n    private appRef: ApplicationRef,\n    @Optional() @Inject(IW_POPOVER_CONFIG) private popoverConfig: PopoverConfig\n  ) { }\n\n  openTemplateRef<T>(templateRef: TemplateRef<T>, target: HTMLElement, options: PopoverOptions): IPopover {\n    return this.__open(\n      null,\n      templateRef.createEmbeddedView(null),\n      target,\n      combineOptionsAndDefaults(this.popoverConfig, options)\n    );\n  }\n\n  open<T>(componentType: Type<T>, target: HTMLElement, options?: PopoverOptions, init?: (component: T) => void): IPopover {\n    const reflInj = Injector.create([{provide: Popover, deps: []}], this.injector);\n\n    const factory = this.componentFactoryResolver.resolveComponentFactory(componentType);\n    const component = factory.create(reflInj);\n    if (init) {\n      init(component.instance);\n    }\n    const popover: Popover = reflInj.get(Popover);\n    const popoverOptions: PopoverOptions = Object.assign({}, options || {});\n    popoverOptions.shouldClose = () => {\n      if (options && options.shouldClose) {\n        options.shouldClose();\n      }\n      popover.close();\n    };\n\n    const instance = this.__open(\n      component,\n      null,\n      target,\n      combineOptionsAndDefaults(this.popoverConfig, popoverOptions)\n    );\n    popover.setInstance(instance);\n    return instance;\n  }\n\n  private __open<T>(\n    componentRef: ComponentRef<T>,\n    embeddedViewRef: EmbeddedViewRef<T>,\n    target: HTMLElement,\n    options: PopoverOptions\n  ) {\n    const arrowElement = document.createElement('div');\n    arrowElement.classList.add('iw-popover-arrow-element');\n\n    // create the popover container\n    const container = this.componentFactoryResolver.resolveComponentFactory(PopoverContainerComponent)\n      .create(this.injector, componentRef ? [[componentRef.location.nativeElement]] : [embeddedViewRef.rootNodes]);\n    // create the mask component\n    const scrollMask = this.componentFactoryResolver.resolveComponentFactory(PopoverScrollMaskComponent)\n      .create(this.injector);\n\n    // we bind to the output (which is an observable)\n    scrollMask.instance.clickOutsideToClose = options.clickOutsideToClose;\n    scrollMask.instance.onClose.subscribe(() => {\n      options.shouldClose();\n    });\n\n    container.instance.escToClose = options.escToClose;\n    container.instance.onClose.subscribe(() => {\n      options.shouldClose();\n    });\n\n\n    if (componentRef) {\n      this.appRef.attachView(componentRef.hostView);\n    }\n    if (embeddedViewRef) {\n      this.appRef.attachView(embeddedViewRef);\n    }\n    this.appRef.attachView(container.hostView);\n    this.appRef.attachView(scrollMask.hostView);\n\n    this.__showPopover({\n      arrowElement,\n      container: container.location.nativeElement,\n      scrollMask: scrollMask.location.nativeElement,\n      target\n    }, options);\n\n    return new PopoverImpl(\n      embeddedViewRef,\n      this.appRef,\n      componentRef,\n      container,\n      scrollMask,\n      arrowElement\n    );\n  }\n\n  private __showPopover(elements: {\n    container: HTMLElement\n    scrollMask: HTMLElement\n    arrowElement: HTMLElement\n    target: HTMLElement\n  }, options: PopoverOptions) {\n    const container: HTMLElement = elements.container;\n    const scrollMask: HTMLElement = elements.scrollMask;\n    const arrowElement: HTMLElement = elements.arrowElement;\n\n    setTimeout(() => {\n      container.style.visibility = 'hidden';\n      arrowElement.style.visibility = 'hidden';\n      addClasses(container, options.popoverClass);\n      addClasses(scrollMask, options.scrollMaskClass);\n      addClasses(arrowElement, options.arrowClass);\n      document.body.appendChild(container);\n      document.body.appendChild(arrowElement);\n      document.body.appendChild(scrollMask);\n\n      smartPosition(elements, options);\n\n      container.classList.add('iw-popover-container--visible');\n      arrowElement.classList.add('iw-popover-arrow-element--visible');\n    }, 0);\n  }\n\n}\n\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 63
            },
            "type": "injectable"
        },
        {
            "name": "PopoverService",
            "id": "injectable-PopoverService-76cfd7b2d39dc44f4eedc9539cdd160f",
            "file": "src/app/ui/popover/popover.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "__open",
                    "args": [
                        {
                            "name": "componentRef",
                            "type": "ComponentRef<T>"
                        },
                        {
                            "name": "embeddedViewRef",
                            "type": "EmbeddedViewRef<T>"
                        },
                        {
                            "name": "target",
                            "type": "HTMLElement"
                        },
                        {
                            "name": "options",
                            "type": "PopoverOptions"
                        }
                    ],
                    "optional": false,
                    "returnType": "PopoverImpl",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 122,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "componentRef",
                            "type": "ComponentRef<T>",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "embeddedViewRef",
                            "type": "EmbeddedViewRef<T>",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "target",
                            "type": "HTMLElement",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "type": "PopoverOptions",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "__showPopover",
                    "args": [
                        {
                            "name": "elements",
                            "type": "literal type"
                        },
                        {
                            "name": "options",
                            "type": "PopoverOptions"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 176,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "elements",
                            "type": "literal type",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "type": "PopoverOptions",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "open",
                    "args": [
                        {
                            "name": "componentType",
                            "type": "Type<T>"
                        },
                        {
                            "name": "target",
                            "type": "HTMLElement"
                        },
                        {
                            "name": "options",
                            "type": "PopoverOptions",
                            "optional": true
                        },
                        {
                            "name": "init",
                            "type": "function",
                            "optional": true,
                            "function": [
                                {
                                    "name": "component",
                                    "type": "T"
                                }
                            ]
                        }
                    ],
                    "optional": false,
                    "returnType": "IPopover",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 95,
                    "jsdoctags": [
                        {
                            "name": "componentType",
                            "type": "Type<T>",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "target",
                            "type": "HTMLElement",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "type": "PopoverOptions",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "init",
                            "type": "function",
                            "optional": true,
                            "function": [
                                {
                                    "name": "component",
                                    "type": "T"
                                }
                            ],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "openTemplateRef",
                    "args": [
                        {
                            "name": "templateRef",
                            "type": "TemplateRef<T>"
                        },
                        {
                            "name": "target",
                            "type": "HTMLElement"
                        },
                        {
                            "name": "options",
                            "type": "PopoverOptions"
                        }
                    ],
                    "optional": false,
                    "returnType": "IPopover",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 86,
                    "jsdoctags": [
                        {
                            "name": "templateRef",
                            "type": "TemplateRef<T>",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "target",
                            "type": "HTMLElement",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "type": "PopoverOptions",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import {\n  Injectable,\n  TemplateRef,\n  ComponentRef,\n  Injector,\n  ComponentFactoryResolver,\n  ApplicationRef,\n  EmbeddedViewRef,\n  Type,\n  Optional,\n  Inject\n} from '@angular/core';\nimport { PopoverContainerComponent } from './popover-container/popover-container.component';\nimport { PopoverScrollMaskComponent } from './popover-scroll-mask/popover-scroll-mask.component';\nimport { IW_POPOVER_CONFIG } from './popover.config';\nimport { PopoverConfig } from './popover-config.interface';\nimport { smartPosition, addClasses, combineOptionsAndDefaults } from './helpers';\nimport { PopoverOptions } from './popover-options.interface';\nexport { PopoverPosition } from './popover-position.interface';\nexport { PopoverOptions };\n\nexport interface IPopover {\n  close: () => void;\n}\n\nclass PopoverImpl implements IPopover {\n  private isClosed = false;\n\n  constructor(\n    private embeddedViewRef: EmbeddedViewRef<any>,\n    private appRef: ApplicationRef,\n    private componentRef: ComponentRef<any>,\n    private container: ComponentRef<PopoverContainerComponent>,\n    private scrollMask: ComponentRef<PopoverScrollMaskComponent>,\n    private arrowElement: HTMLElement\n  ) {\n\n  }\n\n  close() {\n    if (this.isClosed) {\n      return;\n    }\n    this.isClosed = true;\n    if (this.embeddedViewRef) {\n      this.embeddedViewRef.destroy();\n      this.appRef.detachView(this.embeddedViewRef);\n    }\n    if (this.componentRef) {\n      this.componentRef.destroy();\n      this.appRef.detachView(this.componentRef.hostView);\n    }\n    this.arrowElement.remove();\n    this.appRef.detachView(this.container.hostView);\n    this.appRef.detachView(this.scrollMask.hostView);\n    this.container.destroy();\n    this.scrollMask.destroy();\n  }\n}\n\n@Injectable()\nexport class Popover {\n  private __instance: IPopover;\n\n  constructor() { }\n\n  close() {\n    this.__instance.close();\n  }\n\n  setInstance(instance: IPopover) {\n    this.__instance = instance;\n  }\n}\n\n@Injectable()\nexport class PopoverService {\n\n  constructor(\n    private injector: Injector,\n    private componentFactoryResolver: ComponentFactoryResolver,\n    private appRef: ApplicationRef,\n    @Optional() @Inject(IW_POPOVER_CONFIG) private popoverConfig: PopoverConfig\n  ) { }\n\n  openTemplateRef<T>(templateRef: TemplateRef<T>, target: HTMLElement, options: PopoverOptions): IPopover {\n    return this.__open(\n      null,\n      templateRef.createEmbeddedView(null),\n      target,\n      combineOptionsAndDefaults(this.popoverConfig, options)\n    );\n  }\n\n  open<T>(componentType: Type<T>, target: HTMLElement, options?: PopoverOptions, init?: (component: T) => void): IPopover {\n    const reflInj = Injector.create([{provide: Popover, deps: []}], this.injector);\n\n    const factory = this.componentFactoryResolver.resolveComponentFactory(componentType);\n    const component = factory.create(reflInj);\n    if (init) {\n      init(component.instance);\n    }\n    const popover: Popover = reflInj.get(Popover);\n    const popoverOptions: PopoverOptions = Object.assign({}, options || {});\n    popoverOptions.shouldClose = () => {\n      if (options && options.shouldClose) {\n        options.shouldClose();\n      }\n      popover.close();\n    };\n\n    const instance = this.__open(\n      component,\n      null,\n      target,\n      combineOptionsAndDefaults(this.popoverConfig, popoverOptions)\n    );\n    popover.setInstance(instance);\n    return instance;\n  }\n\n  private __open<T>(\n    componentRef: ComponentRef<T>,\n    embeddedViewRef: EmbeddedViewRef<T>,\n    target: HTMLElement,\n    options: PopoverOptions\n  ) {\n    const arrowElement = document.createElement('div');\n    arrowElement.classList.add('iw-popover-arrow-element');\n\n    // create the popover container\n    const container = this.componentFactoryResolver.resolveComponentFactory(PopoverContainerComponent)\n      .create(this.injector, componentRef ? [[componentRef.location.nativeElement]] : [embeddedViewRef.rootNodes]);\n    // create the mask component\n    const scrollMask = this.componentFactoryResolver.resolveComponentFactory(PopoverScrollMaskComponent)\n      .create(this.injector);\n\n    // we bind to the output (which is an observable)\n    scrollMask.instance.clickOutsideToClose = options.clickOutsideToClose;\n    scrollMask.instance.onClose.subscribe(() => {\n      options.shouldClose();\n    });\n\n    container.instance.escToClose = options.escToClose;\n    container.instance.onClose.subscribe(() => {\n      options.shouldClose();\n    });\n\n\n    if (componentRef) {\n      this.appRef.attachView(componentRef.hostView);\n    }\n    if (embeddedViewRef) {\n      this.appRef.attachView(embeddedViewRef);\n    }\n    this.appRef.attachView(container.hostView);\n    this.appRef.attachView(scrollMask.hostView);\n\n    this.__showPopover({\n      arrowElement,\n      container: container.location.nativeElement,\n      scrollMask: scrollMask.location.nativeElement,\n      target\n    }, options);\n\n    return new PopoverImpl(\n      embeddedViewRef,\n      this.appRef,\n      componentRef,\n      container,\n      scrollMask,\n      arrowElement\n    );\n  }\n\n  private __showPopover(elements: {\n    container: HTMLElement\n    scrollMask: HTMLElement\n    arrowElement: HTMLElement\n    target: HTMLElement\n  }, options: PopoverOptions) {\n    const container: HTMLElement = elements.container;\n    const scrollMask: HTMLElement = elements.scrollMask;\n    const arrowElement: HTMLElement = elements.arrowElement;\n\n    setTimeout(() => {\n      container.style.visibility = 'hidden';\n      arrowElement.style.visibility = 'hidden';\n      addClasses(container, options.popoverClass);\n      addClasses(scrollMask, options.scrollMaskClass);\n      addClasses(arrowElement, options.arrowClass);\n      document.body.appendChild(container);\n      document.body.appendChild(arrowElement);\n      document.body.appendChild(scrollMask);\n\n      smartPosition(elements, options);\n\n      container.classList.add('iw-popover-container--visible');\n      arrowElement.classList.add('iw-popover-arrow-element--visible');\n    }, 0);\n  }\n\n}\n\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "injector",
                        "type": "Injector"
                    },
                    {
                        "name": "componentFactoryResolver",
                        "type": "ComponentFactoryResolver"
                    },
                    {
                        "name": "appRef",
                        "type": "ApplicationRef"
                    },
                    {
                        "name": "popoverConfig",
                        "type": "PopoverConfig"
                    }
                ],
                "line": 77,
                "jsdoctags": [
                    {
                        "name": "injector",
                        "type": "Injector",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "componentFactoryResolver",
                        "type": "ComponentFactoryResolver",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "appRef",
                        "type": "ApplicationRef",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "popoverConfig",
                        "type": "PopoverConfig",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "TaskRunnerService",
            "id": "injectable-TaskRunnerService-015067066177eb44ffbb91ed4295e910",
            "file": "src/app/ui/multiline-ellipsis/task-runner.service.ts",
            "properties": [
                {
                    "name": "tasks",
                    "defaultValue": "[]",
                    "type": "Function[]",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "timeout",
                    "defaultValue": "undefined",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "methods": [
                {
                    "name": "addTaskForNextRound",
                    "args": [
                        {
                            "name": "t",
                            "type": "Function"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "jsdoctags": [
                        {
                            "name": "t",
                            "type": "Function",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "<p>The TaskRunnerService was introduced to execute tasks in one zone run.\nThis is useful when directives/components want to emit outputs after change detection.</p>\n",
            "sourceCode": "import { Injectable } from '@angular/core';\n\n/**\n * The TaskRunnerService was introduced to execute tasks in one zone run.\n * This is useful when directives/components want to emit outputs after change detection.\n */\n@Injectable()\nexport class TaskRunnerService {\n  private tasks: Function[] = [];\n  private timeout: any = undefined;\n\n  addTaskForNextRound(t: Function) {\n    this.tasks.push(t);\n    if (!this.timeout) {\n      this.timeout = setTimeout(() => {\n        const tasks = this.tasks;\n        this.tasks = [];\n        tasks.forEach(task => task());\n        this.timeout = undefined;\n      }, 0);\n    }\n  }\n}\n",
            "type": "injectable"
        }
    ],
    "classes": [
        {
            "name": "DialogRef",
            "id": "class-DialogRef-21e909125d88e66d01dc94fd73204c3a",
            "file": "src/app/ui/dialog/dialog-ref.class.ts",
            "type": "class",
            "sourceCode": "import {\n  ApplicationRef,\n  ComponentRef,\n  ViewRef\n} from '@angular/core';\nimport {\n  DialogContainerComponent,\n  DialogOptions\n} from './dialog-container/dialog-container.component';\n\nexport class DialogRef {\n  constructor(\n    public container: ComponentRef<DialogContainerComponent>,\n    private __viewRef: ViewRef,\n    private __appRef: ApplicationRef,\n    private __close: () => any,\n    private __options: DialogOptions\n  ) {\n    this.container.instance.onClose.subscribe(() => {\n      this.__close();\n    });\n    this.container.instance.dialogOptions = this.__options;\n  }\n\n  close() {\n    this.__close();\n  }\n\n  attach() {\n    document.body.appendChild(this.container.location.nativeElement);\n    this.__appRef.attachView(this.container.hostView);\n    if (this.__viewRef) {\n      this.__appRef.attachView(this.__viewRef);\n    }\n  }\n\n  detach() {\n    if (this.__options.onClose) {\n      this.__options.onClose(this);\n    }\n    document.body.removeChild(this.container.location.nativeElement);\n    this.__appRef.detachView(this.container.hostView);\n    if (this.__viewRef) {\n      this.__appRef.detachView(this.__viewRef);\n    }\n    this.container.destroy();\n    if (this.__viewRef) {\n      this.__viewRef.destroy();\n    }\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "container",
                        "type": "ComponentRef<DialogContainerComponent>"
                    },
                    {
                        "name": "__viewRef",
                        "type": "ViewRef"
                    },
                    {
                        "name": "__appRef",
                        "type": "ApplicationRef"
                    },
                    {
                        "name": "__close",
                        "type": "function",
                        "function": []
                    },
                    {
                        "name": "__options",
                        "type": "DialogOptions"
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "container",
                        "type": "ComponentRef<DialogContainerComponent>",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "__viewRef",
                        "type": "ViewRef",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "__appRef",
                        "type": "ApplicationRef",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "__close",
                        "type": "function",
                        "function": [],
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "__options",
                        "type": "DialogOptions",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "container",
                    "type": "ComponentRef<DialogContainerComponent>",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methods": [
                {
                    "name": "attach",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29
                },
                {
                    "name": "close",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25
                },
                {
                    "name": "detach",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "PopoverImpl",
            "id": "class-PopoverImpl-76cfd7b2d39dc44f4eedc9539cdd160f",
            "file": "src/app/ui/popover/popover.service.ts",
            "type": "class",
            "sourceCode": "import {\n  Injectable,\n  TemplateRef,\n  ComponentRef,\n  Injector,\n  ComponentFactoryResolver,\n  ApplicationRef,\n  EmbeddedViewRef,\n  Type,\n  Optional,\n  Inject\n} from '@angular/core';\nimport { PopoverContainerComponent } from './popover-container/popover-container.component';\nimport { PopoverScrollMaskComponent } from './popover-scroll-mask/popover-scroll-mask.component';\nimport { IW_POPOVER_CONFIG } from './popover.config';\nimport { PopoverConfig } from './popover-config.interface';\nimport { smartPosition, addClasses, combineOptionsAndDefaults } from './helpers';\nimport { PopoverOptions } from './popover-options.interface';\nexport { PopoverPosition } from './popover-position.interface';\nexport { PopoverOptions };\n\nexport interface IPopover {\n  close: () => void;\n}\n\nclass PopoverImpl implements IPopover {\n  private isClosed = false;\n\n  constructor(\n    private embeddedViewRef: EmbeddedViewRef<any>,\n    private appRef: ApplicationRef,\n    private componentRef: ComponentRef<any>,\n    private container: ComponentRef<PopoverContainerComponent>,\n    private scrollMask: ComponentRef<PopoverScrollMaskComponent>,\n    private arrowElement: HTMLElement\n  ) {\n\n  }\n\n  close() {\n    if (this.isClosed) {\n      return;\n    }\n    this.isClosed = true;\n    if (this.embeddedViewRef) {\n      this.embeddedViewRef.destroy();\n      this.appRef.detachView(this.embeddedViewRef);\n    }\n    if (this.componentRef) {\n      this.componentRef.destroy();\n      this.appRef.detachView(this.componentRef.hostView);\n    }\n    this.arrowElement.remove();\n    this.appRef.detachView(this.container.hostView);\n    this.appRef.detachView(this.scrollMask.hostView);\n    this.container.destroy();\n    this.scrollMask.destroy();\n  }\n}\n\n@Injectable()\nexport class Popover {\n  private __instance: IPopover;\n\n  constructor() { }\n\n  close() {\n    this.__instance.close();\n  }\n\n  setInstance(instance: IPopover) {\n    this.__instance = instance;\n  }\n}\n\n@Injectable()\nexport class PopoverService {\n\n  constructor(\n    private injector: Injector,\n    private componentFactoryResolver: ComponentFactoryResolver,\n    private appRef: ApplicationRef,\n    @Optional() @Inject(IW_POPOVER_CONFIG) private popoverConfig: PopoverConfig\n  ) { }\n\n  openTemplateRef<T>(templateRef: TemplateRef<T>, target: HTMLElement, options: PopoverOptions): IPopover {\n    return this.__open(\n      null,\n      templateRef.createEmbeddedView(null),\n      target,\n      combineOptionsAndDefaults(this.popoverConfig, options)\n    );\n  }\n\n  open<T>(componentType: Type<T>, target: HTMLElement, options?: PopoverOptions, init?: (component: T) => void): IPopover {\n    const reflInj = Injector.create([{provide: Popover, deps: []}], this.injector);\n\n    const factory = this.componentFactoryResolver.resolveComponentFactory(componentType);\n    const component = factory.create(reflInj);\n    if (init) {\n      init(component.instance);\n    }\n    const popover: Popover = reflInj.get(Popover);\n    const popoverOptions: PopoverOptions = Object.assign({}, options || {});\n    popoverOptions.shouldClose = () => {\n      if (options && options.shouldClose) {\n        options.shouldClose();\n      }\n      popover.close();\n    };\n\n    const instance = this.__open(\n      component,\n      null,\n      target,\n      combineOptionsAndDefaults(this.popoverConfig, popoverOptions)\n    );\n    popover.setInstance(instance);\n    return instance;\n  }\n\n  private __open<T>(\n    componentRef: ComponentRef<T>,\n    embeddedViewRef: EmbeddedViewRef<T>,\n    target: HTMLElement,\n    options: PopoverOptions\n  ) {\n    const arrowElement = document.createElement('div');\n    arrowElement.classList.add('iw-popover-arrow-element');\n\n    // create the popover container\n    const container = this.componentFactoryResolver.resolveComponentFactory(PopoverContainerComponent)\n      .create(this.injector, componentRef ? [[componentRef.location.nativeElement]] : [embeddedViewRef.rootNodes]);\n    // create the mask component\n    const scrollMask = this.componentFactoryResolver.resolveComponentFactory(PopoverScrollMaskComponent)\n      .create(this.injector);\n\n    // we bind to the output (which is an observable)\n    scrollMask.instance.clickOutsideToClose = options.clickOutsideToClose;\n    scrollMask.instance.onClose.subscribe(() => {\n      options.shouldClose();\n    });\n\n    container.instance.escToClose = options.escToClose;\n    container.instance.onClose.subscribe(() => {\n      options.shouldClose();\n    });\n\n\n    if (componentRef) {\n      this.appRef.attachView(componentRef.hostView);\n    }\n    if (embeddedViewRef) {\n      this.appRef.attachView(embeddedViewRef);\n    }\n    this.appRef.attachView(container.hostView);\n    this.appRef.attachView(scrollMask.hostView);\n\n    this.__showPopover({\n      arrowElement,\n      container: container.location.nativeElement,\n      scrollMask: scrollMask.location.nativeElement,\n      target\n    }, options);\n\n    return new PopoverImpl(\n      embeddedViewRef,\n      this.appRef,\n      componentRef,\n      container,\n      scrollMask,\n      arrowElement\n    );\n  }\n\n  private __showPopover(elements: {\n    container: HTMLElement\n    scrollMask: HTMLElement\n    arrowElement: HTMLElement\n    target: HTMLElement\n  }, options: PopoverOptions) {\n    const container: HTMLElement = elements.container;\n    const scrollMask: HTMLElement = elements.scrollMask;\n    const arrowElement: HTMLElement = elements.arrowElement;\n\n    setTimeout(() => {\n      container.style.visibility = 'hidden';\n      arrowElement.style.visibility = 'hidden';\n      addClasses(container, options.popoverClass);\n      addClasses(scrollMask, options.scrollMaskClass);\n      addClasses(arrowElement, options.arrowClass);\n      document.body.appendChild(container);\n      document.body.appendChild(arrowElement);\n      document.body.appendChild(scrollMask);\n\n      smartPosition(elements, options);\n\n      container.classList.add('iw-popover-container--visible');\n      arrowElement.classList.add('iw-popover-arrow-element--visible');\n    }, 0);\n  }\n\n}\n\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "embeddedViewRef",
                        "type": "EmbeddedViewRef<any>"
                    },
                    {
                        "name": "appRef",
                        "type": "ApplicationRef"
                    },
                    {
                        "name": "componentRef",
                        "type": "ComponentRef<any>"
                    },
                    {
                        "name": "container",
                        "type": "ComponentRef<PopoverContainerComponent>"
                    },
                    {
                        "name": "scrollMask",
                        "type": "ComponentRef<PopoverScrollMaskComponent>"
                    },
                    {
                        "name": "arrowElement",
                        "type": "HTMLElement"
                    }
                ],
                "line": 27,
                "jsdoctags": [
                    {
                        "name": "embeddedViewRef",
                        "type": "EmbeddedViewRef<any>",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "appRef",
                        "type": "ApplicationRef",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "componentRef",
                        "type": "ComponentRef<any>",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "container",
                        "type": "ComponentRef<PopoverContainerComponent>",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "scrollMask",
                        "type": "ComponentRef<PopoverScrollMaskComponent>",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "arrowElement",
                        "type": "HTMLElement",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "isClosed",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "methods": [
                {
                    "name": "close",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 40
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "IPopover"
            ]
        },
        {
            "name": "StateTemplate",
            "id": "class-StateTemplate-8113a8614544618fd1599d99a7dc6765",
            "file": "src/app/ui/state-button/state-template.class.ts",
            "type": "class",
            "sourceCode": "import { EmbeddedViewRef, OnDestroy, OnInit, TemplateRef, ViewContainerRef } from '@angular/core';\nimport { Subscription } from 'rxjs';\nimport { distinctUntilChanged, map } from 'rxjs/operators';\nimport { ButtonState } from './button-state';\nimport { IStateButtonDirective } from './state-button-directive.interface';\n\nexport class StateTemplate implements OnInit, OnDestroy {\n  private __previousEmbedded: EmbeddedViewRef<any>;\n  private __subscription: Subscription;\n\n  constructor(\n    protected triggeringState: ButtonState,\n    protected viewContainerRef: ViewContainerRef,\n    protected templateRef: TemplateRef<any>,\n    protected stateButtonDirective: IStateButtonDirective\n  ) {\n  }\n\n  ngOnInit() {\n    const distinct = this.stateButtonDirective.state\n      .pipe(map(s => s === this.triggeringState))\n      .pipe(distinctUntilChanged());\n    this.__subscription = distinct.subscribe(b => {\n      if (b) {\n        this.__previousEmbedded = this.viewContainerRef.createEmbeddedView(this.templateRef);\n      } else {\n        this.__remove();\n      }\n    });\n  }\n\n  ngOnDestroy() {\n    this.__subscription.unsubscribe();\n    this.__remove();\n  }\n\n  private __remove() {\n    if (this.__previousEmbedded) {\n      this.__previousEmbedded.destroy();\n      this.viewContainerRef.remove(0);\n    }\n  }\n\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "triggeringState",
                        "type": "ButtonState"
                    },
                    {
                        "name": "viewContainerRef",
                        "type": "ViewContainerRef"
                    },
                    {
                        "name": "templateRef",
                        "type": "TemplateRef<any>"
                    },
                    {
                        "name": "stateButtonDirective",
                        "type": "IStateButtonDirective"
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "triggeringState",
                        "type": "ButtonState",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "viewContainerRef",
                        "type": "ViewContainerRef",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "templateRef",
                        "type": "TemplateRef<any>",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "stateButtonDirective",
                        "type": "IStateButtonDirective",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "__previousEmbedded",
                    "type": "EmbeddedViewRef<any>",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "__subscription",
                    "type": "Subscription",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "methods": [
                {
                    "name": "__remove",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "OnInit",
                "OnDestroy"
            ]
        }
    ],
    "directives": [
        {
            "name": "CustomMoveHandleDirective",
            "id": "directive-CustomMoveHandleDirective-925b7d92e9cb23e23b579022d10abaf8",
            "file": "src/app/demo/movable-demo/movable-demo/movable-demo.component.ts",
            "type": "directive",
            "description": "",
            "sourceCode": "import { Component, Directive, ElementRef, OnDestroy, OnInit } from '@angular/core';\nimport { MovableService } from '../../../ui/movable/movable.module';\n\n@Directive({\n  selector: '[appCustomMoveHandle]'\n})\nexport class CustomMoveHandleDirective implements OnInit, OnDestroy {\n  private sub: Function;\n\n  constructor(private movable: MovableService, public elementRef: ElementRef) {\n\n  }\n\n  ngOnInit() {\n    this.sub = this.movable.makeHandle(this);\n  }\n\n  ngOnDestroy() {\n    this.sub();\n  }\n}\n\n@Component({\n  template: `<div appCustomMoveHandle>custom handle directive</div>`\n})\nexport class MovableDemoContent2Component {\n\n}\n\n@Component({\n  template: `<div iwMoveHandle>iwMoveHandle</div>`\n})\nexport class MovableDemoContentComponent {\n\n}\n\n@Component({\n  selector: 'app-movable-demo',\n  templateUrl: './movable-demo.component.html',\n  styleUrls: ['./movable-demo.component.sass']\n})\nexport class MovableDemoComponent {\n  movableDemoContentComponent = MovableDemoContentComponent;\n  movableDemoContent2Component = MovableDemoContent2Component;\n}\n",
            "selector": "[appCustomMoveHandle]",
            "providers": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "elementRef",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "sub",
                    "type": "Function",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 18
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 14
                }
            ],
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "movable",
                        "type": "MovableService"
                    },
                    {
                        "name": "elementRef",
                        "type": "ElementRef"
                    }
                ],
                "line": 8,
                "jsdoctags": [
                    {
                        "name": "movable",
                        "type": "MovableService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "elementRef",
                        "type": "ElementRef",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "DialogDirective",
            "id": "directive-DialogDirective-d63366f59cd8a13d4f8fecc61660d47e",
            "file": "src/app/ui/dialog/dialog.directive.ts",
            "type": "directive",
            "description": "<p>The dialog component is meant to focus user&#39;s attention on one particular task or content.\nIt is displayed on top of the rest.</p>\n<div><pre class=\"line-numbers\"><code class=\"language-ts\"> import { DialogModule } from &#39;iwerk-angular-ui&#39;;</code></pre></div>",
            "sourceCode": "import { Directive, TemplateRef, Input, OnDestroy } from '@angular/core';\nimport { DialogService, IDialog } from './dialog.service';\n\n/**\n * The dialog component is meant to focus user's attention on one particular task or content.\n * It is displayed on top of the rest.\n ```ts\n import { DialogModule } from 'iwerk-angular-ui';\n ```\n */\n@Directive({\n  selector: '[iwDialog]',\n  exportAs: 'iw-dialog'\n})\nexport class DialogDirective implements OnDestroy {\n  /**\n   * User can press Escape to close the dialog.\n   */\n  @Input() escToClose: boolean;\n  /**\n   * User can click outside of the dialog to close it.\n   */\n  @Input() clickToClose: boolean;\n  /**\n   * A class that is added to the container.\n   */\n  @Input() containerClass: string;\n\n  private __dialogInstance: IDialog;\n\n  constructor(\n    private dialogService: DialogService,\n    private templateRef: TemplateRef<any>\n  ) { }\n\n  /**\n   * @ignore\n   */\n  ngOnDestroy() {\n    if (this.__dialogInstance) {\n      this.__dialogInstance.close();\n      this.__dialogInstance = undefined;\n    }\n  }\n\n  /**\n   * Open the dialog.\n   */\n  open() {\n    if (this.__dialogInstance) {\n      return;\n    }\n    this.__dialogInstance = this.dialogService.openTemplateRef(this.templateRef, null, {\n      clickToClose: this.clickToClose === undefined ? true : this.clickToClose,\n      containerClass: this.containerClass || '',\n      escToClose: this.escToClose === undefined ? true : this.escToClose,\n      onClose: (dialog) => {\n        if (this.__dialogInstance === dialog) {\n          this.__dialogInstance = undefined;\n        }\n      }\n    });\n  }\n\n  /**\n   * Close the dialog.\n   */\n  close() {\n    if (this.__dialogInstance) {\n      this.__dialogInstance.close();\n      this.__dialogInstance = undefined;\n    }\n  }\n}\n",
            "selector": "[iwDialog]",
            "providers": [],
            "inputsClass": [
                {
                    "name": "clickToClose",
                    "description": "<p>User can click outside of the dialog to close it.</p>\n",
                    "line": 23,
                    "type": "boolean"
                },
                {
                    "name": "containerClass",
                    "description": "<p>A class that is added to the container.</p>\n",
                    "line": 27,
                    "type": "string"
                },
                {
                    "name": "escToClose",
                    "description": "<p>User can press Escape to close the dialog.</p>\n",
                    "line": 19,
                    "type": "boolean"
                }
            ],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "__dialogInstance",
                    "type": "IDialog",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "close",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 68,
                    "description": "<p>Close the dialog.</p>\n"
                },
                {
                    "name": "open",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 49,
                    "description": "<p>Open the dialog.</p>\n"
                }
            ],
            "implements": [
                "OnDestroy"
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "dialogService",
                        "type": "DialogService"
                    },
                    {
                        "name": "templateRef",
                        "type": "TemplateRef<any>"
                    }
                ],
                "line": 29,
                "jsdoctags": [
                    {
                        "name": "dialogService",
                        "type": "DialogService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "templateRef",
                        "type": "TemplateRef<any>",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "DialogFocusTrapDirective",
            "id": "directive-DialogFocusTrapDirective-4e8ca3ed8b68f44584483858da800542",
            "file": "src/app/ui/dialog/dialog-focus-trap.directive.ts",
            "type": "directive",
            "description": "",
            "sourceCode": "import { Directive, HostBinding, HostListener } from '@angular/core';\nimport { DialogContainerComponent } from './dialog-container/dialog-container.component';\n\n@Directive({\n  selector: '[iwDialogFocusTrap]'\n})\nexport class DialogFocusTrapDirective {\n  @HostBinding('attr.tabindex')\n  tabindex = 0;\n\n  constructor(private container: DialogContainerComponent) {\n  }\n\n  @HostListener('focus', ['$event'])\n  onFocus($event: FocusEvent) {\n    this.container.focus();\n  }\n}\n",
            "selector": "[iwDialogFocusTrap]",
            "providers": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [
                {
                    "name": "attr.tabindex",
                    "defaultValue": "0",
                    "line": 9
                }
            ],
            "hostListeners": [
                {
                    "name": "focus",
                    "args": [
                        {
                            "name": "$event",
                            "type": "FocusEvent"
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "line": 15
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "container",
                        "type": "DialogContainerComponent"
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "container",
                        "type": "DialogContainerComponent",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "MovableDirective",
            "id": "directive-MovableDirective-1ec0c5bbdf0456dbf48fe96d7fe35ba2",
            "file": "src/app/ui/movable/movable.directive.ts",
            "type": "directive",
            "description": "<p>The movable directive lets the user move around elements.</p>\n",
            "sourceCode": "import { Directive, ElementRef, HostBinding, OnInit, EventEmitter, Output } from '@angular/core';\nimport { MovableService } from './movable.service';\n\n/**\n * The movable directive lets the user move around elements.\n */\n@Directive({\n  selector: '[iwMovable]',\n  providers: [MovableService]\n})\nexport class MovableDirective implements OnInit {\n  /**\n   * Emits true when the element is moved, false otherwise.\n   */\n  @Output() moved = new EventEmitter<boolean>();\n\n  @HostBinding('style.top')\n  get top() {\n    if (this.__position !== undefined) {\n      let top = this.__position.top;\n      if (this.__move) {\n        top += this.__move.y;\n      }\n      return top + 'px';\n    }\n    return '';\n  }\n\n  @HostBinding('style.left')\n  get left() {\n    if (this.__position !== undefined) {\n      let left = this.__position.left;\n      if (this.__move) {\n        left += this.__move.x;\n      }\n      return left + 'px';\n    }\n    return '';\n  }\n\n  private __position: {\n    top: number\n    left: number\n  };\n  private __move: {\n    x: number\n    y: number\n  };\n\n  constructor(\n    private movable: MovableService,\n    private elementRef: ElementRef\n  ) {\n  }\n\n  /**\n   * @ignore\n   */\n  ngOnInit() {\n    this.movable.move$.subscribe(move => {\n      if (!this.__position) {\n        this.updateCurrentPositionFromOffset();\n      }\n      this.__move = move;\n      this.moved.next(true);\n    });\n    this.movable.stopped$.subscribe(() => {\n      this.__move = undefined;\n      this.updateCurrentPositionFromOffset();\n      this.moved.next(false);\n    });\n  }\n\n  private get element() {\n    return this.elementRef.nativeElement as HTMLElement;\n  }\n\n  /**\n   * @ignore\n   */\n  private updateCurrentPositionFromOffset() {\n    this.__position = {\n      top: this.element.offsetTop,\n      left: this.element.offsetLeft\n    };\n  }\n\n}\n",
            "selector": "[iwMovable]",
            "providers": [
                {
                    "name": "MovableService"
                }
            ],
            "inputsClass": [],
            "outputsClass": [
                {
                    "name": "moved",
                    "defaultValue": "new EventEmitter<boolean>()",
                    "description": "<p>Emits true when the element is moved, false otherwise.</p>\n",
                    "line": 15,
                    "type": "EventEmitter"
                }
            ],
            "hostBindings": [
                {
                    "name": "style.left",
                    "line": 30
                },
                {
                    "name": "style.top",
                    "line": 18
                }
            ],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "__move",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 45,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "__position",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 41,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "methodsClass": [],
            "implements": [
                "OnInit"
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "movable",
                        "type": "MovableService"
                    },
                    {
                        "name": "elementRef",
                        "type": "ElementRef"
                    }
                ],
                "line": 48,
                "jsdoctags": [
                    {
                        "name": "movable",
                        "type": "MovableService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "elementRef",
                        "type": "ElementRef",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "element": {
                    "name": "element",
                    "getSignature": {
                        "name": "element",
                        "type": "",
                        "returnType": "",
                        "line": 74
                    }
                }
            }
        },
        {
            "name": "MoveHandleDirective",
            "id": "directive-MoveHandleDirective-c9ef917ac7b30a7eae5dbc8108a4a3a0",
            "file": "src/app/ui/movable/move-handle.directive.ts",
            "type": "directive",
            "description": "",
            "sourceCode": "import { Directive, ElementRef, OnDestroy, OnInit } from '@angular/core';\nimport { MovableService } from './movable.service';\n\n@Directive({\n  selector: '[iwMoveHandle]'\n})\nexport class MoveHandleDirective implements OnInit, OnDestroy {\n  private sub: Function;\n\n  constructor(\n    private movable: MovableService,\n    public elementRef: ElementRef\n  ) { }\n\n  ngOnInit() {\n    this.sub = this.movable.makeHandle(this);\n  }\n\n  ngOnDestroy() {\n    this.sub();\n  }\n}\n",
            "selector": "[iwMoveHandle]",
            "providers": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "elementRef",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "sub",
                    "type": "Function",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 15
                }
            ],
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "movable",
                        "type": "MovableService"
                    },
                    {
                        "name": "elementRef",
                        "type": "ElementRef"
                    }
                ],
                "line": 8,
                "jsdoctags": [
                    {
                        "name": "movable",
                        "type": "MovableService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "elementRef",
                        "type": "ElementRef",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "MultilineEllipsisDirective",
            "id": "directive-MultilineEllipsisDirective-97e5dc0692fc020fc47a9bd4497ed472",
            "file": "src/app/ui/multiline-ellipsis/multiline-ellipsis.directive.ts",
            "type": "directive",
            "description": "<p>The multiline ellipsis directive can be used to display multi-line\ntext with an ellipsis character at the end if the text is too long.</p>\n<div><pre class=\"line-numbers\"><code class=\"language-ts\"> import { MultilineEllipsisModule } from &#39;iwerk-angular-ui&#39;;</code></pre></div>",
            "sourceCode": "import { AfterViewChecked, Directive, ElementRef, EventEmitter, HostListener, Input, OnInit, Output } from '@angular/core';\nimport { TaskRunnerService } from './task-runner.service';\n\n/**\n * The multiline ellipsis directive can be used to display multi-line\n * text with an ellipsis character at the end if the text is too long.\n *\n ```ts\n import { MultilineEllipsisModule } from 'iwerk-angular-ui';\n ```\n */\n@Directive({\n  selector: '[iwMultilineEllipsis]'\n})\nexport class MultilineEllipsisDirective implements AfterViewChecked, OnInit {\n\n  /**\n   * The text to display.\n   */\n  @Input() iwMultilineEllipsis: string;\n  /**\n   * An event that is emitted that indicates whether the text is truncated.\n   */\n  @Output() truncated = new EventEmitter<boolean>();\n\n  /**\n   * A boolean that indicates if the text overflows.\n   */\n  get isOverflowing(): boolean {\n    return this.__isOverflowing;\n  }\n\n  private __isOverflowing: boolean;\n  private needsAdjust: boolean;\n  private oldText: string;\n  private oldHeight: number;\n  private oldWidth: number;\n\n  constructor(\n    private elementRef: ElementRef,\n    private taskRunner: TaskRunnerService\n  ) {\n  }\n\n  /**\n   * @ignore\n   */\n  ngOnInit() {\n    const self: HTMLElement = this.elementRef.nativeElement;\n    self.classList.add('multiline-ellipsis');\n  }\n\n  /**\n   * @ignore\n   */\n  ngAfterViewChecked() {\n    const self: HTMLElement = this.elementRef.nativeElement;\n    if (this.iwMultilineEllipsis !== this.oldText || this.oldHeight !== self.offsetHeight || this.oldWidth !== self.offsetWidth) {\n      this.oldText = this.iwMultilineEllipsis;\n      this.oldHeight = self.offsetHeight;\n      this.oldWidth = self.offsetWidth;\n      this.needsAdjust = true;\n    }\n    this.adjustInner();\n  }\n\n  /**\n   * @ignore\n   */\n  @HostListener('window:resize', [])\n  onResize() {\n    this.needsAdjust = true;\n    this.adjustInner();\n  }\n\n  /**\n   * @ignore\n   */\n  private adjustInner() {\n    if (!this.needsAdjust) {\n      return;\n    }\n    this.needsAdjust = false;\n    const self: HTMLElement = this.elementRef.nativeElement;\n    self.innerHTML = this.iwMultilineEllipsis || '';\n    const height = self.clientHeight;\n    const contentHeight = self.scrollHeight;\n    let overflow = height < contentHeight;\n    const ellipsis = document.createElement('span');\n    ellipsis.classList.add('ellipsis');\n    ellipsis.innerText = '…';\n    if (!overflow) {\n      this.emitTruncated(false);\n      return;\n    }\n    this.emitTruncated(true);\n    self.appendChild(ellipsis);\n    if (self.childNodes.length > 1) {\n      const child = self.childNodes.item(self.childNodes.length - 2);\n      if (this.removeLastByteAux(child)) {\n        self.removeChild(child);\n      }\n    }\n    while (overflow) {\n      if (this.removeLastByte(self)) {\n        break;\n      }\n      overflow = self.offsetHeight < self.scrollHeight;\n    }\n  }\n\n  private emitTruncated(truncated: boolean) {\n    this.taskRunner.addTaskForNextRound(() => {\n      this.truncated.emit(truncated);\n    });\n    this.__isOverflowing = truncated;\n  }\n\n  /**\n   * @ignore\n   */\n  private removeLastByte(element: HTMLElement): boolean {\n    if (element.childNodes.length > 1) {\n      const child = element.childNodes.item(element.childNodes.length - 2);\n      if (this.removeLastByteAux(child)) {\n        element.removeChild(child);\n      }\n    }\n    return element.childNodes.length === 1;\n  }\n\n  /**\n   * @ignore\n   */\n  private removeLastByteAux(element: Node): boolean {\n    // true to remove\n    if (element.nodeType === Node.TEXT_NODE) {\n      const split = element.textContent.split(' ');\n      split.pop();\n      element.textContent = split.join(' ');\n      return element.textContent === '';\n    }\n    if (element.nodeType === Node.ELEMENT_NODE) {\n      if (element.hasChildNodes()) {\n        const last = element.childNodes.item(element.childNodes.length - 1);\n        const result = this.removeLastByteAux(last);\n        if (result) {\n          element.removeChild(last);\n          return this.removeLastByteAux(element);\n        } else {\n          return false;\n        }\n      } else {\n        return true;\n      }\n    }\n    throw new Error('This node type is not handled');\n  }\n\n}\n",
            "selector": "[iwMultilineEllipsis]",
            "providers": [],
            "inputsClass": [
                {
                    "name": "iwMultilineEllipsis",
                    "description": "<p>The text to display.</p>\n",
                    "line": 20,
                    "type": "string"
                }
            ],
            "outputsClass": [
                {
                    "name": "truncated",
                    "defaultValue": "new EventEmitter<boolean>()",
                    "description": "<p>An event that is emitted that indicates whether the text is truncated.</p>\n",
                    "line": 24,
                    "type": "EventEmitter"
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "__isOverflowing",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "needsAdjust",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 34,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "oldHeight",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 36,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "oldText",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 35,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "oldWidth",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 37,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "emitTruncated",
                    "args": [
                        {
                            "name": "truncated",
                            "type": "boolean"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 112,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "truncated",
                            "type": "boolean",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "implements": [
                "AfterViewChecked",
                "OnInit"
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "elementRef",
                        "type": "ElementRef"
                    },
                    {
                        "name": "taskRunner",
                        "type": "TaskRunnerService"
                    }
                ],
                "line": 37,
                "jsdoctags": [
                    {
                        "name": "elementRef",
                        "type": "ElementRef",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "taskRunner",
                        "type": "TaskRunnerService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "isOverflowing": {
                    "name": "isOverflowing",
                    "getSignature": {
                        "name": "isOverflowing",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 29,
                        "description": "<p>A boolean that indicates if the text overflows.</p>\n"
                    }
                }
            }
        },
        {
            "name": "PopoverDirective",
            "id": "directive-PopoverDirective-72844d2f66ce132ce12207ec0a9e9bb3",
            "file": "src/app/ui/popover/popover.directive.ts",
            "type": "directive",
            "description": "<p>The popover component can be used to display extra piece of information or more user interface elements.\nThe popover consists in a <code>iw-popover-container</code> that is added directly to the body.\nIt automatically adds a scroll mask element and an arrow element.</p>\n<h2 id=\"positionning\">Positionning</h2>\n<p>By default and if possible, the popover is horizontally centered with its target&#39;s center.\nIf the popover goes out of bounds, its horizontal position is adjusted to stay in bounds.\nIt is possible to set this horizontal alignment behaviour by setting the <code>horizontalAlignment</code> input to <code>&#39;leftWithLeft&#39;</code>.</p>\n<p>By default, the popover puts itself on top of the target if the target is on the bottom-half of the screen,\non the bottom if the target is on the top-half of the screen.</p>\n<h2 id=\"scroll-mask-and-arrow-elements\">Scroll mask and arrow elements</h2>\n<p>The popover component automatically appends a scroll mask and an arrow elements to the body.\nYou can adjust their style to your convenience.</p>\n<ul>\n<li>The arrow is automatically positionned to point at the target element. This element has the class <code>.iw-popover-arrow-element</code>.</li>\n<li>The scroll mask <code>&lt;iw-popover-scroll-mask&gt;</code> is meant to prevent the user from scrolling\nand to intercept clicks oustide of the popover and to dismiss the popover.</li>\n</ul>\n<div><pre class=\"line-numbers\"><code class=\"language-ts\"> import { PopoverModule } from &#39;iwerk-angular-ui&#39;;</code></pre></div>",
            "sourceCode": "import {\n  Directive,\n  Input,\n  Output,\n  EventEmitter,\n  TemplateRef,\n  OnDestroy,\n  ViewContainerRef,\n  SimpleChanges,\n  OnChanges,\n  NgZone,\n  ChangeDetectorRef\n} from '@angular/core';\nimport {\n  PopoverService,\n  PopoverPosition,\n  IPopover\n} from './popover.service';\n\n\n/**\n * The popover component can be used to display extra piece of information or more user interface elements.\n * The popover consists in a `iw-popover-container` that is added directly to the body.\n * It automatically adds a scroll mask element and an arrow element.\n *\n * ## Positionning\n *\n * By default and if possible, the popover is horizontally centered with its target's center.\n * If the popover goes out of bounds, its horizontal position is adjusted to stay in bounds.\n * It is possible to set this horizontal alignment behaviour by setting the `horizontalAlignment` input to `'leftWithLeft'`.\n *\n * By default, the popover puts itself on top of the target if the target is on the bottom-half of the screen,\n * on the bottom if the target is on the top-half of the screen.\n *\n * ## Scroll mask and arrow elements\n * The popover component automatically appends a scroll mask and an arrow elements to the body.\n * You can adjust their style to your convenience.\n * - The arrow is automatically positionned to point at the target element. This element has the class `.iw-popover-arrow-element`.\n * - The scroll mask `<iw-popover-scroll-mask>` is meant to prevent the user from scrolling\n * and to intercept clicks oustide of the popover and to dismiss the popover.\n *\n ```ts\n import { PopoverModule } from 'iwerk-angular-ui';\n ```\n */\n@Directive({\n  selector: '[iwPopover]'\n})\nexport class PopoverDirective implements OnDestroy, OnChanges {\n  /**\n   * Specify a class for the popover container.\n   */\n  @Input() popoverClass: string;\n  /**\n   * Specify a class for the arrow.\n   */\n  @Input() arrowClass: string;\n  /**\n   * Specify the horizontal alignment strategy.\n   */\n  @Input() horizontalAlignment: 'leftWithLeft' | undefined;\n  /**\n   * Specify a class for the scroll mask.\n   */\n  @Input() scrollMaskClass: string;\n  /**\n   * User can press Escape to close. (default: false)\n   */\n  @Input() escToClose: boolean;\n  /**\n   * User can click outside to close the popover. (default: false)\n   */\n  @Input() clickOutsideToClose: boolean;\n  /**\n   * Open or close the popover. (default: false)\n   */\n  @Input() isOpen: boolean;\n  /**\n   * Horizontal or vertical positionning. (default: false)\n   */\n  @Input() horizontal: boolean;\n\n  /**\n   * Event triggered that gives you the opportunity to close the popover (e.g. `isOpen = false`)\n   */\n  @Output() shouldClose = new EventEmitter();\n  /**\n   * Event triggered when the popover position changes.\n   */\n  @Output() popoverPosition = new EventEmitter<PopoverPosition>();\n\n  private __popoverInstance: IPopover;\n\n  constructor(\n    private popoverService: PopoverService,\n    private templateRef: TemplateRef<any>,\n    private viewContainerRef: ViewContainerRef,\n    private zone: NgZone,\n    private changeDetectorRef: ChangeDetectorRef\n  ) { }\n\n  /**\n   * @ignore\n   */\n  ngOnDestroy() {\n    this.__close();\n  }\n\n  /**\n   * @ignore\n   */\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes['isOpen']) {\n      this.__update();\n    }\n  }\n\n  /**\n   * @ignore\n   */\n  private __update() {\n    if (this.__popoverInstance && !this.isOpen) {\n      this.__close();\n    } else if (this.isOpen && !this.__popoverInstance) {\n      this.__open();\n    }\n  }\n\n  /**\n   * @ignore\n   */\n  private __open() {\n    // get out of the zone to avoid triggering another zone run\n    this.zone.runOutsideAngular(() => {\n      // wait till the current stack is finished to avoid ExpressionChangedAfterItHasBeenCheckedError\n      setTimeout(() => {\n        // go back to the zone\n        this.zone.run(() => {\n          // create the popover\n          this.__popoverInstance = this.popoverService.openTemplateRef(\n            this.templateRef,\n            (<HTMLElement>this.viewContainerRef.element.nativeElement).parentElement, {\n              horizontal: this.__getHorizontal(),\n              arrowClass: this.arrowClass,\n              horizontalAlignment: this.horizontalAlignment,\n              popoverClass: this.popoverClass,\n              scrollMaskClass: this.scrollMaskClass,\n              shouldClose: () => {\n                this.shouldClose.emit();\n              },\n              popoverPosition: p => {\n                this.popoverPosition.emit(p);\n              },\n              escToClose: this.escToClose,\n              clickOutsideToClose: this.clickOutsideToClose\n            });\n          // run the change detection\n          this.changeDetectorRef.detectChanges();\n          this.changeDetectorRef.markForCheck();\n        });\n      }, 0);\n    });\n  }\n\n  /**\n   * @ignore\n   */\n  private __close() {\n    if (this.__popoverInstance) {\n      this.__popoverInstance.close();\n      this.__popoverInstance = undefined;\n    }\n  }\n\n  /**\n   * @ignore\n   */\n  private __getHorizontal(): boolean {\n    if (this.horizontal === undefined) {\n      return false;\n    }\n    return this.horizontal;\n  }\n\n}\n",
            "selector": "[iwPopover]",
            "providers": [],
            "inputsClass": [
                {
                    "name": "arrowClass",
                    "description": "<p>Specify a class for the arrow.</p>\n",
                    "line": 57,
                    "type": "string"
                },
                {
                    "name": "clickOutsideToClose",
                    "description": "<p>User can click outside to close the popover. (default: false)</p>\n",
                    "line": 73,
                    "type": "boolean"
                },
                {
                    "name": "escToClose",
                    "description": "<p>User can press Escape to close. (default: false)</p>\n",
                    "line": 69,
                    "type": "boolean"
                },
                {
                    "name": "horizontal",
                    "description": "<p>Horizontal or vertical positionning. (default: false)</p>\n",
                    "line": 81,
                    "type": "boolean"
                },
                {
                    "name": "horizontalAlignment",
                    "description": "<p>Specify the horizontal alignment strategy.</p>\n",
                    "line": 61,
                    "type": "\"leftWithLeft\" | undefined"
                },
                {
                    "name": "isOpen",
                    "description": "<p>Open or close the popover. (default: false)</p>\n",
                    "line": 77,
                    "type": "boolean"
                },
                {
                    "name": "popoverClass",
                    "description": "<p>Specify a class for the popover container.</p>\n",
                    "line": 53,
                    "type": "string"
                },
                {
                    "name": "scrollMaskClass",
                    "description": "<p>Specify a class for the scroll mask.</p>\n",
                    "line": 65,
                    "type": "string"
                }
            ],
            "outputsClass": [
                {
                    "name": "popoverPosition",
                    "defaultValue": "new EventEmitter<PopoverPosition>()",
                    "description": "<p>Event triggered when the popover position changes.</p>\n",
                    "line": 90,
                    "type": "EventEmitter"
                },
                {
                    "name": "shouldClose",
                    "defaultValue": "new EventEmitter()",
                    "description": "<p>Event triggered that gives you the opportunity to close the popover (e.g. <code>isOpen = false</code>)</p>\n",
                    "line": 86,
                    "type": "EventEmitter"
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "__popoverInstance",
                    "type": "IPopover",
                    "optional": false,
                    "description": "",
                    "line": 92,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "methodsClass": [],
            "implements": [
                "OnDestroy",
                "OnChanges"
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "popoverService",
                        "type": "PopoverService"
                    },
                    {
                        "name": "templateRef",
                        "type": "TemplateRef<any>"
                    },
                    {
                        "name": "viewContainerRef",
                        "type": "ViewContainerRef"
                    },
                    {
                        "name": "zone",
                        "type": "NgZone"
                    },
                    {
                        "name": "changeDetectorRef",
                        "type": "ChangeDetectorRef"
                    }
                ],
                "line": 92,
                "jsdoctags": [
                    {
                        "name": "popoverService",
                        "type": "PopoverService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "templateRef",
                        "type": "TemplateRef<any>",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "viewContainerRef",
                        "type": "ViewContainerRef",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "zone",
                        "type": "NgZone",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "changeDetectorRef",
                        "type": "ChangeDetectorRef",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "SbDoingDirective",
            "id": "directive-SbDoingDirective-293f72cd5e7f064f865755e6ef1f7b5b",
            "file": "src/app/ui/state-button/state-button.directive.ts",
            "type": "directive",
            "description": "",
            "sourceCode": "import { Directive, HostBinding, Input, TemplateRef, ViewContainerRef } from '@angular/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { ButtonState } from './button-state';\nimport { IStateButtonDirective } from './state-button-directive.interface';\nimport { StateTemplate } from './state-template.class';\n\n@Directive({\n  selector: '[iwStateButton]'\n})\nexport class StateButtonDirective implements IStateButtonDirective {\n  private __state = new BehaviorSubject<ButtonState>(undefined);\n\n  get state(): Observable<ButtonState> {\n    return this.__state.asObservable();\n  }\n\n  @Input() set iwStateButton(v: ButtonState) {\n    this.__state.next(v);\n  }\n\n  @HostBinding('class.iw-state-button')\n  withClass = true;\n\n  @HostBinding('class.sb--idle')\n  get isIdle() {\n    return this.__state.value === 'IDLE';\n  }\n\n  @HostBinding('class.sb--doing')\n  get isDoing() {\n    return this.__state.value === 'DOING';\n  }\n\n  @HostBinding('class.sb--success')\n  get isSuccess() {\n    return this.__state.value === 'SUCCESS';\n  }\n\n  @HostBinding('class.sb--failure')\n  get isFailure() {\n    return this.__state.value === 'FAILURE';\n  }\n\n}\n\n@Directive({\n  selector: '[sbIdle]'\n})\nexport class SbIdleDirective extends StateTemplate {\n\n  constructor(\n    protected viewContainerRef: ViewContainerRef,\n    protected templateRef: TemplateRef<any>,\n    protected stateButtonDirective: StateButtonDirective\n  ) {\n    super(\n      'IDLE',\n      viewContainerRef,\n      templateRef,\n      stateButtonDirective\n    );\n  }\n}\n\n@Directive({\n  selector: '[sbSuccess]'\n})\nexport class SbSuccessDirective extends StateTemplate {\n\n  constructor(\n    protected viewContainerRef: ViewContainerRef,\n    protected templateRef: TemplateRef<any>,\n    protected stateButtonDirective: StateButtonDirective\n  ) {\n    super(\n      'SUCCESS',\n      viewContainerRef,\n      templateRef,\n      stateButtonDirective\n    );\n  }\n}\n\n@Directive({\n  selector: '[sbDoing]'\n})\nexport class SbDoingDirective extends StateTemplate {\n\n  constructor(\n    protected viewContainerRef: ViewContainerRef,\n    protected templateRef: TemplateRef<any>,\n    protected stateButtonDirective: StateButtonDirective\n  ) {\n    super(\n      'DOING',\n      viewContainerRef,\n      templateRef,\n      stateButtonDirective\n    );\n  }\n}\n\n@Directive({\n  selector: '[sbFailure]'\n})\nexport class SbFailureDirective extends StateTemplate {\n\n  constructor(\n    protected viewContainerRef: ViewContainerRef,\n    protected templateRef: TemplateRef<any>,\n    protected stateButtonDirective: StateButtonDirective\n  ) {\n    super(\n      'FAILURE',\n      viewContainerRef,\n      templateRef,\n      stateButtonDirective\n    );\n  }\n}\n",
            "selector": "[sbDoing]",
            "providers": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [],
            "methodsClass": [],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "viewContainerRef",
                        "type": "ViewContainerRef"
                    },
                    {
                        "name": "templateRef",
                        "type": "TemplateRef<any>"
                    },
                    {
                        "name": "stateButtonDirective",
                        "type": "StateButtonDirective"
                    }
                ],
                "line": 87,
                "jsdoctags": [
                    {
                        "name": "viewContainerRef",
                        "type": "ViewContainerRef",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "templateRef",
                        "type": "TemplateRef<any>",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "stateButtonDirective",
                        "type": "StateButtonDirective",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "SbFailureDirective",
            "id": "directive-SbFailureDirective-293f72cd5e7f064f865755e6ef1f7b5b",
            "file": "src/app/ui/state-button/state-button.directive.ts",
            "type": "directive",
            "description": "",
            "sourceCode": "import { Directive, HostBinding, Input, TemplateRef, ViewContainerRef } from '@angular/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { ButtonState } from './button-state';\nimport { IStateButtonDirective } from './state-button-directive.interface';\nimport { StateTemplate } from './state-template.class';\n\n@Directive({\n  selector: '[iwStateButton]'\n})\nexport class StateButtonDirective implements IStateButtonDirective {\n  private __state = new BehaviorSubject<ButtonState>(undefined);\n\n  get state(): Observable<ButtonState> {\n    return this.__state.asObservable();\n  }\n\n  @Input() set iwStateButton(v: ButtonState) {\n    this.__state.next(v);\n  }\n\n  @HostBinding('class.iw-state-button')\n  withClass = true;\n\n  @HostBinding('class.sb--idle')\n  get isIdle() {\n    return this.__state.value === 'IDLE';\n  }\n\n  @HostBinding('class.sb--doing')\n  get isDoing() {\n    return this.__state.value === 'DOING';\n  }\n\n  @HostBinding('class.sb--success')\n  get isSuccess() {\n    return this.__state.value === 'SUCCESS';\n  }\n\n  @HostBinding('class.sb--failure')\n  get isFailure() {\n    return this.__state.value === 'FAILURE';\n  }\n\n}\n\n@Directive({\n  selector: '[sbIdle]'\n})\nexport class SbIdleDirective extends StateTemplate {\n\n  constructor(\n    protected viewContainerRef: ViewContainerRef,\n    protected templateRef: TemplateRef<any>,\n    protected stateButtonDirective: StateButtonDirective\n  ) {\n    super(\n      'IDLE',\n      viewContainerRef,\n      templateRef,\n      stateButtonDirective\n    );\n  }\n}\n\n@Directive({\n  selector: '[sbSuccess]'\n})\nexport class SbSuccessDirective extends StateTemplate {\n\n  constructor(\n    protected viewContainerRef: ViewContainerRef,\n    protected templateRef: TemplateRef<any>,\n    protected stateButtonDirective: StateButtonDirective\n  ) {\n    super(\n      'SUCCESS',\n      viewContainerRef,\n      templateRef,\n      stateButtonDirective\n    );\n  }\n}\n\n@Directive({\n  selector: '[sbDoing]'\n})\nexport class SbDoingDirective extends StateTemplate {\n\n  constructor(\n    protected viewContainerRef: ViewContainerRef,\n    protected templateRef: TemplateRef<any>,\n    protected stateButtonDirective: StateButtonDirective\n  ) {\n    super(\n      'DOING',\n      viewContainerRef,\n      templateRef,\n      stateButtonDirective\n    );\n  }\n}\n\n@Directive({\n  selector: '[sbFailure]'\n})\nexport class SbFailureDirective extends StateTemplate {\n\n  constructor(\n    protected viewContainerRef: ViewContainerRef,\n    protected templateRef: TemplateRef<any>,\n    protected stateButtonDirective: StateButtonDirective\n  ) {\n    super(\n      'FAILURE',\n      viewContainerRef,\n      templateRef,\n      stateButtonDirective\n    );\n  }\n}\n",
            "selector": "[sbFailure]",
            "providers": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [],
            "methodsClass": [],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "viewContainerRef",
                        "type": "ViewContainerRef"
                    },
                    {
                        "name": "templateRef",
                        "type": "TemplateRef<any>"
                    },
                    {
                        "name": "stateButtonDirective",
                        "type": "StateButtonDirective"
                    }
                ],
                "line": 106,
                "jsdoctags": [
                    {
                        "name": "viewContainerRef",
                        "type": "ViewContainerRef",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "templateRef",
                        "type": "TemplateRef<any>",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "stateButtonDirective",
                        "type": "StateButtonDirective",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "SbIdleDirective",
            "id": "directive-SbIdleDirective-293f72cd5e7f064f865755e6ef1f7b5b",
            "file": "src/app/ui/state-button/state-button.directive.ts",
            "type": "directive",
            "description": "",
            "sourceCode": "import { Directive, HostBinding, Input, TemplateRef, ViewContainerRef } from '@angular/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { ButtonState } from './button-state';\nimport { IStateButtonDirective } from './state-button-directive.interface';\nimport { StateTemplate } from './state-template.class';\n\n@Directive({\n  selector: '[iwStateButton]'\n})\nexport class StateButtonDirective implements IStateButtonDirective {\n  private __state = new BehaviorSubject<ButtonState>(undefined);\n\n  get state(): Observable<ButtonState> {\n    return this.__state.asObservable();\n  }\n\n  @Input() set iwStateButton(v: ButtonState) {\n    this.__state.next(v);\n  }\n\n  @HostBinding('class.iw-state-button')\n  withClass = true;\n\n  @HostBinding('class.sb--idle')\n  get isIdle() {\n    return this.__state.value === 'IDLE';\n  }\n\n  @HostBinding('class.sb--doing')\n  get isDoing() {\n    return this.__state.value === 'DOING';\n  }\n\n  @HostBinding('class.sb--success')\n  get isSuccess() {\n    return this.__state.value === 'SUCCESS';\n  }\n\n  @HostBinding('class.sb--failure')\n  get isFailure() {\n    return this.__state.value === 'FAILURE';\n  }\n\n}\n\n@Directive({\n  selector: '[sbIdle]'\n})\nexport class SbIdleDirective extends StateTemplate {\n\n  constructor(\n    protected viewContainerRef: ViewContainerRef,\n    protected templateRef: TemplateRef<any>,\n    protected stateButtonDirective: StateButtonDirective\n  ) {\n    super(\n      'IDLE',\n      viewContainerRef,\n      templateRef,\n      stateButtonDirective\n    );\n  }\n}\n\n@Directive({\n  selector: '[sbSuccess]'\n})\nexport class SbSuccessDirective extends StateTemplate {\n\n  constructor(\n    protected viewContainerRef: ViewContainerRef,\n    protected templateRef: TemplateRef<any>,\n    protected stateButtonDirective: StateButtonDirective\n  ) {\n    super(\n      'SUCCESS',\n      viewContainerRef,\n      templateRef,\n      stateButtonDirective\n    );\n  }\n}\n\n@Directive({\n  selector: '[sbDoing]'\n})\nexport class SbDoingDirective extends StateTemplate {\n\n  constructor(\n    protected viewContainerRef: ViewContainerRef,\n    protected templateRef: TemplateRef<any>,\n    protected stateButtonDirective: StateButtonDirective\n  ) {\n    super(\n      'DOING',\n      viewContainerRef,\n      templateRef,\n      stateButtonDirective\n    );\n  }\n}\n\n@Directive({\n  selector: '[sbFailure]'\n})\nexport class SbFailureDirective extends StateTemplate {\n\n  constructor(\n    protected viewContainerRef: ViewContainerRef,\n    protected templateRef: TemplateRef<any>,\n    protected stateButtonDirective: StateButtonDirective\n  ) {\n    super(\n      'FAILURE',\n      viewContainerRef,\n      templateRef,\n      stateButtonDirective\n    );\n  }\n}\n",
            "selector": "[sbIdle]",
            "providers": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [],
            "methodsClass": [],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "viewContainerRef",
                        "type": "ViewContainerRef"
                    },
                    {
                        "name": "templateRef",
                        "type": "TemplateRef<any>"
                    },
                    {
                        "name": "stateButtonDirective",
                        "type": "StateButtonDirective"
                    }
                ],
                "line": 49,
                "jsdoctags": [
                    {
                        "name": "viewContainerRef",
                        "type": "ViewContainerRef",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "templateRef",
                        "type": "TemplateRef<any>",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "stateButtonDirective",
                        "type": "StateButtonDirective",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "SbSuccessDirective",
            "id": "directive-SbSuccessDirective-293f72cd5e7f064f865755e6ef1f7b5b",
            "file": "src/app/ui/state-button/state-button.directive.ts",
            "type": "directive",
            "description": "",
            "sourceCode": "import { Directive, HostBinding, Input, TemplateRef, ViewContainerRef } from '@angular/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { ButtonState } from './button-state';\nimport { IStateButtonDirective } from './state-button-directive.interface';\nimport { StateTemplate } from './state-template.class';\n\n@Directive({\n  selector: '[iwStateButton]'\n})\nexport class StateButtonDirective implements IStateButtonDirective {\n  private __state = new BehaviorSubject<ButtonState>(undefined);\n\n  get state(): Observable<ButtonState> {\n    return this.__state.asObservable();\n  }\n\n  @Input() set iwStateButton(v: ButtonState) {\n    this.__state.next(v);\n  }\n\n  @HostBinding('class.iw-state-button')\n  withClass = true;\n\n  @HostBinding('class.sb--idle')\n  get isIdle() {\n    return this.__state.value === 'IDLE';\n  }\n\n  @HostBinding('class.sb--doing')\n  get isDoing() {\n    return this.__state.value === 'DOING';\n  }\n\n  @HostBinding('class.sb--success')\n  get isSuccess() {\n    return this.__state.value === 'SUCCESS';\n  }\n\n  @HostBinding('class.sb--failure')\n  get isFailure() {\n    return this.__state.value === 'FAILURE';\n  }\n\n}\n\n@Directive({\n  selector: '[sbIdle]'\n})\nexport class SbIdleDirective extends StateTemplate {\n\n  constructor(\n    protected viewContainerRef: ViewContainerRef,\n    protected templateRef: TemplateRef<any>,\n    protected stateButtonDirective: StateButtonDirective\n  ) {\n    super(\n      'IDLE',\n      viewContainerRef,\n      templateRef,\n      stateButtonDirective\n    );\n  }\n}\n\n@Directive({\n  selector: '[sbSuccess]'\n})\nexport class SbSuccessDirective extends StateTemplate {\n\n  constructor(\n    protected viewContainerRef: ViewContainerRef,\n    protected templateRef: TemplateRef<any>,\n    protected stateButtonDirective: StateButtonDirective\n  ) {\n    super(\n      'SUCCESS',\n      viewContainerRef,\n      templateRef,\n      stateButtonDirective\n    );\n  }\n}\n\n@Directive({\n  selector: '[sbDoing]'\n})\nexport class SbDoingDirective extends StateTemplate {\n\n  constructor(\n    protected viewContainerRef: ViewContainerRef,\n    protected templateRef: TemplateRef<any>,\n    protected stateButtonDirective: StateButtonDirective\n  ) {\n    super(\n      'DOING',\n      viewContainerRef,\n      templateRef,\n      stateButtonDirective\n    );\n  }\n}\n\n@Directive({\n  selector: '[sbFailure]'\n})\nexport class SbFailureDirective extends StateTemplate {\n\n  constructor(\n    protected viewContainerRef: ViewContainerRef,\n    protected templateRef: TemplateRef<any>,\n    protected stateButtonDirective: StateButtonDirective\n  ) {\n    super(\n      'FAILURE',\n      viewContainerRef,\n      templateRef,\n      stateButtonDirective\n    );\n  }\n}\n",
            "selector": "[sbSuccess]",
            "providers": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [],
            "methodsClass": [],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "viewContainerRef",
                        "type": "ViewContainerRef"
                    },
                    {
                        "name": "templateRef",
                        "type": "TemplateRef<any>"
                    },
                    {
                        "name": "stateButtonDirective",
                        "type": "StateButtonDirective"
                    }
                ],
                "line": 68,
                "jsdoctags": [
                    {
                        "name": "viewContainerRef",
                        "type": "ViewContainerRef",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "templateRef",
                        "type": "TemplateRef<any>",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "stateButtonDirective",
                        "type": "StateButtonDirective",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "StateButtonDirective",
            "id": "directive-StateButtonDirective-293f72cd5e7f064f865755e6ef1f7b5b",
            "file": "src/app/ui/state-button/state-button.directive.ts",
            "type": "directive",
            "description": "",
            "sourceCode": "import { Directive, HostBinding, Input, TemplateRef, ViewContainerRef } from '@angular/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { ButtonState } from './button-state';\nimport { IStateButtonDirective } from './state-button-directive.interface';\nimport { StateTemplate } from './state-template.class';\n\n@Directive({\n  selector: '[iwStateButton]'\n})\nexport class StateButtonDirective implements IStateButtonDirective {\n  private __state = new BehaviorSubject<ButtonState>(undefined);\n\n  get state(): Observable<ButtonState> {\n    return this.__state.asObservable();\n  }\n\n  @Input() set iwStateButton(v: ButtonState) {\n    this.__state.next(v);\n  }\n\n  @HostBinding('class.iw-state-button')\n  withClass = true;\n\n  @HostBinding('class.sb--idle')\n  get isIdle() {\n    return this.__state.value === 'IDLE';\n  }\n\n  @HostBinding('class.sb--doing')\n  get isDoing() {\n    return this.__state.value === 'DOING';\n  }\n\n  @HostBinding('class.sb--success')\n  get isSuccess() {\n    return this.__state.value === 'SUCCESS';\n  }\n\n  @HostBinding('class.sb--failure')\n  get isFailure() {\n    return this.__state.value === 'FAILURE';\n  }\n\n}\n\n@Directive({\n  selector: '[sbIdle]'\n})\nexport class SbIdleDirective extends StateTemplate {\n\n  constructor(\n    protected viewContainerRef: ViewContainerRef,\n    protected templateRef: TemplateRef<any>,\n    protected stateButtonDirective: StateButtonDirective\n  ) {\n    super(\n      'IDLE',\n      viewContainerRef,\n      templateRef,\n      stateButtonDirective\n    );\n  }\n}\n\n@Directive({\n  selector: '[sbSuccess]'\n})\nexport class SbSuccessDirective extends StateTemplate {\n\n  constructor(\n    protected viewContainerRef: ViewContainerRef,\n    protected templateRef: TemplateRef<any>,\n    protected stateButtonDirective: StateButtonDirective\n  ) {\n    super(\n      'SUCCESS',\n      viewContainerRef,\n      templateRef,\n      stateButtonDirective\n    );\n  }\n}\n\n@Directive({\n  selector: '[sbDoing]'\n})\nexport class SbDoingDirective extends StateTemplate {\n\n  constructor(\n    protected viewContainerRef: ViewContainerRef,\n    protected templateRef: TemplateRef<any>,\n    protected stateButtonDirective: StateButtonDirective\n  ) {\n    super(\n      'DOING',\n      viewContainerRef,\n      templateRef,\n      stateButtonDirective\n    );\n  }\n}\n\n@Directive({\n  selector: '[sbFailure]'\n})\nexport class SbFailureDirective extends StateTemplate {\n\n  constructor(\n    protected viewContainerRef: ViewContainerRef,\n    protected templateRef: TemplateRef<any>,\n    protected stateButtonDirective: StateButtonDirective\n  ) {\n    super(\n      'FAILURE',\n      viewContainerRef,\n      templateRef,\n      stateButtonDirective\n    );\n  }\n}\n",
            "selector": "[iwStateButton]",
            "providers": [],
            "inputsClass": [
                {
                    "name": "iwStateButton",
                    "line": 17,
                    "type": ""
                }
            ],
            "outputsClass": [],
            "hostBindings": [
                {
                    "name": "class.iw-state-button",
                    "defaultValue": "true",
                    "line": 22
                },
                {
                    "name": "class.sb--doing",
                    "line": 30
                },
                {
                    "name": "class.sb--failure",
                    "line": 40
                },
                {
                    "name": "class.sb--idle",
                    "line": 25
                },
                {
                    "name": "class.sb--success",
                    "line": 35
                }
            ],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "__state",
                    "defaultValue": "new BehaviorSubject<ButtonState>(undefined)",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "methodsClass": [],
            "implements": [
                "IStateButtonDirective"
            ],
            "accessors": {
                "state": {
                    "name": "state",
                    "getSignature": {
                        "name": "state",
                        "type": "",
                        "returnType": "Observable<ButtonState>",
                        "line": 13
                    }
                },
                "iwStateButton": {
                    "name": "iwStateButton",
                    "setSignature": {
                        "name": "iwStateButton",
                        "type": "void",
                        "args": [
                            {
                                "name": "v",
                                "type": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 17,
                        "jsdoctags": [
                            {
                                "name": "v",
                                "type": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                }
            }
        },
        {
            "name": "TooltipDirective",
            "id": "directive-TooltipDirective-e4a235c0721498316e0d34646826f1fc",
            "file": "src/app/ui/tooltip/tooltip.directive.ts",
            "type": "directive",
            "description": "<p>The tooltip component can be used to display an extra piece of information to an element of an user interface.\nThis piece appears when the mouse is over this element.\nAdd a template that adds the <code>iwTooltip</code> directive inside the element where you want the tooltip to appear.</p>\n<h2 id=\"positionning\">Positionning</h2>\n<p>The tooltip is smartly positionned. It will be on top of the target if the target is on the bottom half of the screen.\nIt will be at the bottom of the target if the target is on the top half of the screen.</p>\n<div><pre class=\"line-numbers\"><code class=\"language-ts\"> import { TooltipModule } from &#39;iwerk-angular-ui&#39;;</code></pre></div>",
            "sourceCode": "import {\n  Directive,\n  TemplateRef,\n  Injector,\n  ApplicationRef,\n  EmbeddedViewRef,\n  ComponentFactoryResolver,\n  ComponentRef,\n  AfterViewInit,\n  OnDestroy,\n  ViewContainerRef,\n  Input,\n  Optional\n} from '@angular/core';\nimport {\n  TooltipContainerComponent\n} from './tooltip-container/tooltip-container.component';\nimport { isPlatformBrowser } from '@angular/common';\nimport { Inject, PLATFORM_ID } from '@angular/core';\nimport { smartPosition } from './helpers';\nimport { IW_TOOLTIP_CONFIG } from './tooltip.config';\nimport { TooltipConfig } from './tooltip-config.interface';\n\n/**\n * The tooltip component can be used to display an extra piece of information to an element of an user interface.\n * This piece appears when the mouse is over this element.\n * Add a template that adds the `iwTooltip` directive inside the element where you want the tooltip to appear.\n *\n * ## Positionning\n * The tooltip is smartly positionned. It will be on top of the target if the target is on the bottom half of the screen.\n * It will be at the bottom of the target if the target is on the top half of the screen.\n ```ts\n import { TooltipModule } from 'iwerk-angular-ui';\n ```\n */\n@Directive({\n  selector: '[iwTooltip]'\n})\nexport class TooltipDirective implements AfterViewInit, OnDestroy, EventListenerObject {\n  /**\n   * A class for the tooltip container.\n   */\n  @Input() containerClass: string;\n  /**\n   * Whether the tooltip should be positionned horizontally. (default: `false`)\n   */\n  @Input() horizontal: boolean;\n  /**\n   * A delay before the tooltip appears. (default: `0`)\n   */\n  @Input() delay: number;\n\n  private __timerId: any;\n  private __parent: HTMLElement;\n  private __elements: {\n    content: EmbeddedViewRef<any>,\n    container: ComponentRef<TooltipContainerComponent>\n  } |  undefined;\n\n  constructor(\n    private injector: Injector,\n    private appRef: ApplicationRef,\n    private componentFactoryResolver: ComponentFactoryResolver,\n    private templateRef: TemplateRef<any>,\n    private viewContainerRef: ViewContainerRef,\n    @Inject(PLATFORM_ID) private platformId: string,\n    @Optional() @Inject(IW_TOOLTIP_CONFIG) private tooltipConfig: TooltipConfig\n  ) { }\n\n  /**\n   * @ignore\n   */\n  ngAfterViewInit() {\n    if (isPlatformBrowser(this.platformId)) {\n      this.__parent = (<HTMLElement>this.viewContainerRef.element.nativeElement).parentElement;\n      this.__parent.addEventListener('mouseenter', this);\n      this.__parent.addEventListener('mouseleave', this);\n    }\n  }\n\n  /**\n   * @ignore\n   */\n  ngOnDestroy() {\n    if (isPlatformBrowser(this.platformId)) {\n      clearTimeout(this.__timerId);\n      this.__remove();\n      this.__parent.removeEventListener('mouseenter', this);\n      this.__parent.removeEventListener('mouseleave', this);\n    }\n  }\n\n  /**\n   * @ignore\n   */\n  handleEvent(evt: Event): void {\n    const scrollHandler = () => {\n      document.removeEventListener('scroll', scrollHandler, true);\n      this.__remove();\n    };\n    if (evt.type === 'mouseenter') {\n      this.__timerId = setTimeout(() => {\n        document.addEventListener('scroll', scrollHandler, true);\n        return this.__onMouseEnter(<MouseEvent>evt);\n      }, this.__delay);\n\n    }\n    if (evt.type === 'mouseleave') {\n      clearTimeout(this.__timerId);\n      document.removeEventListener('scroll', scrollHandler, true);\n      return this.__onMouseLeave(<MouseEvent>evt);\n    }\n  }\n\n  /**\n   * @ignore\n   */\n  private __onMouseEnter(event: MouseEvent) {\n    if (!this.__elements) {\n      const content = this.templateRef.createEmbeddedView(this.injector);\n      const container = this.componentFactoryResolver\n        .resolveComponentFactory(TooltipContainerComponent)\n        .create(this.injector, [content.rootNodes]);\n      container.instance.containerClass = this.containerClass;\n\n      this.__elements = {\n        content,\n        container\n      };\n\n      this.appRef.attachView(content);\n      this.appRef.attachView(container.hostView);\n\n      content.detectChanges();\n      container.hostView.detectChanges();\n\n      smartPosition({\n        target: this.__parent,\n        container: this.__elements.container.location.nativeElement\n      }, this.__isHorizontal ? 'horizontal' : 'vertical');\n    }\n\n  }\n\n  /**\n   * @ignore\n   */\n  private get __isHorizontal(): boolean {\n    if (this.horizontal === undefined) {\n      return !!(this.tooltipConfig ? this.tooltipConfig.horizontal : false);\n    }\n    return this.horizontal;\n  }\n\n  /**\n   * @ignore\n   */\n  private get __delay(): number {\n    if (this.delay === undefined) {\n      return this.tooltipConfig ? this.tooltipConfig.delay : 0;\n    }\n    return this.delay;\n  }\n\n  /**\n   * @ignore\n   */\n  private __onMouseLeave(event: MouseEvent) {\n    this.__remove();\n  }\n\n  /**\n   * @ignore\n   */\n  private __remove() {\n    if (!this.__elements) {\n      return;\n    }\n\n    document.body.removeChild(this.__elements.container.location.nativeElement);\n\n    this.appRef.detachView(this.__elements.content);\n    this.appRef.detachView(this.__elements.container.hostView);\n    this.__elements.container.hostView.detach();\n\n    this.__elements.content.destroy();\n    this.__elements.container.destroy();\n\n    this.__elements = undefined;\n  }\n\n}\n",
            "selector": "[iwTooltip]",
            "providers": [],
            "inputsClass": [
                {
                    "name": "containerClass",
                    "description": "<p>A class for the tooltip container.</p>\n",
                    "line": 43,
                    "type": "string"
                },
                {
                    "name": "delay",
                    "description": "<p>A delay before the tooltip appears. (default: <code>0</code>)</p>\n",
                    "line": 51,
                    "type": "number"
                },
                {
                    "name": "horizontal",
                    "description": "<p>Whether the tooltip should be positionned horizontally. (default: <code>false</code>)</p>\n",
                    "line": 47,
                    "type": "boolean"
                }
            ],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "__elements",
                    "type": "literal type | undefined",
                    "optional": false,
                    "description": "",
                    "line": 55,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "__parent",
                    "type": "HTMLElement",
                    "optional": false,
                    "description": "",
                    "line": 54,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "__timerId",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 53,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "methodsClass": [],
            "implements": [
                "AfterViewInit",
                "OnDestroy",
                "EventListenerObject"
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "injector",
                        "type": "Injector"
                    },
                    {
                        "name": "appRef",
                        "type": "ApplicationRef"
                    },
                    {
                        "name": "componentFactoryResolver",
                        "type": "ComponentFactoryResolver"
                    },
                    {
                        "name": "templateRef",
                        "type": "TemplateRef<any>"
                    },
                    {
                        "name": "viewContainerRef",
                        "type": "ViewContainerRef"
                    },
                    {
                        "name": "platformId",
                        "type": "string"
                    },
                    {
                        "name": "tooltipConfig",
                        "type": "TooltipConfig"
                    }
                ],
                "line": 58,
                "jsdoctags": [
                    {
                        "name": "injector",
                        "type": "Injector",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "appRef",
                        "type": "ApplicationRef",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "componentFactoryResolver",
                        "type": "ComponentFactoryResolver",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "templateRef",
                        "type": "TemplateRef<any>",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "viewContainerRef",
                        "type": "ViewContainerRef",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "platformId",
                        "type": "string",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "tooltipConfig",
                        "type": "TooltipConfig",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "TreeItemDirective",
            "id": "directive-TreeItemDirective-a587e83a8b2903380b120d3da5d23847",
            "file": "src/app/ui/tree/tree/tree.component.ts",
            "type": "directive",
            "description": "",
            "sourceCode": "import { Component, Input, Directive, HostListener, ElementRef, OnInit, OnDestroy, Output, EventEmitter, TemplateRef } from '@angular/core';\nimport { Subject, Subscription } from 'rxjs';\nimport { filter } from 'rxjs/operators';\n\nexport interface TreeItem {\n  data: any;\n  children?: TreeItem[];\n}\n\n/**\n * This component renders a tree of DOM elements based on the provided `tree` input.\n * It does nothing else than rendering. You have to provide a template for the node.\n ```ts\n import { TreeModule } from 'iwerk-angular-ui';\n ```\n */\n@Component({\n  selector: 'iw-tree',\n  templateUrl: './tree.component.html',\n  styleUrls: ['./tree.component.sass']\n})\nexport class TreeComponent {\n  /**\n   * The tree input to render. Use the `TreeItem` type definition.\n   */\n  @Input() set tree(v: TreeItem[]) {\n    this.__tree = v;\n    this.updateParentMap();\n  }\n  get tree(): TreeItem[] {\n    return this.__tree;\n  }\n\n  /**\n   * The expanded nodes: their children will be displayed.\n   */\n  @Input() expanded: TreeItem[] = [];\n  nodeTemplate: TemplateRef<any>;\n\n  /**\n   * Event that is emitted when the set of expanded nodes changes.\n   */\n  @Output() expand = new EventEmitter<TreeItem[]>();\n\n  focusEvent = new Subject<TreeItem>();\n  parentMap = new Map<TreeItem, TreeItem>();\n\n  private __tree: TreeItem[] = [];\n\n  /**\n   * Return `true` if the item has children, `false` otherwise.\n   * @param item the item\n   */\n  hasChildren(item: TreeItem): boolean {\n    return item.children && item.children.length > 0;\n  }\n\n  /**\n   * Return `true` if the item is expanded, `false` otherwise.\n   * @param item the item\n   */\n  isExpanded(item: TreeItem): boolean {\n    return this.expanded.indexOf(item) > -1;\n  }\n\n  /**\n   * Toggle the expanded state of the item.\n   * @param item the item\n   */\n  toggleExpand(item: TreeItem) {\n    if (!this.hasChildren(item)) {\n      return;\n    }\n    if (this.isExpanded(item)) {\n      this.collapseItem(item);\n    } else {\n      this.expandItem(item);\n    }\n  }\n\n  /**\n   * Expand the item: display its children.\n   * @param item the item\n   */\n  expandItem(item: TreeItem) {\n    if (!this.hasChildren(item)) {\n      return;\n    }\n    this.setExpanded(this.expanded.concat([item]));\n  }\n\n  /**\n   * Collapse the item: hide its children.\n   * @param item the item\n   */\n  collapseItem(item: TreeItem) {\n    this.setExpanded(this.expanded.filter(e => e !== item));\n  }\n\n  /**\n   * @ignore\n   */\n  sendFocusEvent(item: TreeItem) {\n    this.focusEvent.next(item);\n  }\n\n  /**\n   * @ignore\n   */\n  private setExpanded(v: TreeItem[]) {\n    this.expanded = v;\n    this.expand.emit(v);\n  }\n\n  /**\n   * @ignore\n   */\n  private updateParentMap() {\n    this.parentMap = new Map();\n    const aux = (parent: TreeItem, nodes: TreeItem[]) => {\n      nodes.forEach(n => {\n        this.parentMap.set(n, parent);\n        aux(n, n.children || []);\n      });\n    };\n    aux(undefined, this.__tree);\n  }\n}\n\n@Directive({\n  selector: '[iwTreeNodeTemplate]'\n})\nexport class TreeNodeTemplateDirective {\n  constructor(public templateRef: TemplateRef<any>, private menu: TreeComponent) {\n    this.menu.nodeTemplate = this.templateRef;\n  }\n}\n\n@Directive({\n  selector: '[iwTreeItem]'\n})\nexport class TreeItemDirective implements OnInit, OnDestroy {\n  @Input('iwTreeItem') item: TreeItem;\n\n  private subscription = new Subscription;\n\n  constructor(\n    private menu: TreeComponent,\n    private elementRef: ElementRef\n  ) {\n  }\n\n  ngOnInit() {\n    this.subscription.add(this.menu.focusEvent\n      .pipe(filter(e => e === this.item))\n      .subscribe(e => {\n        this.elementRef.nativeElement.focus();\n      }));\n  }\n\n  ngOnDestroy() {\n    this.subscription.unsubscribe();\n  }\n\n  @HostListener('keydown', ['$event'])\n  keydown($event: KeyboardEvent) {\n    switch ($event.keyCode) {\n      case 39:\n        this.goRight($event); break;\n      case 40:\n        this.goDown($event); break;\n      case 38:\n        this.goUp($event); break;\n      case 37:\n        this.goLeft($event); break;\n    }\n  }\n\n  private goLeft($event: KeyboardEvent) {\n    $event.preventDefault();\n    if (this.menu.isExpanded(this.item)) {\n      return this.menu.collapseItem(this.item);\n    }\n    const parent = this.menu.parentMap.get(this.item);\n    if (parent) {\n      this.menu.sendFocusEvent(parent);\n    } else {\n      this.goUp($event);\n    }\n  }\n\n  private goRight($event: KeyboardEvent) {\n    $event.preventDefault();\n    if (!this.menu.hasChildren(this.item)) {\n      return this.goDown($event);\n    }\n    if (!this.menu.isExpanded(this.item)) {\n      return this.menu.expandItem(this.item);\n    }\n    this.menu.sendFocusEvent(this.item.children[0]);\n  }\n\n  private goDown($event: KeyboardEvent) {\n    $event.preventDefault();\n    if (\n      this.menu.hasChildren(this.item) &&\n      this.menu.isExpanded(this.item)\n    ) {\n      return this.menu.sendFocusEvent(this.item.children[0]);\n    }\n    const selectAfter = (item: TreeItem) => {\n      const parent = this.menu.parentMap.get(item);\n      const children = parent ? parent.children : this.menu.tree;\n      const index = children.indexOf(item);\n      const next = children[index + 1];\n      if (next) {\n        this.menu.sendFocusEvent(next);\n      } else if (parent) {\n        selectAfter(parent);\n      }\n    };\n    selectAfter(this.item);\n  }\n\n  private goUp($event: KeyboardEvent) {\n    $event.preventDefault();\n    const selectLastPossible = (item: TreeItem) => {\n      if (this.menu.hasChildren(item) && this.menu.isExpanded(item)) {\n        selectLastPossible(item.children[item.children.length - 1]);\n      } else {\n        this.menu.sendFocusEvent(item);\n      }\n    };\n    const selectBefore = (item: TreeItem) => {\n      const parent = this.menu.parentMap.get(item);\n      const children = parent ? parent.children : this.menu.tree;\n      const index = children.indexOf(item);\n      const previous = children[index - 1];\n      if (previous) {\n        selectLastPossible(previous);\n      } else if (parent) {\n        this.menu.sendFocusEvent(parent);\n      }\n    };\n    selectBefore(this.item);\n  }\n}\n",
            "selector": "[iwTreeItem]",
            "providers": [],
            "inputsClass": [
                {
                    "name": "iwTreeItem",
                    "line": 143,
                    "type": "TreeItem"
                }
            ],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "keydown",
                    "args": [
                        {
                            "name": "$event",
                            "type": "KeyboardEvent"
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "line": 166
                }
            ],
            "propertiesClass": [
                {
                    "name": "subscription",
                    "defaultValue": "new Subscription",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 145,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "goDown",
                    "args": [
                        {
                            "name": "$event",
                            "type": "KeyboardEvent"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 203,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "$event",
                            "type": "KeyboardEvent",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "goLeft",
                    "args": [
                        {
                            "name": "$event",
                            "type": "KeyboardEvent"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 179,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "$event",
                            "type": "KeyboardEvent",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "goRight",
                    "args": [
                        {
                            "name": "$event",
                            "type": "KeyboardEvent"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 192,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "$event",
                            "type": "KeyboardEvent",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "goUp",
                    "args": [
                        {
                            "name": "$event",
                            "type": "KeyboardEvent"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 225,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "$event",
                            "type": "KeyboardEvent",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 161
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 153
                }
            ],
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "menu",
                        "type": "TreeComponent"
                    },
                    {
                        "name": "elementRef",
                        "type": "ElementRef"
                    }
                ],
                "line": 145,
                "jsdoctags": [
                    {
                        "name": "menu",
                        "type": "TreeComponent",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "elementRef",
                        "type": "ElementRef",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "TreeNodeTemplateDirective",
            "id": "directive-TreeNodeTemplateDirective-a587e83a8b2903380b120d3da5d23847",
            "file": "src/app/ui/tree/tree/tree.component.ts",
            "type": "directive",
            "description": "",
            "sourceCode": "import { Component, Input, Directive, HostListener, ElementRef, OnInit, OnDestroy, Output, EventEmitter, TemplateRef } from '@angular/core';\nimport { Subject, Subscription } from 'rxjs';\nimport { filter } from 'rxjs/operators';\n\nexport interface TreeItem {\n  data: any;\n  children?: TreeItem[];\n}\n\n/**\n * This component renders a tree of DOM elements based on the provided `tree` input.\n * It does nothing else than rendering. You have to provide a template for the node.\n ```ts\n import { TreeModule } from 'iwerk-angular-ui';\n ```\n */\n@Component({\n  selector: 'iw-tree',\n  templateUrl: './tree.component.html',\n  styleUrls: ['./tree.component.sass']\n})\nexport class TreeComponent {\n  /**\n   * The tree input to render. Use the `TreeItem` type definition.\n   */\n  @Input() set tree(v: TreeItem[]) {\n    this.__tree = v;\n    this.updateParentMap();\n  }\n  get tree(): TreeItem[] {\n    return this.__tree;\n  }\n\n  /**\n   * The expanded nodes: their children will be displayed.\n   */\n  @Input() expanded: TreeItem[] = [];\n  nodeTemplate: TemplateRef<any>;\n\n  /**\n   * Event that is emitted when the set of expanded nodes changes.\n   */\n  @Output() expand = new EventEmitter<TreeItem[]>();\n\n  focusEvent = new Subject<TreeItem>();\n  parentMap = new Map<TreeItem, TreeItem>();\n\n  private __tree: TreeItem[] = [];\n\n  /**\n   * Return `true` if the item has children, `false` otherwise.\n   * @param item the item\n   */\n  hasChildren(item: TreeItem): boolean {\n    return item.children && item.children.length > 0;\n  }\n\n  /**\n   * Return `true` if the item is expanded, `false` otherwise.\n   * @param item the item\n   */\n  isExpanded(item: TreeItem): boolean {\n    return this.expanded.indexOf(item) > -1;\n  }\n\n  /**\n   * Toggle the expanded state of the item.\n   * @param item the item\n   */\n  toggleExpand(item: TreeItem) {\n    if (!this.hasChildren(item)) {\n      return;\n    }\n    if (this.isExpanded(item)) {\n      this.collapseItem(item);\n    } else {\n      this.expandItem(item);\n    }\n  }\n\n  /**\n   * Expand the item: display its children.\n   * @param item the item\n   */\n  expandItem(item: TreeItem) {\n    if (!this.hasChildren(item)) {\n      return;\n    }\n    this.setExpanded(this.expanded.concat([item]));\n  }\n\n  /**\n   * Collapse the item: hide its children.\n   * @param item the item\n   */\n  collapseItem(item: TreeItem) {\n    this.setExpanded(this.expanded.filter(e => e !== item));\n  }\n\n  /**\n   * @ignore\n   */\n  sendFocusEvent(item: TreeItem) {\n    this.focusEvent.next(item);\n  }\n\n  /**\n   * @ignore\n   */\n  private setExpanded(v: TreeItem[]) {\n    this.expanded = v;\n    this.expand.emit(v);\n  }\n\n  /**\n   * @ignore\n   */\n  private updateParentMap() {\n    this.parentMap = new Map();\n    const aux = (parent: TreeItem, nodes: TreeItem[]) => {\n      nodes.forEach(n => {\n        this.parentMap.set(n, parent);\n        aux(n, n.children || []);\n      });\n    };\n    aux(undefined, this.__tree);\n  }\n}\n\n@Directive({\n  selector: '[iwTreeNodeTemplate]'\n})\nexport class TreeNodeTemplateDirective {\n  constructor(public templateRef: TemplateRef<any>, private menu: TreeComponent) {\n    this.menu.nodeTemplate = this.templateRef;\n  }\n}\n\n@Directive({\n  selector: '[iwTreeItem]'\n})\nexport class TreeItemDirective implements OnInit, OnDestroy {\n  @Input('iwTreeItem') item: TreeItem;\n\n  private subscription = new Subscription;\n\n  constructor(\n    private menu: TreeComponent,\n    private elementRef: ElementRef\n  ) {\n  }\n\n  ngOnInit() {\n    this.subscription.add(this.menu.focusEvent\n      .pipe(filter(e => e === this.item))\n      .subscribe(e => {\n        this.elementRef.nativeElement.focus();\n      }));\n  }\n\n  ngOnDestroy() {\n    this.subscription.unsubscribe();\n  }\n\n  @HostListener('keydown', ['$event'])\n  keydown($event: KeyboardEvent) {\n    switch ($event.keyCode) {\n      case 39:\n        this.goRight($event); break;\n      case 40:\n        this.goDown($event); break;\n      case 38:\n        this.goUp($event); break;\n      case 37:\n        this.goLeft($event); break;\n    }\n  }\n\n  private goLeft($event: KeyboardEvent) {\n    $event.preventDefault();\n    if (this.menu.isExpanded(this.item)) {\n      return this.menu.collapseItem(this.item);\n    }\n    const parent = this.menu.parentMap.get(this.item);\n    if (parent) {\n      this.menu.sendFocusEvent(parent);\n    } else {\n      this.goUp($event);\n    }\n  }\n\n  private goRight($event: KeyboardEvent) {\n    $event.preventDefault();\n    if (!this.menu.hasChildren(this.item)) {\n      return this.goDown($event);\n    }\n    if (!this.menu.isExpanded(this.item)) {\n      return this.menu.expandItem(this.item);\n    }\n    this.menu.sendFocusEvent(this.item.children[0]);\n  }\n\n  private goDown($event: KeyboardEvent) {\n    $event.preventDefault();\n    if (\n      this.menu.hasChildren(this.item) &&\n      this.menu.isExpanded(this.item)\n    ) {\n      return this.menu.sendFocusEvent(this.item.children[0]);\n    }\n    const selectAfter = (item: TreeItem) => {\n      const parent = this.menu.parentMap.get(item);\n      const children = parent ? parent.children : this.menu.tree;\n      const index = children.indexOf(item);\n      const next = children[index + 1];\n      if (next) {\n        this.menu.sendFocusEvent(next);\n      } else if (parent) {\n        selectAfter(parent);\n      }\n    };\n    selectAfter(this.item);\n  }\n\n  private goUp($event: KeyboardEvent) {\n    $event.preventDefault();\n    const selectLastPossible = (item: TreeItem) => {\n      if (this.menu.hasChildren(item) && this.menu.isExpanded(item)) {\n        selectLastPossible(item.children[item.children.length - 1]);\n      } else {\n        this.menu.sendFocusEvent(item);\n      }\n    };\n    const selectBefore = (item: TreeItem) => {\n      const parent = this.menu.parentMap.get(item);\n      const children = parent ? parent.children : this.menu.tree;\n      const index = children.indexOf(item);\n      const previous = children[index - 1];\n      if (previous) {\n        selectLastPossible(previous);\n      } else if (parent) {\n        this.menu.sendFocusEvent(parent);\n      }\n    };\n    selectBefore(this.item);\n  }\n}\n",
            "selector": "[iwTreeNodeTemplate]",
            "providers": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "templateRef",
                    "type": "TemplateRef<any>",
                    "optional": false,
                    "description": "",
                    "line": 134,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "templateRef",
                        "type": "TemplateRef<any>"
                    },
                    {
                        "name": "menu",
                        "type": "TreeComponent"
                    }
                ],
                "line": 133,
                "jsdoctags": [
                    {
                        "name": "templateRef",
                        "type": "TemplateRef<any>",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "menu",
                        "type": "TreeComponent",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        }
    ],
    "components": [
        {
            "name": "AppComponent",
            "id": "component-AppComponent-00585e9b6db49211086fe24de3434852",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [
                "./app.component.sass"
            ],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "isClosed",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "tree",
                    "defaultValue": "[\n    {\n      data: {\n        routerLink: ['/'],\n        routerLinkActiveOptions: {exact: true},\n        label: 'Get Started'\n      }\n    },\n    {\n      data: {\n        routerLink: ['/ellipsis'], label: 'Ellipsis'\n      },\n    },\n    {\n      data: {\n        routerLink: ['/popover'], label: 'Popover'\n      },\n    },\n    {\n      data: {\n        routerLink: ['/tooltip'], label: 'Tooltip'\n      },\n    },\n    {\n      data: {\n        routerLink: ['/stateful-button'], label: 'Stateful Button'\n      },\n    },\n    {\n      data: {\n        routerLink: ['/dialog'], label: 'Dialog'\n      },\n    },\n    {\n      data: {\n        routerLink: ['/checkbox'], label: 'Checkbox'\n      },\n    },\n    {\n      data: {\n        routerLink: ['/navigation'], label: 'Navigation'\n      },\n    },\n    {\n      data: {\n        routerLink: ['/tree'], label: 'Tree'\n      },\n    },\n    {\n      data: {\n        routerLink: ['/movable'], label: 'Movable'\n      },\n    },\n  ]",
                    "type": "TreeItem[]",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "methodsClass": [
                {
                    "name": "linkStyle",
                    "args": [
                        {
                            "name": "depth",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "{ padding: string; }",
                    "typeParameters": [],
                    "line": 67,
                    "jsdoctags": [
                        {
                            "name": "depth",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { TreeItem } from './ui/tree/tree/tree.component';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.sass']\n})\nexport class AppComponent {\n  isClosed = false;\n\n  tree: TreeItem[] = [\n    {\n      data: {\n        routerLink: ['/'],\n        routerLinkActiveOptions: {exact: true},\n        label: 'Get Started'\n      }\n    },\n    {\n      data: {\n        routerLink: ['/ellipsis'], label: 'Ellipsis'\n      },\n    },\n    {\n      data: {\n        routerLink: ['/popover'], label: 'Popover'\n      },\n    },\n    {\n      data: {\n        routerLink: ['/tooltip'], label: 'Tooltip'\n      },\n    },\n    {\n      data: {\n        routerLink: ['/stateful-button'], label: 'Stateful Button'\n      },\n    },\n    {\n      data: {\n        routerLink: ['/dialog'], label: 'Dialog'\n      },\n    },\n    {\n      data: {\n        routerLink: ['/checkbox'], label: 'Checkbox'\n      },\n    },\n    {\n      data: {\n        routerLink: ['/navigation'], label: 'Navigation'\n      },\n    },\n    {\n      data: {\n        routerLink: ['/tree'], label: 'Tree'\n      },\n    },\n    {\n      data: {\n        routerLink: ['/movable'], label: 'Movable'\n      },\n    },\n  ];\n\n  linkStyle(depth: number) {\n    return {\n      padding: `0 ${(depth + 1) * 15}px`\n    };\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "$width_aside: 200px\n\n\\:host\n  display: flex\n  flex-direction: row\n  position: relative\n  width: 100vw\n  height: 100vh\n  overflow: hidden\n\n  aside\n    flex: 0 0 auto\n    height: 100%\n    width: $width_aside\n    overflow: auto\n    background: black\n    color: white\n    padding: 15px 0px\n\n    &.closed\n      display: none\n\n  main\n    flex: 1 1\n    height: 100%\n    overflow: auto\n    padding: 15px\n",
                    "styleUrl": "./app.component.sass"
                }
            ],
            "stylesData": "",
            "templateData": "<aside [class.closed]=\"isClosed\">\n  <iw-tree #treeComponent class=\"routes-menu\" [tree]=\"tree\">\n    <ng-template iwTreeNodeTemplate let-node let-depth=\"depth\">\n      <a [routerLink]=\"node.data.routerLink\"\n        [ngStyle]=\"linkStyle(depth)\"\n        [routerLinkActiveOptions]=\"{ exact: true }\"\n        [queryParams]=\"node.data.queryParams\"\n        [queryParamsHandling]=\"'merge'\"\n        [routerLinkActive]=\"'active-link'\"\n        [iwTreeItem]=\"node\">\n        {{node.data.label}}\n      </a>\n    </ng-template>\n  </iw-tree>\n\n  <button (click)=\"isClosed = !isClosed\">Toggle</button>\n</aside>\n\n<main>\n  <router-outlet></router-outlet>\n</main>"
        },
        {
            "name": "CheckboxComponent",
            "id": "component-CheckboxComponent-735ab7b87496da109ac3e07c98900fa8",
            "file": "src/app/ui/checkbox/checkbox/checkbox.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => CheckboxComponent), multi: true\n}",
                    "type": "component"
                }
            ],
            "selector": "iw-checkbox",
            "styleUrls": [
                "./checkbox.component.sass"
            ],
            "styles": [],
            "templateUrl": [
                "./checkbox.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "tabindex",
                    "line": 32,
                    "type": "number"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "__isDisabled",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 61,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "__value",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 60,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "onChangeCb",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 45
                },
                {
                    "name": "onTouchedCb",
                    "type": "Function",
                    "optional": false,
                    "description": "",
                    "line": 46
                }
            ],
            "methodsClass": [
                {
                    "name": "getTabIndex",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 86
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 71
                },
                {
                    "name": "onKeyup",
                    "args": [
                        {
                            "name": "$event",
                            "type": "KeyboardEvent"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 80,
                    "jsdoctags": [
                        {
                            "name": "$event",
                            "type": "KeyboardEvent",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 110,
                    "description": "<p>Implements ControlValueAccessor:registerOnChange</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 2613,
                                "end": 2615,
                                "flags": 0,
                                "escapedText": "fn"
                            },
                            "type": "any",
                            "tagName": {
                                "pos": 2607,
                                "end": 2612,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 118,
                    "description": "<p>Implements ControlValueAccessor:registerOnTouched</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 2762,
                                "end": 2764,
                                "flags": 0,
                                "escapedText": "fn"
                            },
                            "type": "any",
                            "tagName": {
                                "pos": 2756,
                                "end": 2761,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "setDisabledState",
                    "args": [
                        {
                            "name": "isDisabled",
                            "type": "boolean"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 126,
                    "description": "<p>Implements ControlValueAccessor:setDisabledState</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 2912,
                                "end": 2922,
                                "flags": 0,
                                "escapedText": "isDisabled"
                            },
                            "type": "boolean",
                            "tagName": {
                                "pos": 2906,
                                "end": 2911,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "userToggle",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 130,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "obj",
                            "type": "boolean"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 102,
                    "description": "<p>Implements ControlValueAccessor:writeValue</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 2451,
                                "end": 2454,
                                "flags": 0,
                                "escapedText": "obj"
                            },
                            "type": "boolean",
                            "tagName": {
                                "pos": 2445,
                                "end": 2450,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>the new selection</p>\n"
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "click",
                    "args": [
                        {
                            "name": "$event",
                            "type": "MouseEvent"
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "line": 94
                }
            ],
            "description": "<p>A checkbox component is great!</p>\n",
            "type": "component",
            "sourceCode": "import {\n  Component,\n  ElementRef,\n  forwardRef,\n  HostListener,\n  Inject,\n  Input,\n  OnInit,\n  Optional,\n  Renderer2,\n  ViewEncapsulation\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { CheckboxConfig } from '../checkbox-config.interface';\nimport { IW_CHECKBOX_CONFIG } from '../checkbox.config';\n\n/**\n * A checkbox component is great!\n */\n@Component({\n  selector: 'iw-checkbox',\n  templateUrl: './checkbox.component.html',\n  styleUrls: ['./checkbox.component.sass'],\n  providers: [{\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => CheckboxComponent),\n    multi: true\n  }],\n  encapsulation: ViewEncapsulation.None\n})\nexport class CheckboxComponent implements OnInit, ControlValueAccessor {\n  @Input() tabindex: number;\n\n  set value(v: boolean) {\n    this.__value = v;\n    if (v) {\n      this.renderer.addClass(this.elementRef.nativeElement, 'checkbox--checked');\n    } else {\n      this.renderer.removeClass(this.elementRef.nativeElement, 'checkbox--checked');\n    }\n  }\n  get value() {\n    return this.__value;\n  }\n  onChangeCb: (newValue: boolean) => any;\n  onTouchedCb: Function;\n  set isDisabled(v: boolean) {\n    this.__isDisabled = v;\n    this.renderer.setProperty(this.elementRef.nativeElement, 'disabled', v);\n    if (v) {\n      this.renderer.addClass(this.elementRef.nativeElement, 'checkbox--disabled');\n    } else {\n      this.renderer.removeClass(this.elementRef.nativeElement, 'checkbox--disabled');\n    }\n  }\n  get isDisabled() {\n    return this.__isDisabled;\n  }\n\n  private __value = false;\n  private __isDisabled = false;\n\n  constructor(\n    private renderer: Renderer2,\n    private elementRef: ElementRef,\n    @Optional() @Inject(IW_CHECKBOX_CONFIG) private checkboxConfig: CheckboxConfig\n  ) {\n    this.onChangeCb = this.onTouchedCb = () => {};\n  }\n\n  ngOnInit() {\n    if (this.checkboxConfig && this.checkboxConfig.containerClass) {\n      this.renderer.addClass(\n        this.elementRef.nativeElement,\n        this.checkboxConfig.containerClass,\n      );\n    }\n  }\n\n  onKeyup($event: KeyboardEvent) {\n    if ($event.keyCode === 32) {\n      this.userToggle();\n    }\n  }\n\n  getTabIndex(): string {\n    if (this.isDisabled) {\n      return '';\n    }\n    return String(this.tabindex || 0);\n  }\n\n  @HostListener('click', ['$event'])\n  onClick($event: MouseEvent) {\n    this.userToggle();\n  }\n\n  /**\n   * Implements ControlValueAccessor:writeValue\n   * @param obj the new selection\n   */\n  writeValue(obj: boolean): void {\n    this.value = obj;\n  }\n\n  /**\n   * Implements ControlValueAccessor:registerOnChange\n   * @param fn\n   */\n  registerOnChange(fn: any): void {\n    this.onChangeCb = fn;\n  }\n\n  /**\n   * Implements ControlValueAccessor:registerOnTouched\n   * @param fn\n   */\n  registerOnTouched(fn: any): void {\n    this.onTouchedCb = fn;\n  }\n\n  /**\n   * Implements ControlValueAccessor:setDisabledState\n   * @param isDisabled\n   */\n  setDisabledState(isDisabled: boolean): void {\n    this.isDisabled = isDisabled;\n  }\n\n  private userToggle() {\n    if (this.isDisabled) {\n      return;\n    }\n    this.value = !this.value;\n    this.onTouchedCb();\n    this.onChangeCb(this.value);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "iw-checkbox\n  display: inline-block\n  line-height: 15px\n  \n  &:not(.checkbox--disabled)\n    cursor: pointer\n\n  &.checkbox--disabled\n    cursor: not-allowed\n\n  &.checkbox--disabled\n    .checkbox__checkbox\n      opacity: 0.2\n\n\n  &:not(.checkbox--disabled):not(.checkbox--checked):hover\n    .checkbox__checkbox\n      border-color: grey\n\n  &.checkbox--checked\n    .checkbox__checkbox\n      border-color: black\n    \n    .checkbox__checkbox svg\n      opacity: 1\n\n  .checkbox__checkbox\n    width: 15px\n    height: 15px\n    position: relative\n    margin: 0 3px\n    display: inline-block\n    float: left\n    transition: border-color 0.3s\n    border: 1px solid lightgrey\n    border-radius: 2px\n    overflow: hidden\n\n    svg\n      position: absolute\n      left: 50%\n      top: 50%\n      width: 75%\n      transform: translate(-50%, -50%)\n      opacity: 0\n      transition: opacity 0.3s\n\n  .checkbox__label\n    display: inline-block",
                    "styleUrl": "./checkbox.component.sass"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "renderer",
                        "type": "Renderer2"
                    },
                    {
                        "name": "elementRef",
                        "type": "ElementRef"
                    },
                    {
                        "name": "checkboxConfig",
                        "type": "CheckboxConfig"
                    }
                ],
                "line": 61,
                "jsdoctags": [
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "elementRef",
                        "type": "ElementRef",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "checkboxConfig",
                        "type": "CheckboxConfig",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "ControlValueAccessor"
            ],
            "accessors": {
                "value": {
                    "name": "value",
                    "setSignature": {
                        "name": "value",
                        "type": "void",
                        "args": [
                            {
                                "name": "v",
                                "type": "boolean"
                            }
                        ],
                        "returnType": "void",
                        "line": 34,
                        "jsdoctags": [
                            {
                                "name": "v",
                                "type": "boolean",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "value",
                        "type": "",
                        "returnType": "",
                        "line": 42
                    }
                },
                "isDisabled": {
                    "name": "isDisabled",
                    "setSignature": {
                        "name": "isDisabled",
                        "type": "void",
                        "args": [
                            {
                                "name": "v",
                                "type": "boolean"
                            }
                        ],
                        "returnType": "void",
                        "line": 47,
                        "jsdoctags": [
                            {
                                "name": "v",
                                "type": "boolean",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "isDisabled",
                        "type": "",
                        "returnType": "",
                        "line": 56
                    }
                }
            },
            "templateData": "<div class=\"checkbox__checkbox\" [attr.tabindex]=\"getTabIndex()\" (keyup)=\"onKeyup($event)\">\n  <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\">\n    <path d=\"M20.285 2l-11.285 11.567-5.286-5.011-3.714 3.716 9 8.728 15-15.285z\"/>\n  </svg>\n</div>\n<div class=\"checkbox__label\">\n  <ng-content></ng-content>\n</div>"
        },
        {
            "name": "CheckboxDemoComponent",
            "id": "component-CheckboxDemoComponent-9e83c12bd2dbdf46aad3a304f84a757d",
            "file": "src/app/demo/checkbox-demo/checkbox-demo.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-checkbox-demo",
            "styleUrls": [
                "./checkbox-demo.component.sass"
            ],
            "styles": [],
            "templateUrl": [
                "./checkbox-demo.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "value1",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 15
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, OnInit, ViewEncapsulation } from '@angular/core';\n\n@Component({\n  selector: 'app-checkbox-demo',\n  templateUrl: './checkbox-demo.component.html',\n  styleUrls: ['./checkbox-demo.component.sass'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None\n})\nexport class CheckboxDemoComponent implements OnInit {\n  value1 = false;\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./checkbox-demo.component.sass"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 11
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<h1>Checkboxes</h1>\n\n<h2>Basic usage</h2>\n\n<iw-checkbox [(ngModel)]=\"value1\">Yoooo</iw-checkbox>\n<iw-checkbox [(ngModel)]=\"value1\" [disabled]=\"true\">Ya</iw-checkbox>\n<iw-checkbox>Yu</iw-checkbox>\n<iw-checkbox>Yi</iw-checkbox>\n\n<h2>Custom styles</h2>\n\n<iw-checkbox class=\"checkbox-style-1\">Some checkbox</iw-checkbox>\n\n<style>\n  .checkbox-style-1 {\n    line-height: 30px;\n  }\n\n  .checkbox-style-1 .checkbox__checkbox {\n    width: 30px;\n    height: 30px;\n    border-radius: 15px;\n    border-color: blue;\n    border-width: 3px;\n  }\n\n  .checkbox-style-1 svg {\n    fill: red;\n  }\n</style>\n"
        },
        {
            "name": "CustomPopoverDemoComponent",
            "id": "component-CustomPopoverDemoComponent-e48c8c24a62384e5871591e33f44cbdf",
            "file": "src/app/demo/popover/custom-popover-demo/custom-popover-demo.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-custom-popover-demo",
            "styleUrls": [
                "./custom-popover-demo.component.sass"
            ],
            "styles": [],
            "templateUrl": [
                "./custom-popover-demo.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [
                {
                    "name": "close",
                    "defaultValue": "new EventEmitter()",
                    "line": 9,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "_close",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 16
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 13
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'app-custom-popover-demo',\n  templateUrl: './custom-popover-demo.component.html',\n  styleUrls: ['./custom-popover-demo.component.sass']\n})\nexport class CustomPopoverDemoComponent implements OnInit {\n  @Output() close = new EventEmitter();\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n  _close() {\n    this.close.emit();\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "\\:host\n  display: block\n  max-height: 300px\n  width: 200px\n  border: 1px solid grey\n  border-radius: 3px\n  box-shadow: 2px 2px 5px 2px #7b7b7b\n  overflow: hidden\n\n  .custom-popover--header\n    padding: 0 30px 0 5px\n    border-bottom: 1px solid grey\n    background-color: lightgrey\n    position: relative\n    line-height: 30px\n    height: 30px\n\n  .custom-popover--content\n    padding: 15px 5px\n    background: white\n\n  .custom-popover--close-button\n    position: absolute\n    right: 5px\n    top: 0\n    line-height: 30px\n    text-decoration: none\n    cursor: pointer\n\n    &:hover\n      color: black",
                    "styleUrl": "./custom-popover-demo.component.sass"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 9
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"custom-popover--header\">\n  <div class=\"custom-popover--header-content\">\n    <ng-content select=\"[custom-popover-header]\"></ng-content>\n  </div>\n  <a class=\"custom-popover--close-button\" (click)=\"_close()\">x</a>\n</div>\n\n<div class=\"custom-popover--content\">\n  <ng-content select=\"[custom-popover-content]\"></ng-content>  \n</div>"
        },
        {
            "name": "DialogComponent",
            "id": "component-DialogComponent-8f22fcd8fcde922b184330874eb919b6",
            "file": "src/app/demo/dialog-demo/dialog-demo/dialog-demo.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-dialog",
            "styleUrls": [
                "./dialog-demo.component.sass"
            ],
            "styles": [],
            "templateUrl": [
                "./dialog-demo.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "__dialogInstance",
                    "type": "IDialog",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "myDialog1",
                    "type": "DialogDirective",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'myDialog1'"
                        }
                    ]
                },
                {
                    "name": "someValue",
                    "defaultValue": "667",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 18
                },
                {
                    "name": "openDialog",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27
                },
                {
                    "name": "openDialog1",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, OnDestroy, ViewChild } from '@angular/core';\nimport { MyDialogComponent } from '../my-dialog/my-dialog.component';\nimport { DialogDirective, DialogService, IDialog } from '../../../ui/dialog/dialog.module';\n\n@Component({\n  selector: 'app-dialog',\n  templateUrl: './dialog-demo.component.html',\n  styleUrls: ['./dialog-demo.component.sass']\n})\nexport class DialogComponent implements OnInit, OnDestroy {\n  @ViewChild('myDialog1') myDialog1: DialogDirective;\n  someValue = 667;\n\n  private __dialogInstance: IDialog;\n\n  constructor(private dialog: DialogService) { }\n\n  ngOnInit() {\n  }\n\n  ngOnDestroy() {\n    if (this.__dialogInstance) {\n      this.__dialogInstance.close();\n    }\n  }\n\n  openDialog() {\n    this.__dialogInstance = this.dialog.open(MyDialogComponent, {\n      escToClose: true\n    }, {\n      title: 'Programmatic Dialog'\n    });\n  }\n\n  openDialog1() {\n    this.myDialog1.open();\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "\n",
                    "styleUrl": "./dialog-demo.component.sass"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "dialog",
                        "type": "DialogService"
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "dialog",
                        "type": "DialogService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<h1>Dialog Demo</h1>\n\n<h2 tabindex=\"2\">Focus is captured</h2>\n\n<button (click)=\"myDialog2.open()\">Open</button>\n<input type=\"\" placeholder=\"You can't focus here when the dialog is open\"/>\n\n<h2>Opening via DialogService</h2>\n<button (click)=\"openDialog()\">Open a dialog with a component</button>\n\n<h2>Declarative way</h2>\n<button (click)=\"openDialog1()\">Open a dialog with a template</button>\n\n<ng-template iwDialog #myDialog1=\"iw-dialog\" [escToClose]=\"true\" containerClass=\"double-config-demo\">\n  <app-my-dialog title=\"Template Dialog\"></app-my-dialog>\n</ng-template>\n\n<ng-template iwDialog #myDialog2=\"iw-dialog\" [escToClose]=\"true\">\n  <h2>Focus is captured</h2>\n  <input type=\"text\" />\n  <input type=\"text\" />\n  <input type=\"text\" />\n</ng-template>\n"
        },
        {
            "name": "DialogContainerComponent",
            "id": "component-DialogContainerComponent-fe0645021aca13cc6868e8881676da8f",
            "file": "src/app/ui/dialog/dialog-container/dialog-container.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "iw-dialog-container",
            "styleUrls": [
                "./dialog-container.component.sass"
            ],
            "styles": [],
            "templateUrl": [
                "./dialog-container.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "dialogOptions",
                    "line": 34,
                    "type": "DialogOptions"
                }
            ],
            "outputsClass": [
                {
                    "name": "onClose",
                    "defaultValue": "new EventEmitter()",
                    "line": 35,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "focus",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 75
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 67
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 60
                }
            ],
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "body:keydown",
                    "args": [
                        {
                            "name": "$event",
                            "type": "KeyboardEvent"
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "line": 43
                },
                {
                    "name": "click",
                    "args": [
                        {
                            "name": "$event",
                            "type": "MouseEvent"
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "line": 51
                }
            ],
            "description": "",
            "type": "component",
            "sourceCode": "import {\n  Component,\n  OnInit,\n  ChangeDetectionStrategy,\n  HostListener,\n  ElementRef,\n  Output,\n  EventEmitter,\n  Renderer2,\n  AfterViewInit,\n  Input,\n  ViewEncapsulation\n} from '@angular/core';\n\nexport interface DialogOptions {\n  escToClose?: boolean;\n  clickToClose?: boolean;\n  containerClass?: string;\n  onClose?: (dialog: IDialog) => void;\n}\n\nexport interface IDialog {\n  close(): void;\n}\n\n@Component({\n  selector: 'iw-dialog-container',\n  templateUrl: './dialog-container.component.html',\n  styleUrls: ['./dialog-container.component.sass'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None\n})\nexport class DialogContainerComponent implements OnInit, AfterViewInit {\n  @Input() dialogOptions: DialogOptions;\n  @Output() onClose = new EventEmitter();\n\n  constructor(\n    private elementRef: ElementRef,\n    private renderer: Renderer2\n  ) { }\n\n  @HostListener('body:keydown', ['$event'])\n  onKeydown($event: KeyboardEvent) {\n    if ($event.keyCode === 27 && this.dialogOptions.escToClose) {\n      this.onClose.emit();\n      $event.preventDefault();\n    }\n  }\n\n  @HostListener('click', ['$event'])\n  onClick($event: MouseEvent) {\n    if ($event.target === this.elementRef.nativeElement && this.dialogOptions.clickToClose) {\n      this.onClose.emit();\n      $event.preventDefault();\n      $event.stopPropagation();\n    }\n  }\n\n\n  ngOnInit() {\n    const classes = this.dialogOptions.containerClass.split(' ').filter(s => !!s);\n    for (const c of classes) {\n      this.renderer.addClass(this.elementRef.nativeElement, c);\n    }\n  }\n\n  ngAfterViewInit() {\n    this.renderer.setAttribute(this.elementRef.nativeElement, 'tabindex', '0');\n    this.focus();\n    setTimeout(() => {\n      this.renderer.addClass(this.elementRef.nativeElement, 'iw-dialog-container--visible');\n    }, 0);\n  }\n\n  focus() {\n    const element = <HTMLElement>this.elementRef.nativeElement;\n    element.focus();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "iw-dialog-container\n  position: fixed\n  top: 0\n  left: 0\n  width: 100%\n  height: 100%\n  z-index: 2\n  opacity: 0\n  background: rgba(192, 192, 192, 0.67)\n  transition: opacity 0.5s\n  outline: none\n\n  .dialog-container__content\n    position: absolute\n    top: 100px\n    left: 20%\n    width: 60%\n    background: white\n    max-height: calc(100% - 200px)\n    overflow: hidden\n    display: flex\n    flex-direction: column\n    transition: transform 0.5s\n    transform: translateY(-100%)\n    box-shadow: 2px 2px 4px 1px gray\n    padding: 15px\n\n  &.iw-dialog-container--visible\n    opacity: 1\n    .dialog-container__content\n      transform: translateY(0)\n\n\n  .dialog-container__focus-trap\n    opacity: 0\n",
                    "styleUrl": "./dialog-container.component.sass"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "elementRef",
                        "type": "ElementRef"
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2"
                    }
                ],
                "line": 35,
                "jsdoctags": [
                    {
                        "name": "elementRef",
                        "type": "ElementRef",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "AfterViewInit"
            ],
            "templateData": "\n<div class=\"dialog-container__content\">\n  <ng-content></ng-content>\n</div>\n\n<div class=\"dialog-container__focus-trap\" iwDialogFocusTrap></div>\n"
        },
        {
            "name": "EllipsisComponent",
            "id": "component-EllipsisComponent-3f65f0008da638cdfcb1741a96ad72d7",
            "file": "src/app/demo/ellipsis/ellipsis.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-ellipsis",
            "styleUrls": [
                "./ellipsis.component.sass"
            ],
            "styles": [],
            "templateUrl": [
                "./ellipsis.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "height",
                    "defaultValue": "1000",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "lorem",
                    "defaultValue": "'Consectetur qui non tempor aute. Adipisicing ad laboris mollit ea consectetur eu aliquip exercitation ipsum cillum esse. Dolor irure consequat magna enim dolor aute sunt sint. Incididunt sint ullamco eu proident eiusmod reprehenderit reprehenderit cillum fugiat voluptate elit nulla. Reprehenderit ad voluptate laboris eu ad ex veniam id sint cupidatat mollit. Dolore magna officia consectetur ea proident excepteur culpa veniam exercitation. Occaecat mollit commodo voluptate ex cupidatat enim veniam quis tempor voluptate culpa quis consequat mollit.'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "truncated",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-ellipsis',\n  templateUrl: './ellipsis.component.html',\n  styleUrls: ['./ellipsis.component.sass']\n})\nexport class EllipsisComponent {\n  height = 1000;\n  truncated = false;\n\n  // tslint:disable-next-line\n  lorem = 'Consectetur qui non tempor aute. Adipisicing ad laboris mollit ea consectetur eu aliquip exercitation ipsum cillum esse. Dolor irure consequat magna enim dolor aute sunt sint. Incididunt sint ullamco eu proident eiusmod reprehenderit reprehenderit cillum fugiat voluptate elit nulla. Reprehenderit ad voluptate laboris eu ad ex veniam id sint cupidatat mollit. Dolore magna officia consectetur ea proident excepteur culpa veniam exercitation. Occaecat mollit commodo voluptate ex cupidatat enim veniam quis tempor voluptate culpa quis consequat mollit.';\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "p\n  max-width: 300px\n  border: 1px solid grey\n",
                    "styleUrl": "./ellipsis.component.sass"
                }
            ],
            "stylesData": "",
            "templateData": "<h1>Ellipsis</h1>\n\nHeight: <input type=\"number\" [(ngModel)]=\"height\" />\nTruncated: {{truncated ? 'Yes' : 'No'}}\n\n<p [iwMultilineEllipsis]=\"lorem\" (truncated)=\"truncated = $event\" [style.height.px]=\"height\"></p>\n"
        },
        {
            "name": "MovableDemoComponent",
            "id": "component-MovableDemoComponent-925b7d92e9cb23e23b579022d10abaf8",
            "file": "src/app/demo/movable-demo/movable-demo/movable-demo.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-movable-demo",
            "styleUrls": [
                "./movable-demo.component.sass"
            ],
            "styles": [],
            "templateUrl": [
                "./movable-demo.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "movableDemoContent2Component",
                    "defaultValue": "MovableDemoContent2Component",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 44
                },
                {
                    "name": "movableDemoContentComponent",
                    "defaultValue": "MovableDemoContentComponent",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 43
                }
            ],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "type": "component",
            "sourceCode": "import { Component, Directive, ElementRef, OnDestroy, OnInit } from '@angular/core';\nimport { MovableService } from '../../../ui/movable/movable.module';\n\n@Directive({\n  selector: '[appCustomMoveHandle]'\n})\nexport class CustomMoveHandleDirective implements OnInit, OnDestroy {\n  private sub: Function;\n\n  constructor(private movable: MovableService, public elementRef: ElementRef) {\n\n  }\n\n  ngOnInit() {\n    this.sub = this.movable.makeHandle(this);\n  }\n\n  ngOnDestroy() {\n    this.sub();\n  }\n}\n\n@Component({\n  template: `<div appCustomMoveHandle>custom handle directive</div>`\n})\nexport class MovableDemoContent2Component {\n\n}\n\n@Component({\n  template: `<div iwMoveHandle>iwMoveHandle</div>`\n})\nexport class MovableDemoContentComponent {\n\n}\n\n@Component({\n  selector: 'app-movable-demo',\n  templateUrl: './movable-demo.component.html',\n  styleUrls: ['./movable-demo.component.sass']\n})\nexport class MovableDemoComponent {\n  movableDemoContentComponent = MovableDemoContentComponent;\n  movableDemoContent2Component = MovableDemoContent2Component;\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".area\n  width: 300px\n  height: 300px\n  position: relative\n  border: red 1px solid\n  overflow: hidden\n\n.target\n  position: absolute\n  width: 90px\n  height: 90px\n  background: grey\n\n.handle\n  width: 30px\n  height: 30px\n  background: blue",
                    "styleUrl": "./movable-demo.component.sass"
                }
            ],
            "stylesData": "",
            "templateData": "<h1>Movable</h1>\n\n<div class=\"area\">\n  <div class=\"target\" iwMovable style=\"top: 20px; left: 40px;\">\n    <div class=\"handle\" iwMoveHandle></div>\n  </div>\n</div>\n\n<div class=\"area\">\n  <div class=\"target\" iwMovable style=\"top: 20px; left: 40px;\">\n    <ng-container [ngComponentOutlet]=\"movableDemoContentComponent\"></ng-container>\n  </div>\n</div>\n\n<div class=\"area\">\n  <div class=\"target\" iwMovable style=\"top: 20px; left: 40px;\">\n    <ng-container [ngComponentOutlet]=\"movableDemoContent2Component\"></ng-container>\n  </div>\n</div>\n"
        },
        {
            "name": "MovableDemoContent2Component",
            "id": "component-MovableDemoContent2Component-925b7d92e9cb23e23b579022d10abaf8",
            "file": "src/app/demo/movable-demo/movable-demo/movable-demo.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "styleUrls": [],
            "styles": [],
            "template": "<div appCustomMoveHandle>custom handle directive</div>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "type": "component",
            "sourceCode": "import { Component, Directive, ElementRef, OnDestroy, OnInit } from '@angular/core';\nimport { MovableService } from '../../../ui/movable/movable.module';\n\n@Directive({\n  selector: '[appCustomMoveHandle]'\n})\nexport class CustomMoveHandleDirective implements OnInit, OnDestroy {\n  private sub: Function;\n\n  constructor(private movable: MovableService, public elementRef: ElementRef) {\n\n  }\n\n  ngOnInit() {\n    this.sub = this.movable.makeHandle(this);\n  }\n\n  ngOnDestroy() {\n    this.sub();\n  }\n}\n\n@Component({\n  template: `<div appCustomMoveHandle>custom handle directive</div>`\n})\nexport class MovableDemoContent2Component {\n\n}\n\n@Component({\n  template: `<div iwMoveHandle>iwMoveHandle</div>`\n})\nexport class MovableDemoContentComponent {\n\n}\n\n@Component({\n  selector: 'app-movable-demo',\n  templateUrl: './movable-demo.component.html',\n  styleUrls: ['./movable-demo.component.sass']\n})\nexport class MovableDemoComponent {\n  movableDemoContentComponent = MovableDemoContentComponent;\n  movableDemoContent2Component = MovableDemoContent2Component;\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ""
        },
        {
            "name": "MovableDemoContentComponent",
            "id": "component-MovableDemoContentComponent-925b7d92e9cb23e23b579022d10abaf8",
            "file": "src/app/demo/movable-demo/movable-demo/movable-demo.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "styleUrls": [],
            "styles": [],
            "template": "<div iwMoveHandle>iwMoveHandle</div>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "type": "component",
            "sourceCode": "import { Component, Directive, ElementRef, OnDestroy, OnInit } from '@angular/core';\nimport { MovableService } from '../../../ui/movable/movable.module';\n\n@Directive({\n  selector: '[appCustomMoveHandle]'\n})\nexport class CustomMoveHandleDirective implements OnInit, OnDestroy {\n  private sub: Function;\n\n  constructor(private movable: MovableService, public elementRef: ElementRef) {\n\n  }\n\n  ngOnInit() {\n    this.sub = this.movable.makeHandle(this);\n  }\n\n  ngOnDestroy() {\n    this.sub();\n  }\n}\n\n@Component({\n  template: `<div appCustomMoveHandle>custom handle directive</div>`\n})\nexport class MovableDemoContent2Component {\n\n}\n\n@Component({\n  template: `<div iwMoveHandle>iwMoveHandle</div>`\n})\nexport class MovableDemoContentComponent {\n\n}\n\n@Component({\n  selector: 'app-movable-demo',\n  templateUrl: './movable-demo.component.html',\n  styleUrls: ['./movable-demo.component.sass']\n})\nexport class MovableDemoComponent {\n  movableDemoContentComponent = MovableDemoContentComponent;\n  movableDemoContent2Component = MovableDemoContent2Component;\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ""
        },
        {
            "name": "MyDialogComponent",
            "id": "component-MyDialogComponent-cbc53eaf1d49555eaca2c142149dbd72",
            "file": "src/app/demo/dialog-demo/my-dialog/my-dialog.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-my-dialog",
            "styleUrls": [
                "./my-dialog.component.sass"
            ],
            "styles": [],
            "templateUrl": [
                "./my-dialog.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "title",
                    "line": 10,
                    "type": "string"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "close",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 14
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Input } from '@angular/core';\nimport { DialogService } from '../../../ui/dialog/dialog.module';\n\n@Component({\n  selector: 'app-my-dialog',\n  templateUrl: './my-dialog.component.html',\n  styleUrls: ['./my-dialog.component.sass']\n})\nexport class MyDialogComponent implements OnInit {\n  @Input() title: string;\n\n  constructor(private dialog: DialogService) { }\n\n  ngOnInit() {\n  }\n\n  close() {\n    this.dialog.close();\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "\\:host\n  display: block\n  padding: 15px\n",
                    "styleUrl": "./my-dialog.component.sass"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "dialog",
                        "type": "DialogService"
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "dialog",
                        "type": "DialogService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<h1>\n  {{title}}\n</h1>\n\n<ul>\n  <li>Press ESC to close</li>\n  <li>Click outside to close</li>\n  <li>Programmatically close it <button (click)=\"close()\">close</button></li>\n</ul>\n"
        },
        {
            "name": "NavigationComponent",
            "id": "component-NavigationComponent-a0953f351b56bd1c2f6a2e363ce24978",
            "file": "src/app/ui/navigation/navigation/navigation.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "NavigationController",
                    "type": "controller"
                }
            ],
            "selector": "iw-navigation",
            "styleUrls": [
                "./navigation.component.sass"
            ],
            "styles": [],
            "templateUrl": [
                "./navigation.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "present",
                    "args": [
                        {
                            "name": "type",
                            "type": "Type<any>"
                        },
                        {
                            "name": "data",
                            "type": "NavDataType",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [
                        "ReturnedDataType",
                        "NavDataType"
                    ],
                    "line": 45,
                    "description": "<p>Present the component.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 857,
                                "end": 861,
                                "flags": 0,
                                "escapedText": "type"
                            },
                            "type": "Type<any>",
                            "tagName": {
                                "pos": 851,
                                "end": 856,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>the component class to display in the stack.</p>\n"
                        },
                        {
                            "name": "data",
                            "type": "NavDataType",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "tagName": {
                                "pos": 913,
                                "end": 920,
                                "flags": 0,
                                "escapedText": "returns"
                            },
                            "comment": "<p>a promise that resolves with a value that the dismissed view gives you.</p>\n"
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "<p>The navigation component is designed to stack views and only show the last element.\nIt is used along with the NavigationController</p>\n<div><pre class=\"line-numbers\"><code class=\"language-ts\"> import { NavigationModule } from &#39;iwerk-angular-ui&#39;;</code></pre></div>",
            "type": "component",
            "sourceCode": "import { Component, Type } from '@angular/core';\nimport { NavigationController } from '../navigation-controller.service';\n\n\n/**\n * The navigation component is designed to stack views and only show the last element.\n * It is used along with the NavigationController\n ```ts\n import { NavigationModule } from 'iwerk-angular-ui';\n ```\n */\n@Component({\n  selector: 'iw-navigation',\n  templateUrl: './navigation.component.html',\n  styleUrls: ['./navigation.component.sass'],\n  providers: [\n    NavigationController\n  ]\n})\nexport class NavigationComponent {\n\n  constructor(\n    private navigationController: NavigationController,\n  ) { }\n\n  /**\n   * @ignore\n   */\n  get stack() {\n    return this.navigationController.stack;\n  }\n\n  /**\n   * @ignore\n   */\n  get isStackEmpty() {\n    return this.stack.length === 0;\n  }\n\n  /**\n   * Present the component.\n   * @param type the component class to display in the stack.\n   * @returns a promise that resolves with a value that the dismissed view gives you.\n   */\n  present<ReturnedDataType, NavDataType>(type: Type<any>, data?: NavDataType) {\n    return this.navigationController.present<ReturnedDataType>(type, data);\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".iw-navigation-container:not(.iw-navigation-container--visible)\n  display: none\n",
                    "styleUrl": "./navigation.component.sass"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "navigationController",
                        "type": "NavigationController"
                    }
                ],
                "line": 20,
                "jsdoctags": [
                    {
                        "name": "navigationController",
                        "type": "NavigationController",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<div class=\"iw-navigation-container\" [class.iw-navigation-container--visible]=\"isStackEmpty\">\n  <ng-content></ng-content>\n</div>\n\n<ng-template ngFor [ngForOf]=\"stack\" let-item let-isLast=\"last\">\n  <div class=\"iw-navigation-container\" [class.iw-navigation-container--visible]=\"isLast\">\n    <ng-container *ngComponentOutlet=\"item.type; injector: item.injector\"></ng-container>\n  </div>\n</ng-template>\n"
        },
        {
            "name": "NavigationDemoComponent",
            "id": "component-NavigationDemoComponent-d6b4a2d65d494a25e74d525135283c8f",
            "file": "src/app/demo/navigation-demo/navigation.demo.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "styleUrls": [
                "./navigation.demo.component.sass"
            ],
            "styles": [],
            "templateUrl": [
                "./navigation.demo.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "depth",
                    "defaultValue": "0",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 49
                },
                {
                    "name": "nav",
                    "type": "NavigationComponent",
                    "optional": false,
                    "description": "",
                    "line": 48,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'nav'"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 53
                },
                {
                    "name": "present",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 56
                },
                {
                    "name": "presentOther",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 61
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, ViewChild, Inject } from '@angular/core';\nimport { NavigationController, NavigationData } from '../../ui/navigation/navigation-controller.service';\nimport { NavigationComponent } from '../../ui/navigation/navigation.module';\n\ninterface NavData {\n  depth: number;\n}\n\n@Component({\n  template: `\n    <p>some component (current depth: {{ depth }}, nested depth: {{ nestedDepth }})</p>\n    <button (click)=\"present()\">Present</button><button (click)=\"dismiss()\">Dismiss</button>\n  `\n})\nexport class SomeComponent {\n  depth = -1;\n  nestedDepth = -1;\n\n  constructor(private navCtrl: NavigationController, @Inject(NavigationData) private data: NavData) {\n    this.depth = this.data.depth;\n    this.nestedDepth = this.depth;\n  }\n\n  dismiss() {\n    this.navCtrl.dismiss(this.nestedDepth);\n  }\n\n  present() {\n    this.navCtrl.present<number>(SomeComponent, {depth: this.depth + 1}).then(v => this.nestedDepth = v);\n  }\n}\n\n\n@Component({\n  template: `\n    <p>some other component (current depth: {{ depth }}, nested depth: {{ nestedDepth }})</p>\n    <button (click)=\"present()\">Present</button><button (click)=\"dismiss()\">Dismiss</button>\n  `\n})\nexport class SomeOtherComponent extends SomeComponent {\n}\n\n@Component({\n  templateUrl: './navigation.demo.component.html',\n  styleUrls: ['./navigation.demo.component.sass']\n})\nexport class NavigationDemoComponent implements OnInit {\n  @ViewChild('nav') nav: NavigationComponent;\n  depth = 0;\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n  present() {\n    this.depth = 0;\n    this.nav.present<number, NavData>(SomeComponent, {depth: this.depth + 1}).then(v => this.depth = v);\n  }\n\n  presentOther() {\n    this.nav.present<number, NavData>(SomeOtherComponent, {depth: this.depth + 1}).then(v => this.depth = v);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".nav-container\n  width: 400px\n  height: 400px\n  box-shadow: 1px 1px 1px 1px black",
                    "styleUrl": "./navigation.demo.component.sass"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 49
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<h1>Navigation</h1>\n\n<div class=\"nav-container\">\n  <iw-navigation #nav>\n    <h4>Here is our main view</h4>\n    Last depth: {{depth}}\n    <button (click)=\"present()\">Present</button>\n    <button (click)=\"presentOther()\">Present Other</button>\n  </iw-navigation>\n</div>\n"
        },
        {
            "name": "PopoverContainerComponent",
            "id": "component-PopoverContainerComponent-11b6a8d18033ff49cc842e331a7dc007",
            "file": "src/app/ui/popover/popover-container/popover-container.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "iw-popover-container",
            "styleUrls": [
                "./popover-container.component.sass"
            ],
            "styles": [],
            "templateUrl": [
                "./popover-container.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "escToClose",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "onClose",
                    "defaultValue": "new EventEmitter(true)",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                }
            ],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "body:keydown",
                    "args": [
                        {
                            "name": "$event",
                            "type": "KeyboardEvent"
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "line": 21
                }
            ],
            "description": "",
            "type": "component",
            "sourceCode": "import {\n  Component,\n  ViewEncapsulation,\n  HostListener,\n  EventEmitter\n} from '@angular/core';\n\n@Component({\n  selector: 'iw-popover-container',\n  templateUrl: './popover-container.component.html',\n  styleUrls: ['./popover-container.component.sass'],\n  encapsulation: ViewEncapsulation.None\n})\nexport class PopoverContainerComponent {\n  escToClose: boolean;\n  onClose = new EventEmitter(true);\n\n  constructor() {}\n\n  @HostListener('body:keydown', ['$event'])\n  onKeyDown($event: KeyboardEvent) {\n    if (this.escToClose && $event.keyCode === 27) {\n      $event.preventDefault();\n      this.onClose.emit();\n    }\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "iw-popover-container\n  position: fixed\n  z-index: 4\n  display: block\n  background: white\n  border: 1px solid black\n  padding: 5px\n",
                    "styleUrl": "./popover-container.component.sass"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 16
            },
            "templateData": "<ng-content></ng-content>\n"
        },
        {
            "name": "PopoverDemoComponent",
            "id": "component-PopoverDemoComponent-d97f961b052ac42bf6fc9632a94c0e01",
            "file": "src/app/demo/popover/popover-demo/popover-demo.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-popover-demo",
            "styleUrls": [
                "./popover-demo.component.sass"
            ],
            "styles": [],
            "templateUrl": [
                "./popover-demo.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "editedField",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "editedPerson",
                    "type": "Person",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "firsts",
                    "defaultValue": "['Mark', 'Edy', 'Jack', 'John', 'Mike']",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "isPopoverOpen",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "isPopoverOpen2",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "isPopoverOpen3",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "isPopoverOpen4",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "isPopoverOpen5",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "lasts",
                    "defaultValue": "['Johnson', 'Willis', 'Chapman', 'Bob', 'Last']",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "persons",
                    "defaultValue": "[]",
                    "type": "Person[]",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 56
                },
                {
                    "name": "openEditFirstNamePopover",
                    "args": [
                        {
                            "name": "person",
                            "type": "Person"
                        },
                        {
                            "name": "$event",
                            "type": "MouseEvent"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35,
                    "jsdoctags": [
                        {
                            "name": "person",
                            "type": "Person",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "$event",
                            "type": "MouseEvent",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "openEditLastNamePopover",
                    "args": [
                        {
                            "name": "person",
                            "type": "Person"
                        },
                        {
                            "name": "$event",
                            "type": "MouseEvent"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39,
                    "jsdoctags": [
                        {
                            "name": "person",
                            "type": "Person",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "$event",
                            "type": "MouseEvent",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "openEditPropertyPopover",
                    "args": [
                        {
                            "name": "person",
                            "type": "Person"
                        },
                        {
                            "name": "propertyName",
                            "type": "string"
                        },
                        {
                            "name": "p",
                            "type": ""
                        },
                        {
                            "name": "$event",
                            "type": "MouseEvent"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 43,
                    "jsdoctags": [
                        {
                            "name": "person",
                            "type": "Person",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "propertyName",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "p",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "$event",
                            "type": "MouseEvent",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "trackBy",
                    "args": [
                        {
                            "name": "index",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 31,
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { PropertyEditPopoverComponent } from '../property-edit-popover/property-edit-popover.component';\nimport { PopoverService } from '../../../ui/popover/popover.module';\n\n@Component({\n  selector: 'app-popover-demo',\n  templateUrl: './popover-demo.component.html',\n  styleUrls: ['./popover-demo.component.sass']\n})\nexport class PopoverDemoComponent implements OnInit {\n  editedPerson: Person;\n  editedField: string;\n  persons: Person[] = [];\n  firsts = ['Mark', 'Edy', 'Jack', 'John', 'Mike'];\n  lasts = ['Johnson', 'Willis', 'Chapman', 'Bob', 'Last'];\n  isPopoverOpen3 = false;\n  isPopoverOpen2 = false;\n  isPopoverOpen = false;\n  isPopoverOpen4 = false;\n  isPopoverOpen5 = false;\n\n  constructor(private popoverService: PopoverService) {\n    for (let i = 0; i < 1000; i++) {\n      this.persons.push({\n        first: this.firsts[Math.floor(Math.random() * this.firsts.length)],\n        last: this.lasts[Math.floor(Math.random() * this.lasts.length)],\n      });\n    }\n  }\n\n  trackBy(index: number) {\n    return index;\n  }\n\n  openEditFirstNamePopover(person: Person, $event: MouseEvent) {\n    return this.openEditPropertyPopover(person, 'First Name', 'first', $event);\n  }\n\n  openEditLastNamePopover(person: Person, $event: MouseEvent) {\n    return this.openEditPropertyPopover(person, 'Last Name', 'last', $event);\n  }\n\n  openEditPropertyPopover(person: Person, propertyName: string, p: keyof Person, $event: MouseEvent) {\n    this.popoverService.open(PropertyEditPopoverComponent, <HTMLElement>$event.target, {\n      popoverClass: 'popover-demo',\n      escToClose: true\n    }, component => {\n      component.value = person[p];\n      component.propertyName = propertyName;\n      component.onValueChange.subscribe((v: string) => {\n        person[p] = v;\n      });\n    });\n  }\n\n  ngOnInit() {\n  }\n}\n\ninterface Person {\n  first: string;\n  last: string;\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "\\:host\n  table\n    width: 100%\n\n    th, td\n      text-align: left\n      width: 50%\n      padding: 5px 5px 5px 5px\n\n    td\n      line-height: 20px\n\n    thead\n      border-bottom: 1px solid lightgrey\n\n    border-collapse: collapse\n  \n  .cell-right-icon\n    position: relative\n    padding-right: 30px\n\n    &:hover\n      button\n        opacity: 1\n\n    button\n      opacity: 0\n      position: absolute\n      right: 0\n      top: 0\n      border: none\n      -webkit-appearance: none\n      background: none\n      cursor: pointer\n\n      &:hover\n        background: lightgray\n",
                    "styleUrl": "./popover-demo.component.sass"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "popoverService",
                        "type": "PopoverService"
                    }
                ],
                "line": 20,
                "jsdoctags": [
                    {
                        "name": "popoverService",
                        "type": "PopoverService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<h1> Popover </h1>\n\n<h2>Right alignment</h2>\n\n<button (click)=\"isPopoverOpen6 = true\">Yoooo\n  <ng-template iwPopover \n    [isOpen]=\"isPopoverOpen6\"\n    arrowClass=\"popover-no-arrow\"\n    [horizontalAlignment]=\"'rightWithRight'\"\n    (shouldClose)=\"isPopoverOpen6 = false\">\n    Helloooo\n  </ng-template>\n</button>\n\n<h2>Popover declarative logic</h2>\n\n<p>The popover will appear on this element!\n  <ng-template iwPopover \n    [isOpen]=\"isPopoverOpen3\"\n    arrowClass=\"popover-no-arrow\"\n    (shouldClose)=\"isPopoverOpen3 = false\">\n    Helloooo\n  </ng-template>\n</p>\n<hr/>\n<button (click)=\"isPopoverOpen3 = true\" id=\"pop1\">\n  Click to open!\n</button>\n\n<h2>Click outside to close: No, Esc to close: No</h2>\n\n<button (click)=\"isPopoverOpen2 = true\" id=\"pop2\">\n  Click to open!\n\n  <ng-template iwPopover \n    [isOpen]=\"isPopoverOpen2\"\n    [clickOutsideToClose]=\"false\"\n    [escToClose]=\"false\"\n    popoverClass=\"popover-demo\"\n    (shouldClose)=\"isPopoverOpen2 = false\">\n    <app-custom-popover-demo (close)=\"isPopoverOpen2 = false\">\n      <div custom-popover-header>Popover</div>\n      <div appCustomPopoverContent>    \n        Click, or Esc, I won't close!\n      </div>\n    </app-custom-popover-demo>\n  </ng-template>\n</button>\n\n<h2>Declarative way</h2>\n\n<button (click)=\"isPopoverOpen = true\">\n  Click to open!\n\n  <ng-template iwPopover \n    [isOpen]=\"isPopoverOpen\"\n    popoverClass=\"popover-demo\"\n    (shouldClose)=\"isPopoverOpen = false\">\n    <app-custom-popover-demo (close)=\"isPopoverOpen = false\">\n      <div custom-popover-header>Popover</div>\n      <div custom-popover-content>    \n        Hello World! I'm popping over!\n      </div>\n    </app-custom-popover-demo>\n  </ng-template>\n</button>\n\n<h2>Horizontal</h2>\n\n<button (click)=\"isPopoverOpen5 = true\">\n  Click to open!\n\n  <ng-template iwPopover \n    [horizontal]=\"true\"\n    [isOpen]=\"isPopoverOpen5\"\n    popoverClass=\"popover-demo\"\n    (shouldClose)=\"isPopoverOpen5 = false\">\n    <app-custom-popover-demo (close)=\"isPopoverOpen5 = false\">\n      <div custom-popover-header>Popover</div>\n      <div custom-popover-content>    \n        On the left/right!\n      </div>\n    </app-custom-popover-demo>\n  </ng-template>\n</button>\n\n<h2>ExpressionChangedAfterItHasBeenCheckedError\n\n  <ng-template iwPopover \n    [isOpen]=\"isPopoverOpen4\"\n    (shouldClose)=\"isPopoverOpen4 = false\">\n    {{isPopoverOpen4}}\n  </ng-template>\n</h2>\n\n<button (click)=\"isPopoverOpen4 = true\" id=\"ExpressionChangedAfterItHasBeenCheckedErrorButton\">\n  Click to open!\n</button>\n\n<h2>Programmatic way</h2>\n\n<table>\n  <thead>\n    <tr>\n      <th>First Name</th>\n      <th>Last Name</th>\n    </tr>\n  </thead>\n  <tbody>\n    <ng-template ngFor [ngForOf]=\"persons\" let-person [ngForTrackBy]=\"trackBy\">\n      <tr>\n        <td class=\"cell-right-icon\">\n          {{person.first}}\n          <button (click)=\"openEditFirstNamePopover(person, $event)\">&#x270E;</button>\n        </td>\n        <td class=\"cell-right-icon\">\n          {{person.last}}\n          <button (click)=\"openEditLastNamePopover(person, $event)\">&#x270E;</button>          \n        </td>\n      </tr>\n    </ng-template>\n  </tbody>\n</table>\n\n\n\n"
        },
        {
            "name": "PopoverScrollMaskComponent",
            "id": "component-PopoverScrollMaskComponent-236166f34b28dbcda469fab28d899987",
            "file": "src/app/ui/popover/popover-scroll-mask/popover-scroll-mask.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "iw-popover-scroll-mask",
            "styleUrls": [
                "./popover-scroll-mask.component.sass"
            ],
            "styles": [],
            "templateUrl": [
                "./popover-scroll-mask.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "clickOutsideToClose",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "onClose",
                    "defaultValue": "new EventEmitter(false)",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 18
                }
            ],
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "click",
                    "args": [
                        {
                            "name": "$event",
                            "type": "MouseEvent"
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "line": 27
                }
            ],
            "description": "",
            "type": "component",
            "sourceCode": "import { Component, ElementRef, EventEmitter, HostListener, OnDestroy, OnInit, Renderer2, ViewEncapsulation } from '@angular/core';\n\n@Component({\n  selector: 'iw-popover-scroll-mask',\n  templateUrl: './popover-scroll-mask.component.html',\n  styleUrls: ['./popover-scroll-mask.component.sass'],\n  encapsulation: ViewEncapsulation.None\n})\nexport class PopoverScrollMaskComponent implements OnInit, OnDestroy {\n  clickOutsideToClose: boolean;\n  onClose = new EventEmitter(false);\n\n  constructor(\n    private elementRef: ElementRef,\n    private renderer: Renderer2\n  ) {}\n\n  ngOnInit() {\n    this.renderer.addClass(document.body, 'body-with-iw-popover');\n  }\n\n  ngOnDestroy() {\n    this.renderer.removeClass(document.body, 'body-with-iw-popover');\n  }\n\n  @HostListener('click', ['$event'])\n  onClick($event: MouseEvent) {\n    if (this.clickOutsideToClose && $event.target === this.elementRef.nativeElement) {\n      $event.preventDefault();\n      $event.stopPropagation();\n      this.onClose.emit();\n    }\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "iw-popover-scroll-mask\n  z-index: 3\n  position: absolute\n  top: 0\n  left: 0\n  width: 100%\n  height: 100%\n  background: rgba(255, 255, 255, 0.01)\n  \n  .iw-popover-arrow-element\n    z-index: 5\n",
                    "styleUrl": "./popover-scroll-mask.component.sass"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "elementRef",
                        "type": "ElementRef"
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2"
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "elementRef",
                        "type": "ElementRef",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<ng-content></ng-content>"
        },
        {
            "name": "PropertyEditPopoverComponent",
            "id": "component-PropertyEditPopoverComponent-1c196c81ee4abe91d680a7e7023f1822",
            "file": "src/app/demo/popover/property-edit-popover/property-edit-popover.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-property-edit-popover",
            "styleUrls": [
                "./property-edit-popover.component.sass"
            ],
            "styles": [],
            "templateUrl": [
                "./property-edit-popover.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "propertyName",
                    "line": 11,
                    "type": "string"
                },
                {
                    "name": "value",
                    "line": 10,
                    "type": "string"
                }
            ],
            "outputsClass": [
                {
                    "name": "onValueChange",
                    "defaultValue": "new EventEmitter<string>()",
                    "line": 12,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "close",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 16
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Input, Output, EventEmitter } from '@angular/core';\nimport { Popover } from '../../../ui/popover/popover.module';\n\n@Component({\n  selector: 'app-property-edit-popover',\n  templateUrl: './property-edit-popover.component.html',\n  styleUrls: ['./property-edit-popover.component.sass']\n})\nexport class PropertyEditPopoverComponent implements OnInit {\n  @Input() value: string;\n  @Input() propertyName: string;\n  @Output() onValueChange = new EventEmitter<string>();\n\n  constructor(private popoverInstance: Popover) { }\n\n  ngOnInit() {\n  }\n\n  close() {\n    this.popoverInstance.close();\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./property-edit-popover.component.sass"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "popoverInstance",
                        "type": "Popover"
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "popoverInstance",
                        "type": "Popover",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<app-custom-popover-demo (close)=\"close()\">\n  <div custom-popover-header>Edit</div>\n  <div custom-popover-content>    \n    {{propertyName}}: <input autofocus autocomplete=\"false\" [ngModel]=\"value\" (ngModelChange)=\"onValueChange.emit($event)\" type=\"text\"/>\n  </div>\n</app-custom-popover-demo>"
        },
        {
            "name": "SomeComponent",
            "id": "component-SomeComponent-d6b4a2d65d494a25e74d525135283c8f",
            "file": "src/app/demo/navigation-demo/navigation.demo.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "styleUrls": [],
            "styles": [],
            "template": "<p>some component (current depth: {{ depth }}, nested depth: {{ nestedDepth }})</p>\n<button (click)=\"present()\">Present</button><button (click)=\"dismiss()\">Dismiss</button>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "depth",
                    "defaultValue": "-1",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "nestedDepth",
                    "defaultValue": "-1",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                }
            ],
            "methodsClass": [
                {
                    "name": "dismiss",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24
                },
                {
                    "name": "present",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, ViewChild, Inject } from '@angular/core';\nimport { NavigationController, NavigationData } from '../../ui/navigation/navigation-controller.service';\nimport { NavigationComponent } from '../../ui/navigation/navigation.module';\n\ninterface NavData {\n  depth: number;\n}\n\n@Component({\n  template: `\n    <p>some component (current depth: {{ depth }}, nested depth: {{ nestedDepth }})</p>\n    <button (click)=\"present()\">Present</button><button (click)=\"dismiss()\">Dismiss</button>\n  `\n})\nexport class SomeComponent {\n  depth = -1;\n  nestedDepth = -1;\n\n  constructor(private navCtrl: NavigationController, @Inject(NavigationData) private data: NavData) {\n    this.depth = this.data.depth;\n    this.nestedDepth = this.depth;\n  }\n\n  dismiss() {\n    this.navCtrl.dismiss(this.nestedDepth);\n  }\n\n  present() {\n    this.navCtrl.present<number>(SomeComponent, {depth: this.depth + 1}).then(v => this.nestedDepth = v);\n  }\n}\n\n\n@Component({\n  template: `\n    <p>some other component (current depth: {{ depth }}, nested depth: {{ nestedDepth }})</p>\n    <button (click)=\"present()\">Present</button><button (click)=\"dismiss()\">Dismiss</button>\n  `\n})\nexport class SomeOtherComponent extends SomeComponent {\n}\n\n@Component({\n  templateUrl: './navigation.demo.component.html',\n  styleUrls: ['./navigation.demo.component.sass']\n})\nexport class NavigationDemoComponent implements OnInit {\n  @ViewChild('nav') nav: NavigationComponent;\n  depth = 0;\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n  present() {\n    this.depth = 0;\n    this.nav.present<number, NavData>(SomeComponent, {depth: this.depth + 1}).then(v => this.depth = v);\n  }\n\n  presentOther() {\n    this.nav.present<number, NavData>(SomeOtherComponent, {depth: this.depth + 1}).then(v => this.depth = v);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "navCtrl",
                        "type": "NavigationController"
                    },
                    {
                        "name": "data",
                        "type": "NavData"
                    }
                ],
                "line": 17,
                "jsdoctags": [
                    {
                        "name": "navCtrl",
                        "type": "NavigationController",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "data",
                        "type": "NavData",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "SomeOtherComponent",
            "id": "component-SomeOtherComponent-d6b4a2d65d494a25e74d525135283c8f",
            "file": "src/app/demo/navigation-demo/navigation.demo.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "styleUrls": [],
            "styles": [],
            "template": "<p>some other component (current depth: {{ depth }}, nested depth: {{ nestedDepth }})</p>\n<button (click)=\"present()\">Present</button><button (click)=\"dismiss()\">Dismiss</button>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "depth",
                    "defaultValue": "-1",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "inheritance": {
                        "file": "SomeComponent"
                    }
                },
                {
                    "name": "nestedDepth",
                    "defaultValue": "-1",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "inheritance": {
                        "file": "SomeComponent"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "dismiss",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24,
                    "inheritance": {
                        "file": "SomeComponent"
                    }
                },
                {
                    "name": "present",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28,
                    "inheritance": {
                        "file": "SomeComponent"
                    }
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, ViewChild, Inject } from '@angular/core';\nimport { NavigationController, NavigationData } from '../../ui/navigation/navigation-controller.service';\nimport { NavigationComponent } from '../../ui/navigation/navigation.module';\n\ninterface NavData {\n  depth: number;\n}\n\n@Component({\n  template: `\n    <p>some component (current depth: {{ depth }}, nested depth: {{ nestedDepth }})</p>\n    <button (click)=\"present()\">Present</button><button (click)=\"dismiss()\">Dismiss</button>\n  `\n})\nexport class SomeComponent {\n  depth = -1;\n  nestedDepth = -1;\n\n  constructor(private navCtrl: NavigationController, @Inject(NavigationData) private data: NavData) {\n    this.depth = this.data.depth;\n    this.nestedDepth = this.depth;\n  }\n\n  dismiss() {\n    this.navCtrl.dismiss(this.nestedDepth);\n  }\n\n  present() {\n    this.navCtrl.present<number>(SomeComponent, {depth: this.depth + 1}).then(v => this.nestedDepth = v);\n  }\n}\n\n\n@Component({\n  template: `\n    <p>some other component (current depth: {{ depth }}, nested depth: {{ nestedDepth }})</p>\n    <button (click)=\"present()\">Present</button><button (click)=\"dismiss()\">Dismiss</button>\n  `\n})\nexport class SomeOtherComponent extends SomeComponent {\n}\n\n@Component({\n  templateUrl: './navigation.demo.component.html',\n  styleUrls: ['./navigation.demo.component.sass']\n})\nexport class NavigationDemoComponent implements OnInit {\n  @ViewChild('nav') nav: NavigationComponent;\n  depth = 0;\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n  present() {\n    this.depth = 0;\n    this.nav.present<number, NavData>(SomeComponent, {depth: this.depth + 1}).then(v => this.depth = v);\n  }\n\n  presentOther() {\n    this.nav.present<number, NavData>(SomeOtherComponent, {depth: this.depth + 1}).then(v => this.depth = v);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": "SomeComponent"
        },
        {
            "name": "StatefulButtonDemoComponent",
            "id": "component-StatefulButtonDemoComponent-33a362d07b6e164ec4a237c5beabb875",
            "file": "src/app/demo/stateful-button/stateful-button-demo/stateful-button-demo.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-stateful-button-demo",
            "styleUrls": [
                "./stateful-button-demo.component.sass"
            ],
            "styles": [],
            "templateUrl": [
                "./stateful-button-demo.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "myButtonState",
                    "defaultValue": "'IDLE'",
                    "type": "ButtonState",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "toggle",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "methodsClass": [
                {
                    "name": "do",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 16
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { ButtonState } from '../../../ui/state-button/state-button.module';\n\n@Component({\n  selector: 'app-stateful-button-demo',\n  templateUrl: './stateful-button-demo.component.html',\n  styleUrls: ['./stateful-button-demo.component.sass']\n})\nexport class StatefulButtonDemoComponent implements OnInit {\n\n  myButtonState: ButtonState = 'IDLE';\n  toggle = false;\n\n  constructor() { }\n\n  ngOnInit() {\n    setInterval(() => this.toggle = !this.toggle, 500);\n  }\n\n  do() {\n    this.myButtonState = 'DOING';\n\n    delay(1000)\n      .then(() => this.myButtonState = 'SUCCESS')\n      .then(() => delay(1000))\n      .then(() => this.myButtonState = 'IDLE');\n  }\n}\n\nfunction delay(ts: number) {\n  return new Promise(resolve => {\n    setTimeout(() => resolve(), ts);\n  });\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".iw-state-button\n  display: inline-block\n  height: 30px\n  line-height: 30px\n  padding: 0 10px\n\n  &.sb--doing\n    background-color: grey\n    color: white\n    cursor: wait\n\n  &.sb--success\n    background-color: #2ECC40\n    color: white\n  \n  &.sb--failure\n    background-color: red\n    color: white\n\n  &.sb--doing::before\n    content: ''\n    display: inline-block\n    width: 16px\n    height: 16px\n    margin: 0px 5px -3px 0px\n    border-radius: 8px\n    box-shadow: 0 1px 0 0 white\n    -ms-animation: stateful-button--animation 1s linear infinite\n    -moz-animation: stateful-button--animation 1s linear infinite\n    -webkit-animation: stateful-button--animation 1s linear infinite\n    -o-animation: stateful-button--animation 1s linear infinite\n    animation: stateful-button--animation 1s linear infinite\n    z-index: 1\n\n\n@-moz-keyframes stateful-button--animation\n  0%\n    -moz-transform: rotate(0deg)\n    transform: rotate(0deg)\n  100%\n    -moz-transform: rotate(360deg)\n    transform: rotate(360deg)\n\n@-ms-keyframes stateful-button--animation\n  0%\n    -ms-transform: rotate(0deg)\n    transform: rotate(0deg)\n  100%\n    -ms-transform: rotate(360deg)\n    transform: rotate(360deg)\n\n@-webkit-keyframes stateful-button--animation\n  0%\n    -webkit-transform: rotate(0deg)\n    transform: rotate(0deg)\n  100%\n    -webkit-transform: rotate(360deg)\n    transform: rotate(360deg)\n\n@-o-keyframes stateful-button--animation\n  0%\n    -o-transform: rotate(0deg)\n    transform: rotate(0deg)\n  100%\n    -o-transform: rotate(360deg)\n    transform: rotate(360deg)\n\n@keyframes stateful-button--animation\n  0%\n    -ms-transform: rotate(0deg)\n    -moz-transform: rotate(0deg)\n    -webkit-transform: rotate(0deg)\n    -o-transform: rotate(0deg)\n    transform: rotate(0deg)\n  100%\n    -ms-transform: rotate(360deg)\n    -moz-transform: rotate(360deg)\n    -webkit-transform: rotate(360deg)\n    -o-transform: rotate(360deg)\n    transform: rotate(360deg)",
                    "styleUrl": "./stateful-button-demo.component.sass"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 12
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<h2>\n  Possible States\n</h2>\n\n<button iwStateButton=\"IDLE\">\n  <ng-template sbIdle>Idle</ng-template>\n  <ng-template sbDoing>Doing</ng-template>\n  <ng-template sbSuccess>Success</ng-template>\n  <ng-template sbFailure>Failure</ng-template>\n</button>\n<button iwStateButton=\"DOING\">\n  <ng-template sbIdle>Idle</ng-template>\n  <ng-template sbDoing>Doing</ng-template>\n  <ng-template sbSuccess>Success</ng-template>\n  <ng-template sbFailure>Failure</ng-template>\n</button>\n<button iwStateButton=\"SUCCESS\">\n  <ng-template sbIdle>Idle</ng-template>\n  <ng-template sbDoing>Doing</ng-template>\n  <ng-template sbSuccess>Success</ng-template>\n  <ng-template sbFailure>Failure</ng-template>\n</button>\n<button iwStateButton=\"FAILURE\">\n  <ng-template sbIdle>Idle</ng-template>\n  <ng-template sbDoing>Doing</ng-template>\n  <ng-template sbSuccess>Success</ng-template>\n  <ng-template sbFailure>Failure</ng-template>\n</button>\n\n<h2>Standard Behaviour</h2>\n<button [iwStateButton]=\"myButtonState\" (click)=\"do()\">\n  <ng-template [ngIf]=\"toggle\">\n    <ng-template sbIdle>Save</ng-template>\n  </ng-template>\n  <ng-template [ngIf]=\"!toggle\">\n    <ng-template sbIdle>Save2</ng-template>\n  </ng-template>    \n  <ng-template sbDoing>Saving</ng-template>\n  <ng-template sbSuccess>Saved</ng-template>\n  <ng-template sbFailure>Save failed!</ng-template>\n</button>\n"
        },
        {
            "name": "TooltipContainerComponent",
            "id": "component-TooltipContainerComponent-e746b44d98065fa25e1f564f0702cca1",
            "file": "src/app/ui/tooltip/tooltip-container/tooltip-container.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "iw-tooltip-container",
            "styleUrls": [
                "./tooltip-container.component.sass"
            ],
            "styles": [],
            "templateUrl": [
                "./tooltip-container.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "containerClass",
                    "line": 21,
                    "type": "string"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "type": "component",
            "sourceCode": "import {\n  Component,\n  OnInit,\n  ViewEncapsulation,\n  Input,\n  Renderer2,\n  ElementRef,\n  Optional,\n  Inject\n} from '@angular/core';\nimport { TooltipConfig } from '../tooltip-config.interface';\nimport { IW_TOOLTIP_CONFIG } from '../tooltip.config';\n\n@Component({\n  selector: 'iw-tooltip-container',\n  templateUrl: './tooltip-container.component.html',\n  styleUrls: ['./tooltip-container.component.sass'],\n  encapsulation: ViewEncapsulation.None\n})\nexport class TooltipContainerComponent implements OnInit {\n  @Input() containerClass: string;\n\n  constructor(\n    private renderer: Renderer2,\n    private elementRef: ElementRef,\n    @Optional() @Inject(IW_TOOLTIP_CONFIG) private tooltipConfig: TooltipConfig\n  ) { }\n\n  ngOnInit() {\n    if (this.containerClass) {\n      this.renderer.addClass(this.elementRef.nativeElement, this.containerClass);\n    }\n    if (this.tooltipConfig && this.tooltipConfig.containerClass) {\n      this.renderer.addClass(\n        this.elementRef.nativeElement,\n        this.tooltipConfig.containerClass\n      );\n    }\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "$inner-padding: 5px\n\niw-tooltip-container\n  z-index: 6\n  position: absolute\n  display: block\n  padding: $inner-padding\n\n  .tooltip-container__content\n    border-radius: 3px\n    color: white\n    padding: 5px\n    background: black    \n\n  &:after\n    border: $inner-padding solid transparent\n    content: \" \"\n    height: 0\n    width: 0\n    position: absolute\n    pointer-events: none\n\n  &.iw-tooltip-container--bottom:after\n    left: 50%\n    bottom: calc(100% - #{$inner-padding})\n    border-bottom-color: black\n    margin-left: -$inner-padding\n\n  &.iw-tooltip-container--top:after\n    left: 50%\n    top: calc(100% - #{$inner-padding})\n    border-top-color: black\n    margin-left: -$inner-padding\n\n  &.iw-tooltip-container--right:after\n    top: 50%\n    right: calc(100% - #{$inner-padding})\n    border-right-color: black\n    margin-top: -$inner-padding\n\n  &.iw-tooltip-container--left:after\n    top: 50%\n    left: calc(100% - #{$inner-padding})\n    border-left-color: black\n    margin-top: -$inner-padding\n",
                    "styleUrl": "./tooltip-container.component.sass"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "renderer",
                        "type": "Renderer2"
                    },
                    {
                        "name": "elementRef",
                        "type": "ElementRef"
                    },
                    {
                        "name": "tooltipConfig",
                        "type": "TooltipConfig"
                    }
                ],
                "line": 21,
                "jsdoctags": [
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "elementRef",
                        "type": "ElementRef",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "tooltipConfig",
                        "type": "TooltipConfig",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"tooltip-container__content\">\n  <ng-content></ng-content>\n</div>\n"
        },
        {
            "name": "TooltipDemoComponent",
            "id": "component-TooltipDemoComponent-6fa7894f346537e0c10aa94b7ccc0cdd",
            "file": "src/app/demo/tooltip/tooltip-demo/tooltip-demo.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-tooltip-demo",
            "styleUrls": [
                "./tooltip-demo.component.sass"
            ],
            "styles": [],
            "templateUrl": [
                "./tooltip-demo.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "value",
                    "defaultValue": "0",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 11
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-tooltip-demo',\n  templateUrl: './tooltip-demo.component.html',\n  styleUrls: ['./tooltip-demo.component.sass']\n})\nexport class TooltipDemoComponent implements OnInit {\n  value = 0;\n\n  ngOnInit() {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "\\:host\n  pre\n    background: lightyellow\n    border-radius: 3px\n    box-shadow: inset 0px 0px 1px 1px black\n    padding: 10px\n    font-size: 12px",
                    "styleUrl": "./tooltip-demo.component.sass"
                }
            ],
            "stylesData": "",
            "implements": [
                "OnInit"
            ],
            "templateData": "<h1> Tooltip </h1>\n\n<button (click)=\"value = value + 1\">\n  Increment\n  <ng-template iwTooltip>\n    Click to go from {{value}} to {{value+1}}\n  </ng-template>\n</button>\n\n<button *ngIf=\"value > 0\" (click)=\"value = 0\">\n  Reset\n  <ng-template iwTooltip>\n    Reset to 0\n  </ng-template>\n</button>\n\n<button *ngFor=\"let t of [1,2,3]\" (click)=\"value = t\">\n  Set to {{t}}\n  <ng-template iwTooltip>\n    Set to {{t}}\n  </ng-template>\n</button>\n\n<h2>Custom class</h2>\n<button>\n  Custom class\n  <ng-template iwTooltip containerClass=\"custom-tooltip-container\">\n    Set to {{t}}\n  </ng-template>\n</button>\n\n<h2>Horizontal</h2>\n<button>\n  horizontal\n  <ng-template iwTooltip containerClass=\"custom-tooltip-container\" [horizontal]=\"true\">\n    horizontal\n  </ng-template>\n</button>\n\n<h2>Delay (1 sec)</h2>\n<button>\n  delay\n  <ng-template iwTooltip containerClass=\"custom-tooltip-container\" [delay]=\"1000\">\n    delay\n  </ng-template>\n</button>"
        },
        {
            "name": "Tree1Component",
            "id": "component-Tree1Component-42990ceaa5c1f830e83d87641ad6a169",
            "file": "src/app/demo/tree/tree.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "styleUrls": [],
            "styles": [],
            "template": "<iw-tree [tree]=\"items\" #tree>\n  <ng-template iwTreeNodeTemplate let-node let-hasChildren=\"hasChildren\">\n    {{node.data}} <button *ngIf=\"hasChildren\" (click)=\"tree.toggleExpand(node)\">toggle</button>\n  </ng-template>\n</iw-tree>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "items",
                    "defaultValue": "[{\n    data: 'Node #1',\n    children: [{\n      data: 'Node #1.1',\n      children: [{\n        data: 'Node #1.1.1'\n      }, {\n        data: 'Node #1.1.2'\n      }, {\n        data: 'Node #1.1.3'\n      }]\n    }, {\n      data: 'Node #1.2',\n      children: [{\n        data: 'Node #1.2.1'\n      }, {\n        data: 'Node #1.2.2'\n      }, {\n        data: 'Node #1.2.3'\n      }]\n    }, {\n      data: 'Node #1.3',\n      children: [{\n        data: 'Node #1.3.1'\n      }, {\n        data: 'Node #1.3.2'\n      }, {\n        data: 'Node #1.3.3'\n      }]\n    }]\n  }]",
                    "type": "TreeItem[]",
                    "optional": false,
                    "description": "",
                    "line": 15
                }
            ],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, ViewEncapsulation } from '@angular/core';\nimport { faCaretDown, faCaretRight } from '@fortawesome/free-solid-svg-icons';\nimport { TreeComponent as UiTreeComponent, TreeItem } from '../../ui/tree/tree/tree.component';\n\n@Component({\n  template: `\n    <iw-tree [tree]=\"items\" #tree>\n      <ng-template iwTreeNodeTemplate let-node let-hasChildren=\"hasChildren\">\n        {{node.data}} <button *ngIf=\"hasChildren\" (click)=\"tree.toggleExpand(node)\">toggle</button>\n      </ng-template>\n    </iw-tree>\n  `\n})\nexport class Tree1Component {\n  items: TreeItem[] = [{\n    data: 'Node #1',\n    children: [{\n      data: 'Node #1.1',\n      children: [{\n        data: 'Node #1.1.1'\n      }, {\n        data: 'Node #1.1.2'\n      }, {\n        data: 'Node #1.1.3'\n      }]\n    }, {\n      data: 'Node #1.2',\n      children: [{\n        data: 'Node #1.2.1'\n      }, {\n        data: 'Node #1.2.2'\n      }, {\n        data: 'Node #1.2.3'\n      }]\n    }, {\n      data: 'Node #1.3',\n      children: [{\n        data: 'Node #1.3.1'\n      }, {\n        data: 'Node #1.3.2'\n      }, {\n        data: 'Node #1.3.3'\n      }]\n    }]\n  }];\n}\n\n@Component({\n  template: `\n    <iw-tree [tree]=\"items\" #tree>\n      <ng-template iwTreeNodeTemplate let-node>\n        <div tabindex=\"0\" [iwTreeItem]=\"node\">{{node.data}}</div>\n      </ng-template>\n    </iw-tree>\n  `,\n  styles: [\n    'div:focus { background: grey; }'\n  ]\n})\nexport class Tree2Component {\n  items: TreeItem[] = [{\n    data: 'Node #1',\n    children: [{\n      data: 'Node #1.1',\n      children: [{\n        data: 'Node #1.1.1'\n      }, {\n        data: 'Node #1.1.2'\n      }, {\n        data: 'Node #1.1.3'\n      }]\n    }, {\n      data: 'Node #1.2',\n      children: [{\n        data: 'Node #1.2.1'\n      }, {\n        data: 'Node #1.2.2'\n      }, {\n        data: 'Node #1.2.3'\n      }]\n    }, {\n      data: 'Node #1.3',\n      children: [{\n        data: 'Node #1.3.1'\n      }, {\n        data: 'Node #1.3.2'\n      }, {\n        data: 'Node #1.3.3'\n      }]\n    }]\n  }];\n}\n\n@Component({\n  template: `\n    <iw-tree [tree]=\"items\" [expanded]=\"expanded\" #tree>\n      <ng-template iwTreeNodeTemplate let-node>\n        <div tabindex=\"0\" [iwTreeItem]=\"node\">{{node.data}}</div>\n      </ng-template>\n    </iw-tree>\n  `,\n  styles: [\n    'div:focus { background: grey; }'\n  ]\n})\nexport class Tree3Component implements OnInit {\n  items: TreeItem[] = [{\n    data: 'Node #1',\n    children: [{\n      data: 'Node #1.1',\n      children: [{\n        data: 'Node #1.1.1'\n      }, {\n        data: 'Node #1.1.2'\n      }, {\n        data: 'Node #1.1.3'\n      }]\n    }, {\n      data: 'Node #1.2',\n      children: [{\n        data: 'Node #1.2.1'\n      }, {\n        data: 'Node #1.2.2'\n      }, {\n        data: 'Node #1.2.3'\n      }]\n    }, {\n      data: 'Node #1.3',\n      children: [{\n        data: 'Node #1.3.1'\n      }, {\n        data: 'Node #1.3.2'\n      }, {\n        data: 'Node #1.3.3'\n      }]\n    }]\n  }];\n  expanded: TreeItem[] = [];\n\n  ngOnInit() {\n    this.expanded = [\n      this.items[0],\n      this.items[0].children[1]\n    ];\n  }\n}\n\n@Component({\n  selector: 'app-tree',\n  templateUrl: './tree.component.html',\n  styleUrls: ['./tree.component.sass'],\n  encapsulation: ViewEncapsulation.None\n})\nexport class TreeDemoComponent implements OnInit {\n  caretRight = faCaretRight;\n  caretDown = faCaretDown;\n  demo1 = Tree1Component;\n  demo2 = Tree2Component;\n  demo3 = Tree3Component;\n\n  tree: TreeItem[] = [{\n    data: {\n      label: '1',\n      routerLink: [],\n      queryParams: {\n        truc: 1\n      }\n    },\n    children: [{\n      data: {\n        label: '2',\n        routerLink: [],\n        queryParams: {\n          truc: 2\n        },\n      },\n      children: [{\n        data: {\n          label: '2',\n          routerLink: [],\n          queryParams: {\n            truc: 2\n          }\n        }\n      }, {\n        data: {\n          label: '3',\n          routerLink: [],\n          queryParams: {\n            truc: 3\n          }\n        }\n      }]\n    }, {\n      data: {\n        label: '3',\n        routerLink: [],\n        queryParams: {\n          truc: 3\n        }\n      }\n    }]\n  }, {\n    data: {\n      label: '1',\n      routerLink: [],\n      queryParams: {\n        truc: 1\n      }\n    },\n    children: [{\n      data: {\n        label: '2',\n        routerLink: [],\n        queryParams: {\n          truc: 2\n        }\n      }\n    }, {\n      data: {\n        label: '3',\n        routerLink: [],\n        queryParams: {\n          truc: 3\n        }\n      }\n    }]\n  }];\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n  toggleExpand(tree: UiTreeComponent, item: TreeItem, $event: MouseEvent) {\n    $event.stopPropagation();\n    $event.preventDefault();\n    $event.stopImmediatePropagation();\n    tree.toggleExpand(item);\n  }\n\n  getLinkStyle(depth: number) {\n    return { padding: `0 ${depth * 20}px` };\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ""
        },
        {
            "name": "Tree2Component",
            "id": "component-Tree2Component-42990ceaa5c1f830e83d87641ad6a169",
            "file": "src/app/demo/tree/tree.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "styleUrls": [],
            "styles": [
                "div:focus { background: grey; }"
            ],
            "template": "<iw-tree [tree]=\"items\" #tree>\n  <ng-template iwTreeNodeTemplate let-node>\n    <div tabindex=\"0\" [iwTreeItem]=\"node\">{{node.data}}</div>\n  </ng-template>\n</iw-tree>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "items",
                    "defaultValue": "[{\n    data: 'Node #1',\n    children: [{\n      data: 'Node #1.1',\n      children: [{\n        data: 'Node #1.1.1'\n      }, {\n        data: 'Node #1.1.2'\n      }, {\n        data: 'Node #1.1.3'\n      }]\n    }, {\n      data: 'Node #1.2',\n      children: [{\n        data: 'Node #1.2.1'\n      }, {\n        data: 'Node #1.2.2'\n      }, {\n        data: 'Node #1.2.3'\n      }]\n    }, {\n      data: 'Node #1.3',\n      children: [{\n        data: 'Node #1.3.1'\n      }, {\n        data: 'Node #1.3.2'\n      }, {\n        data: 'Node #1.3.3'\n      }]\n    }]\n  }]",
                    "type": "TreeItem[]",
                    "optional": false,
                    "description": "",
                    "line": 61
                }
            ],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, ViewEncapsulation } from '@angular/core';\nimport { faCaretDown, faCaretRight } from '@fortawesome/free-solid-svg-icons';\nimport { TreeComponent as UiTreeComponent, TreeItem } from '../../ui/tree/tree/tree.component';\n\n@Component({\n  template: `\n    <iw-tree [tree]=\"items\" #tree>\n      <ng-template iwTreeNodeTemplate let-node let-hasChildren=\"hasChildren\">\n        {{node.data}} <button *ngIf=\"hasChildren\" (click)=\"tree.toggleExpand(node)\">toggle</button>\n      </ng-template>\n    </iw-tree>\n  `\n})\nexport class Tree1Component {\n  items: TreeItem[] = [{\n    data: 'Node #1',\n    children: [{\n      data: 'Node #1.1',\n      children: [{\n        data: 'Node #1.1.1'\n      }, {\n        data: 'Node #1.1.2'\n      }, {\n        data: 'Node #1.1.3'\n      }]\n    }, {\n      data: 'Node #1.2',\n      children: [{\n        data: 'Node #1.2.1'\n      }, {\n        data: 'Node #1.2.2'\n      }, {\n        data: 'Node #1.2.3'\n      }]\n    }, {\n      data: 'Node #1.3',\n      children: [{\n        data: 'Node #1.3.1'\n      }, {\n        data: 'Node #1.3.2'\n      }, {\n        data: 'Node #1.3.3'\n      }]\n    }]\n  }];\n}\n\n@Component({\n  template: `\n    <iw-tree [tree]=\"items\" #tree>\n      <ng-template iwTreeNodeTemplate let-node>\n        <div tabindex=\"0\" [iwTreeItem]=\"node\">{{node.data}}</div>\n      </ng-template>\n    </iw-tree>\n  `,\n  styles: [\n    'div:focus { background: grey; }'\n  ]\n})\nexport class Tree2Component {\n  items: TreeItem[] = [{\n    data: 'Node #1',\n    children: [{\n      data: 'Node #1.1',\n      children: [{\n        data: 'Node #1.1.1'\n      }, {\n        data: 'Node #1.1.2'\n      }, {\n        data: 'Node #1.1.3'\n      }]\n    }, {\n      data: 'Node #1.2',\n      children: [{\n        data: 'Node #1.2.1'\n      }, {\n        data: 'Node #1.2.2'\n      }, {\n        data: 'Node #1.2.3'\n      }]\n    }, {\n      data: 'Node #1.3',\n      children: [{\n        data: 'Node #1.3.1'\n      }, {\n        data: 'Node #1.3.2'\n      }, {\n        data: 'Node #1.3.3'\n      }]\n    }]\n  }];\n}\n\n@Component({\n  template: `\n    <iw-tree [tree]=\"items\" [expanded]=\"expanded\" #tree>\n      <ng-template iwTreeNodeTemplate let-node>\n        <div tabindex=\"0\" [iwTreeItem]=\"node\">{{node.data}}</div>\n      </ng-template>\n    </iw-tree>\n  `,\n  styles: [\n    'div:focus { background: grey; }'\n  ]\n})\nexport class Tree3Component implements OnInit {\n  items: TreeItem[] = [{\n    data: 'Node #1',\n    children: [{\n      data: 'Node #1.1',\n      children: [{\n        data: 'Node #1.1.1'\n      }, {\n        data: 'Node #1.1.2'\n      }, {\n        data: 'Node #1.1.3'\n      }]\n    }, {\n      data: 'Node #1.2',\n      children: [{\n        data: 'Node #1.2.1'\n      }, {\n        data: 'Node #1.2.2'\n      }, {\n        data: 'Node #1.2.3'\n      }]\n    }, {\n      data: 'Node #1.3',\n      children: [{\n        data: 'Node #1.3.1'\n      }, {\n        data: 'Node #1.3.2'\n      }, {\n        data: 'Node #1.3.3'\n      }]\n    }]\n  }];\n  expanded: TreeItem[] = [];\n\n  ngOnInit() {\n    this.expanded = [\n      this.items[0],\n      this.items[0].children[1]\n    ];\n  }\n}\n\n@Component({\n  selector: 'app-tree',\n  templateUrl: './tree.component.html',\n  styleUrls: ['./tree.component.sass'],\n  encapsulation: ViewEncapsulation.None\n})\nexport class TreeDemoComponent implements OnInit {\n  caretRight = faCaretRight;\n  caretDown = faCaretDown;\n  demo1 = Tree1Component;\n  demo2 = Tree2Component;\n  demo3 = Tree3Component;\n\n  tree: TreeItem[] = [{\n    data: {\n      label: '1',\n      routerLink: [],\n      queryParams: {\n        truc: 1\n      }\n    },\n    children: [{\n      data: {\n        label: '2',\n        routerLink: [],\n        queryParams: {\n          truc: 2\n        },\n      },\n      children: [{\n        data: {\n          label: '2',\n          routerLink: [],\n          queryParams: {\n            truc: 2\n          }\n        }\n      }, {\n        data: {\n          label: '3',\n          routerLink: [],\n          queryParams: {\n            truc: 3\n          }\n        }\n      }]\n    }, {\n      data: {\n        label: '3',\n        routerLink: [],\n        queryParams: {\n          truc: 3\n        }\n      }\n    }]\n  }, {\n    data: {\n      label: '1',\n      routerLink: [],\n      queryParams: {\n        truc: 1\n      }\n    },\n    children: [{\n      data: {\n        label: '2',\n        routerLink: [],\n        queryParams: {\n          truc: 2\n        }\n      }\n    }, {\n      data: {\n        label: '3',\n        routerLink: [],\n        queryParams: {\n          truc: 3\n        }\n      }\n    }]\n  }];\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n  toggleExpand(tree: UiTreeComponent, item: TreeItem, $event: MouseEvent) {\n    $event.stopPropagation();\n    $event.preventDefault();\n    $event.stopImmediatePropagation();\n    tree.toggleExpand(item);\n  }\n\n  getLinkStyle(depth: number) {\n    return { padding: `0 ${depth * 20}px` };\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "div:focus { background: grey; }\n"
        },
        {
            "name": "Tree3Component",
            "id": "component-Tree3Component-42990ceaa5c1f830e83d87641ad6a169",
            "file": "src/app/demo/tree/tree.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "styleUrls": [],
            "styles": [
                "div:focus { background: grey; }"
            ],
            "template": "<iw-tree [tree]=\"items\" [expanded]=\"expanded\" #tree>\n  <ng-template iwTreeNodeTemplate let-node>\n    <div tabindex=\"0\" [iwTreeItem]=\"node\">{{node.data}}</div>\n  </ng-template>\n</iw-tree>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "expanded",
                    "defaultValue": "[]",
                    "type": "TreeItem[]",
                    "optional": false,
                    "description": "",
                    "line": 138
                },
                {
                    "name": "items",
                    "defaultValue": "[{\n    data: 'Node #1',\n    children: [{\n      data: 'Node #1.1',\n      children: [{\n        data: 'Node #1.1.1'\n      }, {\n        data: 'Node #1.1.2'\n      }, {\n        data: 'Node #1.1.3'\n      }]\n    }, {\n      data: 'Node #1.2',\n      children: [{\n        data: 'Node #1.2.1'\n      }, {\n        data: 'Node #1.2.2'\n      }, {\n        data: 'Node #1.2.3'\n      }]\n    }, {\n      data: 'Node #1.3',\n      children: [{\n        data: 'Node #1.3.1'\n      }, {\n        data: 'Node #1.3.2'\n      }, {\n        data: 'Node #1.3.3'\n      }]\n    }]\n  }]",
                    "type": "TreeItem[]",
                    "optional": false,
                    "description": "",
                    "line": 107
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 140
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, ViewEncapsulation } from '@angular/core';\nimport { faCaretDown, faCaretRight } from '@fortawesome/free-solid-svg-icons';\nimport { TreeComponent as UiTreeComponent, TreeItem } from '../../ui/tree/tree/tree.component';\n\n@Component({\n  template: `\n    <iw-tree [tree]=\"items\" #tree>\n      <ng-template iwTreeNodeTemplate let-node let-hasChildren=\"hasChildren\">\n        {{node.data}} <button *ngIf=\"hasChildren\" (click)=\"tree.toggleExpand(node)\">toggle</button>\n      </ng-template>\n    </iw-tree>\n  `\n})\nexport class Tree1Component {\n  items: TreeItem[] = [{\n    data: 'Node #1',\n    children: [{\n      data: 'Node #1.1',\n      children: [{\n        data: 'Node #1.1.1'\n      }, {\n        data: 'Node #1.1.2'\n      }, {\n        data: 'Node #1.1.3'\n      }]\n    }, {\n      data: 'Node #1.2',\n      children: [{\n        data: 'Node #1.2.1'\n      }, {\n        data: 'Node #1.2.2'\n      }, {\n        data: 'Node #1.2.3'\n      }]\n    }, {\n      data: 'Node #1.3',\n      children: [{\n        data: 'Node #1.3.1'\n      }, {\n        data: 'Node #1.3.2'\n      }, {\n        data: 'Node #1.3.3'\n      }]\n    }]\n  }];\n}\n\n@Component({\n  template: `\n    <iw-tree [tree]=\"items\" #tree>\n      <ng-template iwTreeNodeTemplate let-node>\n        <div tabindex=\"0\" [iwTreeItem]=\"node\">{{node.data}}</div>\n      </ng-template>\n    </iw-tree>\n  `,\n  styles: [\n    'div:focus { background: grey; }'\n  ]\n})\nexport class Tree2Component {\n  items: TreeItem[] = [{\n    data: 'Node #1',\n    children: [{\n      data: 'Node #1.1',\n      children: [{\n        data: 'Node #1.1.1'\n      }, {\n        data: 'Node #1.1.2'\n      }, {\n        data: 'Node #1.1.3'\n      }]\n    }, {\n      data: 'Node #1.2',\n      children: [{\n        data: 'Node #1.2.1'\n      }, {\n        data: 'Node #1.2.2'\n      }, {\n        data: 'Node #1.2.3'\n      }]\n    }, {\n      data: 'Node #1.3',\n      children: [{\n        data: 'Node #1.3.1'\n      }, {\n        data: 'Node #1.3.2'\n      }, {\n        data: 'Node #1.3.3'\n      }]\n    }]\n  }];\n}\n\n@Component({\n  template: `\n    <iw-tree [tree]=\"items\" [expanded]=\"expanded\" #tree>\n      <ng-template iwTreeNodeTemplate let-node>\n        <div tabindex=\"0\" [iwTreeItem]=\"node\">{{node.data}}</div>\n      </ng-template>\n    </iw-tree>\n  `,\n  styles: [\n    'div:focus { background: grey; }'\n  ]\n})\nexport class Tree3Component implements OnInit {\n  items: TreeItem[] = [{\n    data: 'Node #1',\n    children: [{\n      data: 'Node #1.1',\n      children: [{\n        data: 'Node #1.1.1'\n      }, {\n        data: 'Node #1.1.2'\n      }, {\n        data: 'Node #1.1.3'\n      }]\n    }, {\n      data: 'Node #1.2',\n      children: [{\n        data: 'Node #1.2.1'\n      }, {\n        data: 'Node #1.2.2'\n      }, {\n        data: 'Node #1.2.3'\n      }]\n    }, {\n      data: 'Node #1.3',\n      children: [{\n        data: 'Node #1.3.1'\n      }, {\n        data: 'Node #1.3.2'\n      }, {\n        data: 'Node #1.3.3'\n      }]\n    }]\n  }];\n  expanded: TreeItem[] = [];\n\n  ngOnInit() {\n    this.expanded = [\n      this.items[0],\n      this.items[0].children[1]\n    ];\n  }\n}\n\n@Component({\n  selector: 'app-tree',\n  templateUrl: './tree.component.html',\n  styleUrls: ['./tree.component.sass'],\n  encapsulation: ViewEncapsulation.None\n})\nexport class TreeDemoComponent implements OnInit {\n  caretRight = faCaretRight;\n  caretDown = faCaretDown;\n  demo1 = Tree1Component;\n  demo2 = Tree2Component;\n  demo3 = Tree3Component;\n\n  tree: TreeItem[] = [{\n    data: {\n      label: '1',\n      routerLink: [],\n      queryParams: {\n        truc: 1\n      }\n    },\n    children: [{\n      data: {\n        label: '2',\n        routerLink: [],\n        queryParams: {\n          truc: 2\n        },\n      },\n      children: [{\n        data: {\n          label: '2',\n          routerLink: [],\n          queryParams: {\n            truc: 2\n          }\n        }\n      }, {\n        data: {\n          label: '3',\n          routerLink: [],\n          queryParams: {\n            truc: 3\n          }\n        }\n      }]\n    }, {\n      data: {\n        label: '3',\n        routerLink: [],\n        queryParams: {\n          truc: 3\n        }\n      }\n    }]\n  }, {\n    data: {\n      label: '1',\n      routerLink: [],\n      queryParams: {\n        truc: 1\n      }\n    },\n    children: [{\n      data: {\n        label: '2',\n        routerLink: [],\n        queryParams: {\n          truc: 2\n        }\n      }\n    }, {\n      data: {\n        label: '3',\n        routerLink: [],\n        queryParams: {\n          truc: 3\n        }\n      }\n    }]\n  }];\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n  toggleExpand(tree: UiTreeComponent, item: TreeItem, $event: MouseEvent) {\n    $event.stopPropagation();\n    $event.preventDefault();\n    $event.stopImmediatePropagation();\n    tree.toggleExpand(item);\n  }\n\n  getLinkStyle(depth: number) {\n    return { padding: `0 ${depth * 20}px` };\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "div:focus { background: grey; }\n",
            "implements": [
                "OnInit"
            ]
        },
        {
            "name": "TreeComponent",
            "id": "component-TreeComponent-a587e83a8b2903380b120d3da5d23847",
            "file": "src/app/ui/tree/tree/tree.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "iw-tree",
            "styleUrls": [
                "./tree.component.sass"
            ],
            "styles": [],
            "templateUrl": [
                "./tree.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "expanded",
                    "defaultValue": "[]",
                    "description": "<p>The expanded nodes: their children will be displayed.</p>\n",
                    "line": 37,
                    "type": "TreeItem[]"
                },
                {
                    "name": "tree",
                    "description": "<p>The tree input to render. Use the <code>TreeItem</code> type definition.</p>\n",
                    "line": 26,
                    "type": "[]"
                }
            ],
            "outputsClass": [
                {
                    "name": "expand",
                    "defaultValue": "new EventEmitter<TreeItem[]>()",
                    "description": "<p>Event that is emitted when the set of expanded nodes changes.</p>\n",
                    "line": 43,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "__tree",
                    "defaultValue": "[]",
                    "type": "TreeItem[]",
                    "optional": false,
                    "description": "",
                    "line": 48,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "focusEvent",
                    "defaultValue": "new Subject<TreeItem>()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 45
                },
                {
                    "name": "nodeTemplate",
                    "type": "TemplateRef<any>",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "parentMap",
                    "defaultValue": "new Map<TreeItem, TreeItem>()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 46
                }
            ],
            "methodsClass": [
                {
                    "name": "collapseItem",
                    "args": [
                        {
                            "name": "item",
                            "type": "TreeItem"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 96,
                    "description": "<p>Collapse the item: hide its children.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 2273,
                                "end": 2277,
                                "flags": 0,
                                "escapedText": "item"
                            },
                            "type": "TreeItem",
                            "tagName": {
                                "pos": 2267,
                                "end": 2272,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>the item</p>\n"
                        }
                    ]
                },
                {
                    "name": "expandItem",
                    "args": [
                        {
                            "name": "item",
                            "type": "TreeItem"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 85,
                    "description": "<p>Expand the item: display its children.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 2049,
                                "end": 2053,
                                "flags": 0,
                                "escapedText": "item"
                            },
                            "type": "TreeItem",
                            "tagName": {
                                "pos": 2043,
                                "end": 2048,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>the item</p>\n"
                        }
                    ]
                },
                {
                    "name": "hasChildren",
                    "args": [
                        {
                            "name": "item",
                            "type": "TreeItem"
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 54,
                    "description": "<p>Return <code>true</code> if the item has children, <code>false</code> otherwise.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1389,
                                "end": 1393,
                                "flags": 0,
                                "escapedText": "item"
                            },
                            "type": "TreeItem",
                            "tagName": {
                                "pos": 1383,
                                "end": 1388,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>the item</p>\n"
                        }
                    ]
                },
                {
                    "name": "isExpanded",
                    "args": [
                        {
                            "name": "item",
                            "type": "TreeItem"
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 62,
                    "description": "<p>Return <code>true</code> if the item is expanded, <code>false</code> otherwise.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1590,
                                "end": 1594,
                                "flags": 0,
                                "escapedText": "item"
                            },
                            "type": "TreeItem",
                            "tagName": {
                                "pos": 1584,
                                "end": 1589,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>the item</p>\n"
                        }
                    ]
                },
                {
                    "name": "toggleExpand",
                    "args": [
                        {
                            "name": "item",
                            "type": "TreeItem"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 70,
                    "description": "<p>Toggle the expanded state of the item.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1762,
                                "end": 1766,
                                "flags": 0,
                                "escapedText": "item"
                            },
                            "type": "TreeItem",
                            "tagName": {
                                "pos": 1756,
                                "end": 1761,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>the item</p>\n"
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "<p>This component renders a tree of DOM elements based on the provided <code>tree</code> input.\nIt does nothing else than rendering. You have to provide a template for the node.</p>\n<div><pre class=\"line-numbers\"><code class=\"language-ts\"> import { TreeModule } from &#39;iwerk-angular-ui&#39;;</code></pre></div>",
            "type": "component",
            "sourceCode": "import { Component, Input, Directive, HostListener, ElementRef, OnInit, OnDestroy, Output, EventEmitter, TemplateRef } from '@angular/core';\nimport { Subject, Subscription } from 'rxjs';\nimport { filter } from 'rxjs/operators';\n\nexport interface TreeItem {\n  data: any;\n  children?: TreeItem[];\n}\n\n/**\n * This component renders a tree of DOM elements based on the provided `tree` input.\n * It does nothing else than rendering. You have to provide a template for the node.\n ```ts\n import { TreeModule } from 'iwerk-angular-ui';\n ```\n */\n@Component({\n  selector: 'iw-tree',\n  templateUrl: './tree.component.html',\n  styleUrls: ['./tree.component.sass']\n})\nexport class TreeComponent {\n  /**\n   * The tree input to render. Use the `TreeItem` type definition.\n   */\n  @Input() set tree(v: TreeItem[]) {\n    this.__tree = v;\n    this.updateParentMap();\n  }\n  get tree(): TreeItem[] {\n    return this.__tree;\n  }\n\n  /**\n   * The expanded nodes: their children will be displayed.\n   */\n  @Input() expanded: TreeItem[] = [];\n  nodeTemplate: TemplateRef<any>;\n\n  /**\n   * Event that is emitted when the set of expanded nodes changes.\n   */\n  @Output() expand = new EventEmitter<TreeItem[]>();\n\n  focusEvent = new Subject<TreeItem>();\n  parentMap = new Map<TreeItem, TreeItem>();\n\n  private __tree: TreeItem[] = [];\n\n  /**\n   * Return `true` if the item has children, `false` otherwise.\n   * @param item the item\n   */\n  hasChildren(item: TreeItem): boolean {\n    return item.children && item.children.length > 0;\n  }\n\n  /**\n   * Return `true` if the item is expanded, `false` otherwise.\n   * @param item the item\n   */\n  isExpanded(item: TreeItem): boolean {\n    return this.expanded.indexOf(item) > -1;\n  }\n\n  /**\n   * Toggle the expanded state of the item.\n   * @param item the item\n   */\n  toggleExpand(item: TreeItem) {\n    if (!this.hasChildren(item)) {\n      return;\n    }\n    if (this.isExpanded(item)) {\n      this.collapseItem(item);\n    } else {\n      this.expandItem(item);\n    }\n  }\n\n  /**\n   * Expand the item: display its children.\n   * @param item the item\n   */\n  expandItem(item: TreeItem) {\n    if (!this.hasChildren(item)) {\n      return;\n    }\n    this.setExpanded(this.expanded.concat([item]));\n  }\n\n  /**\n   * Collapse the item: hide its children.\n   * @param item the item\n   */\n  collapseItem(item: TreeItem) {\n    this.setExpanded(this.expanded.filter(e => e !== item));\n  }\n\n  /**\n   * @ignore\n   */\n  sendFocusEvent(item: TreeItem) {\n    this.focusEvent.next(item);\n  }\n\n  /**\n   * @ignore\n   */\n  private setExpanded(v: TreeItem[]) {\n    this.expanded = v;\n    this.expand.emit(v);\n  }\n\n  /**\n   * @ignore\n   */\n  private updateParentMap() {\n    this.parentMap = new Map();\n    const aux = (parent: TreeItem, nodes: TreeItem[]) => {\n      nodes.forEach(n => {\n        this.parentMap.set(n, parent);\n        aux(n, n.children || []);\n      });\n    };\n    aux(undefined, this.__tree);\n  }\n}\n\n@Directive({\n  selector: '[iwTreeNodeTemplate]'\n})\nexport class TreeNodeTemplateDirective {\n  constructor(public templateRef: TemplateRef<any>, private menu: TreeComponent) {\n    this.menu.nodeTemplate = this.templateRef;\n  }\n}\n\n@Directive({\n  selector: '[iwTreeItem]'\n})\nexport class TreeItemDirective implements OnInit, OnDestroy {\n  @Input('iwTreeItem') item: TreeItem;\n\n  private subscription = new Subscription;\n\n  constructor(\n    private menu: TreeComponent,\n    private elementRef: ElementRef\n  ) {\n  }\n\n  ngOnInit() {\n    this.subscription.add(this.menu.focusEvent\n      .pipe(filter(e => e === this.item))\n      .subscribe(e => {\n        this.elementRef.nativeElement.focus();\n      }));\n  }\n\n  ngOnDestroy() {\n    this.subscription.unsubscribe();\n  }\n\n  @HostListener('keydown', ['$event'])\n  keydown($event: KeyboardEvent) {\n    switch ($event.keyCode) {\n      case 39:\n        this.goRight($event); break;\n      case 40:\n        this.goDown($event); break;\n      case 38:\n        this.goUp($event); break;\n      case 37:\n        this.goLeft($event); break;\n    }\n  }\n\n  private goLeft($event: KeyboardEvent) {\n    $event.preventDefault();\n    if (this.menu.isExpanded(this.item)) {\n      return this.menu.collapseItem(this.item);\n    }\n    const parent = this.menu.parentMap.get(this.item);\n    if (parent) {\n      this.menu.sendFocusEvent(parent);\n    } else {\n      this.goUp($event);\n    }\n  }\n\n  private goRight($event: KeyboardEvent) {\n    $event.preventDefault();\n    if (!this.menu.hasChildren(this.item)) {\n      return this.goDown($event);\n    }\n    if (!this.menu.isExpanded(this.item)) {\n      return this.menu.expandItem(this.item);\n    }\n    this.menu.sendFocusEvent(this.item.children[0]);\n  }\n\n  private goDown($event: KeyboardEvent) {\n    $event.preventDefault();\n    if (\n      this.menu.hasChildren(this.item) &&\n      this.menu.isExpanded(this.item)\n    ) {\n      return this.menu.sendFocusEvent(this.item.children[0]);\n    }\n    const selectAfter = (item: TreeItem) => {\n      const parent = this.menu.parentMap.get(item);\n      const children = parent ? parent.children : this.menu.tree;\n      const index = children.indexOf(item);\n      const next = children[index + 1];\n      if (next) {\n        this.menu.sendFocusEvent(next);\n      } else if (parent) {\n        selectAfter(parent);\n      }\n    };\n    selectAfter(this.item);\n  }\n\n  private goUp($event: KeyboardEvent) {\n    $event.preventDefault();\n    const selectLastPossible = (item: TreeItem) => {\n      if (this.menu.hasChildren(item) && this.menu.isExpanded(item)) {\n        selectLastPossible(item.children[item.children.length - 1]);\n      } else {\n        this.menu.sendFocusEvent(item);\n      }\n    };\n    const selectBefore = (item: TreeItem) => {\n      const parent = this.menu.parentMap.get(item);\n      const children = parent ? parent.children : this.menu.tree;\n      const index = children.indexOf(item);\n      const previous = children[index - 1];\n      if (previous) {\n        selectLastPossible(previous);\n      } else if (parent) {\n        this.menu.sendFocusEvent(parent);\n      }\n    };\n    selectBefore(this.item);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "\\:host\n  display: block",
                    "styleUrl": "./tree.component.sass"
                }
            ],
            "stylesData": "",
            "accessors": {
                "tree": {
                    "name": "tree",
                    "setSignature": {
                        "name": "tree",
                        "type": "void",
                        "args": [
                            {
                                "name": "v",
                                "type": "[]"
                            }
                        ],
                        "returnType": "void",
                        "line": 26,
                        "description": "<p>The tree input to render. Use the <code>TreeItem</code> type definition.</p>\n",
                        "jsdoctags": [
                            {
                                "name": "v",
                                "type": "[]",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "tree",
                        "type": "[]",
                        "returnType": "TreeItem[]",
                        "line": 30
                    }
                }
            },
            "templateData": "<ng-container *ngTemplateOutlet=\"treeTemplate; context: { $implicit: tree, depth: 0 }\"></ng-container>\n\n<ng-template #treeTemplate let-nodes let-depth=\"depth\">\n  <ol>\n    <li *ngFor=\"let node of nodes\">\n      <ng-container *ngTemplateOutlet=\"nodeTemplate; context: { $implicit: node, data: node.data, depth: depth, hasChildren: hasChildren(node) }\"></ng-container>\n      \n      <ng-template [ngIf]=\"hasChildren(node) && isExpanded(node)\">\n        <ng-container *ngTemplateOutlet=\"treeTemplate; context: { $implicit: node.children, depth: depth + 1 }\"></ng-container>\n      </ng-template>\n    </li>\n  </ol>\n</ng-template>\n"
        },
        {
            "name": "TreeDemoComponent",
            "id": "component-TreeDemoComponent-42990ceaa5c1f830e83d87641ad6a169",
            "file": "src/app/demo/tree/tree.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-tree",
            "styleUrls": [
                "./tree.component.sass"
            ],
            "styles": [],
            "templateUrl": [
                "./tree.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "caretDown",
                    "defaultValue": "faCaretDown",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 156
                },
                {
                    "name": "caretRight",
                    "defaultValue": "faCaretRight",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 155
                },
                {
                    "name": "demo1",
                    "defaultValue": "Tree1Component",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 157
                },
                {
                    "name": "demo2",
                    "defaultValue": "Tree2Component",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 158
                },
                {
                    "name": "demo3",
                    "defaultValue": "Tree3Component",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 159
                },
                {
                    "name": "tree",
                    "defaultValue": "[{\n    data: {\n      label: '1',\n      routerLink: [],\n      queryParams: {\n        truc: 1\n      }\n    },\n    children: [{\n      data: {\n        label: '2',\n        routerLink: [],\n        queryParams: {\n          truc: 2\n        },\n      },\n      children: [{\n        data: {\n          label: '2',\n          routerLink: [],\n          queryParams: {\n            truc: 2\n          }\n        }\n      }, {\n        data: {\n          label: '3',\n          routerLink: [],\n          queryParams: {\n            truc: 3\n          }\n        }\n      }]\n    }, {\n      data: {\n        label: '3',\n        routerLink: [],\n        queryParams: {\n          truc: 3\n        }\n      }\n    }]\n  }, {\n    data: {\n      label: '1',\n      routerLink: [],\n      queryParams: {\n        truc: 1\n      }\n    },\n    children: [{\n      data: {\n        label: '2',\n        routerLink: [],\n        queryParams: {\n          truc: 2\n        }\n      }\n    }, {\n      data: {\n        label: '3',\n        routerLink: [],\n        queryParams: {\n          truc: 3\n        }\n      }\n    }]\n  }]",
                    "type": "TreeItem[]",
                    "optional": false,
                    "description": "",
                    "line": 161
                }
            ],
            "methodsClass": [
                {
                    "name": "getLinkStyle",
                    "args": [
                        {
                            "name": "depth",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "{ padding: string; }",
                    "typeParameters": [],
                    "line": 242,
                    "jsdoctags": [
                        {
                            "name": "depth",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 232
                },
                {
                    "name": "toggleExpand",
                    "args": [
                        {
                            "name": "tree",
                            "type": "UiTreeComponent"
                        },
                        {
                            "name": "item",
                            "type": "TreeItem"
                        },
                        {
                            "name": "$event",
                            "type": "MouseEvent"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 235,
                    "jsdoctags": [
                        {
                            "name": "tree",
                            "type": "UiTreeComponent",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "item",
                            "type": "TreeItem",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "$event",
                            "type": "MouseEvent",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, ViewEncapsulation } from '@angular/core';\nimport { faCaretDown, faCaretRight } from '@fortawesome/free-solid-svg-icons';\nimport { TreeComponent as UiTreeComponent, TreeItem } from '../../ui/tree/tree/tree.component';\n\n@Component({\n  template: `\n    <iw-tree [tree]=\"items\" #tree>\n      <ng-template iwTreeNodeTemplate let-node let-hasChildren=\"hasChildren\">\n        {{node.data}} <button *ngIf=\"hasChildren\" (click)=\"tree.toggleExpand(node)\">toggle</button>\n      </ng-template>\n    </iw-tree>\n  `\n})\nexport class Tree1Component {\n  items: TreeItem[] = [{\n    data: 'Node #1',\n    children: [{\n      data: 'Node #1.1',\n      children: [{\n        data: 'Node #1.1.1'\n      }, {\n        data: 'Node #1.1.2'\n      }, {\n        data: 'Node #1.1.3'\n      }]\n    }, {\n      data: 'Node #1.2',\n      children: [{\n        data: 'Node #1.2.1'\n      }, {\n        data: 'Node #1.2.2'\n      }, {\n        data: 'Node #1.2.3'\n      }]\n    }, {\n      data: 'Node #1.3',\n      children: [{\n        data: 'Node #1.3.1'\n      }, {\n        data: 'Node #1.3.2'\n      }, {\n        data: 'Node #1.3.3'\n      }]\n    }]\n  }];\n}\n\n@Component({\n  template: `\n    <iw-tree [tree]=\"items\" #tree>\n      <ng-template iwTreeNodeTemplate let-node>\n        <div tabindex=\"0\" [iwTreeItem]=\"node\">{{node.data}}</div>\n      </ng-template>\n    </iw-tree>\n  `,\n  styles: [\n    'div:focus { background: grey; }'\n  ]\n})\nexport class Tree2Component {\n  items: TreeItem[] = [{\n    data: 'Node #1',\n    children: [{\n      data: 'Node #1.1',\n      children: [{\n        data: 'Node #1.1.1'\n      }, {\n        data: 'Node #1.1.2'\n      }, {\n        data: 'Node #1.1.3'\n      }]\n    }, {\n      data: 'Node #1.2',\n      children: [{\n        data: 'Node #1.2.1'\n      }, {\n        data: 'Node #1.2.2'\n      }, {\n        data: 'Node #1.2.3'\n      }]\n    }, {\n      data: 'Node #1.3',\n      children: [{\n        data: 'Node #1.3.1'\n      }, {\n        data: 'Node #1.3.2'\n      }, {\n        data: 'Node #1.3.3'\n      }]\n    }]\n  }];\n}\n\n@Component({\n  template: `\n    <iw-tree [tree]=\"items\" [expanded]=\"expanded\" #tree>\n      <ng-template iwTreeNodeTemplate let-node>\n        <div tabindex=\"0\" [iwTreeItem]=\"node\">{{node.data}}</div>\n      </ng-template>\n    </iw-tree>\n  `,\n  styles: [\n    'div:focus { background: grey; }'\n  ]\n})\nexport class Tree3Component implements OnInit {\n  items: TreeItem[] = [{\n    data: 'Node #1',\n    children: [{\n      data: 'Node #1.1',\n      children: [{\n        data: 'Node #1.1.1'\n      }, {\n        data: 'Node #1.1.2'\n      }, {\n        data: 'Node #1.1.3'\n      }]\n    }, {\n      data: 'Node #1.2',\n      children: [{\n        data: 'Node #1.2.1'\n      }, {\n        data: 'Node #1.2.2'\n      }, {\n        data: 'Node #1.2.3'\n      }]\n    }, {\n      data: 'Node #1.3',\n      children: [{\n        data: 'Node #1.3.1'\n      }, {\n        data: 'Node #1.3.2'\n      }, {\n        data: 'Node #1.3.3'\n      }]\n    }]\n  }];\n  expanded: TreeItem[] = [];\n\n  ngOnInit() {\n    this.expanded = [\n      this.items[0],\n      this.items[0].children[1]\n    ];\n  }\n}\n\n@Component({\n  selector: 'app-tree',\n  templateUrl: './tree.component.html',\n  styleUrls: ['./tree.component.sass'],\n  encapsulation: ViewEncapsulation.None\n})\nexport class TreeDemoComponent implements OnInit {\n  caretRight = faCaretRight;\n  caretDown = faCaretDown;\n  demo1 = Tree1Component;\n  demo2 = Tree2Component;\n  demo3 = Tree3Component;\n\n  tree: TreeItem[] = [{\n    data: {\n      label: '1',\n      routerLink: [],\n      queryParams: {\n        truc: 1\n      }\n    },\n    children: [{\n      data: {\n        label: '2',\n        routerLink: [],\n        queryParams: {\n          truc: 2\n        },\n      },\n      children: [{\n        data: {\n          label: '2',\n          routerLink: [],\n          queryParams: {\n            truc: 2\n          }\n        }\n      }, {\n        data: {\n          label: '3',\n          routerLink: [],\n          queryParams: {\n            truc: 3\n          }\n        }\n      }]\n    }, {\n      data: {\n        label: '3',\n        routerLink: [],\n        queryParams: {\n          truc: 3\n        }\n      }\n    }]\n  }, {\n    data: {\n      label: '1',\n      routerLink: [],\n      queryParams: {\n        truc: 1\n      }\n    },\n    children: [{\n      data: {\n        label: '2',\n        routerLink: [],\n        queryParams: {\n          truc: 2\n        }\n      }\n    }, {\n      data: {\n        label: '3',\n        routerLink: [],\n        queryParams: {\n          truc: 3\n        }\n      }\n    }]\n  }];\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n  toggleExpand(tree: UiTreeComponent, item: TreeItem, $event: MouseEvent) {\n    $event.stopPropagation();\n    $event.preventDefault();\n    $event.stopImmediatePropagation();\n    tree.toggleExpand(item);\n  }\n\n  getLinkStyle(depth: number) {\n    return { padding: `0 ${depth * 20}px` };\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "\na\n  color: black\n\na\n  line-height: 40px\n  height: 40px\n  padding: 0\n  display: block\n  text-decoration: none\n\n  &:visited\n    color: black\n  \n  &.routes-menu__link--active\n    color: blue\n    font-weight: bold\n\n  &:hover, &:focus\n    border: 1px solid red\n    text-decoration: none\n\n  &:focus\n    background: grey",
                    "styleUrl": "./tree.component.sass"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 228
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<h1>Tree Component</h1>\n\n<h2>Simple tree</h2>\n\n<ng-container [ngComponentOutlet]=\"demo1\"></ng-container>\n\n<h2>Tree with Keyboard Navigation Support</h2>\n\n<ng-container [ngComponentOutlet]=\"demo2\"></ng-container>\n\n<h2>Initially Expanded Nodes</h2>\n\n<ng-container [ngComponentOutlet]=\"demo3\"></ng-container>\n\n<h2>Tree with routes</h2>\n<iw-tree #treeComponent [tree]=\"tree\">\n  <ng-template iwTreeNodeTemplate let-node let-depth=\"depth\">\n    <a [routerLink]=\"node.data.routerLink\"\n      [ngStyle]=\"getLinkStyle(depth)\"\n      [queryParams]=\"node.data.queryParams\"\n      [queryParamsHandling]=\"'merge'\"\n      [routerLinkActive]=\"'active'\"\n      [iwTreeItem]=\"node\"\n      (click)=\"treeComponent.expandItem(node)\">\n      <fa-icon\n        [style.visibility]=\"treeComponent.hasChildren(node) ? 'visible' : 'hidden'\"\n        (click)=\"toggleExpand(treeComponent, node, $event)\"\n        [icon]=\"treeComponent.isExpanded(node) ? caretDown : caretRight\"\n      ></fa-icon>\n      {{node.data.label}}\n    </a>\n  </ng-template>\n</iw-tree>\n"
        },
        {
            "name": "WelcomeComponent",
            "id": "component-WelcomeComponent-cec57ee1b84bb84e4ef92a6e51859090",
            "file": "src/app/welcome/welcome.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-welcome",
            "styleUrls": [
                "./welcome.component.sass"
            ],
            "styles": [],
            "templateUrl": [
                "./welcome.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-welcome',\n  templateUrl: './welcome.component.html',\n  styleUrls: ['./welcome.component.sass']\n})\nexport class WelcomeComponent { }\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./welcome.component.sass"
                }
            ],
            "stylesData": "",
            "templateData": "<h1>Welcome!</h1>"
        }
    ],
    "modules": [
        {
            "name": "AppModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AppComponent"
                        },
                        {
                            "name": "EllipsisComponent"
                        },
                        {
                            "name": "NavigationDemoComponent"
                        },
                        {
                            "name": "SomeComponent"
                        },
                        {
                            "name": "SomeOtherComponent"
                        },
                        {
                            "name": "WelcomeComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "TreeModule"
                        },
                        {
                            "name": "UiModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "CheckboxDemoModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "CheckboxDemoComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "UiModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "CheckboxModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "CheckboxComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "CheckboxComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "DialogDemoModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "DialogComponent"
                        },
                        {
                            "name": "MyDialogComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "DialogModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "DialogModule",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "DialogService"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "DialogContainerComponent"
                        },
                        {
                            "name": "DialogDirective"
                        },
                        {
                            "name": "DialogFocusTrapDirective"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "DialogDirective"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "MovableDemoModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "CustomMoveHandleDirective"
                        },
                        {
                            "name": "MovableDemoComponent"
                        },
                        {
                            "name": "MovableDemoContent2Component"
                        },
                        {
                            "name": "MovableDemoContentComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "MovableModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "MovableModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "MovableDirective"
                        },
                        {
                            "name": "MoveHandleDirective"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "MovableDirective"
                        },
                        {
                            "name": "MoveHandleDirective"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "MultilineEllipsisModule",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "TaskRunnerService"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "MultilineEllipsisDirective"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "MultilineEllipsisDirective"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "NavigationModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "NavigationComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "NavigationComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "PopoverModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "CustomPopoverDemoComponent"
                        },
                        {
                            "name": "PopoverDemoComponent"
                        },
                        {
                            "name": "PropertyEditPopoverComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "PopoverModule",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "PopoverService"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "PopoverContainerComponent"
                        },
                        {
                            "name": "PopoverDirective"
                        },
                        {
                            "name": "PopoverScrollMaskComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "PopoverDirective"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "StateButtonModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "SbDoingDirective"
                        },
                        {
                            "name": "SbFailureDirective"
                        },
                        {
                            "name": "SbIdleDirective"
                        },
                        {
                            "name": "SbSuccessDirective"
                        },
                        {
                            "name": "StateButtonDirective"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "SbDoingDirective"
                        },
                        {
                            "name": "SbFailureDirective"
                        },
                        {
                            "name": "SbIdleDirective"
                        },
                        {
                            "name": "SbSuccessDirective"
                        },
                        {
                            "name": "StateButtonDirective"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "StatefulButtonDemoModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "StatefulButtonDemoComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "UiModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "TooltipModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "TooltipDemoComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "TooltipModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "TooltipContainerComponent"
                        },
                        {
                            "name": "TooltipDirective"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "TooltipDirective"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "TreeModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "Tree1Component"
                        },
                        {
                            "name": "Tree2Component"
                        },
                        {
                            "name": "Tree3Component"
                        },
                        {
                            "name": "TreeDemoComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "TreeModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "TreeComponent"
                        },
                        {
                            "name": "TreeItemDirective"
                        },
                        {
                            "name": "TreeNodeTemplateDirective"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "TreeComponent"
                        },
                        {
                            "name": "TreeItemDirective"
                        },
                        {
                            "name": "TreeNodeTemplateDirective"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "UiModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "CheckboxModule"
                        },
                        {
                            "name": "MultilineEllipsisModule"
                        },
                        {
                            "name": "NavigationModule"
                        },
                        {
                            "name": "PopoverModule"
                        },
                        {
                            "name": "StateButtonModule"
                        },
                        {
                            "name": "TooltipModule"
                        },
                        {
                            "name": "TreeModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "CheckboxModule"
                        },
                        {
                            "name": "MultilineEllipsisModule"
                        },
                        {
                            "name": "NavigationModule"
                        },
                        {
                            "name": "PopoverModule"
                        },
                        {
                            "name": "StateButtonModule"
                        },
                        {
                            "name": "TooltipModule"
                        },
                        {
                            "name": "TreeModule"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "config",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/demo/popover/popover.module.ts",
                "type": "PopoverConfig",
                "defaultValue": "{\n  escToClose: true,\n  clickOutsideToClose: true,\n  popoverClass: 'popover-demo-from-config'\n}"
            },
            {
                "name": "config",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/demo/tooltip/tooltip.module.ts",
                "type": "TooltipConfig",
                "defaultValue": "{\n  containerClass: 'demo-tooltip',\n  horizontal: false,\n  delay: 0,\n}"
            },
            {
                "name": "dialogConfig",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/demo/dialog-demo/dialog-demo.module.ts",
                "type": "DialogConfig",
                "defaultValue": "{\n  closeOnClickOutside: true,\n  closeOnEsc: false,\n  containerClass: 'dialog-config-demo'\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.prod.ts",
                "type": "object",
                "defaultValue": "{\n  production: true\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.ts",
                "type": "object",
                "defaultValue": "{\n  production: false\n}"
            },
            {
                "name": "IW_CHECKBOX_CONFIG",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/ui/checkbox/checkbox.config.ts",
                "type": "",
                "defaultValue": "new InjectionToken<CheckboxConfig>('iw-checkbox.config')"
            },
            {
                "name": "IW_DIALOG_CONFIG",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/ui/dialog/dialog.config.ts",
                "type": "",
                "defaultValue": "new InjectionToken<DialogConfig>('iw-dialog.config')"
            },
            {
                "name": "IW_POPOVER_CONFIG",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/ui/popover/popover.config.ts",
                "type": "",
                "defaultValue": "new InjectionToken<PopoverConfig>('iw-popover.config')"
            },
            {
                "name": "IW_TOOLTIP_CONFIG",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/ui/tooltip/tooltip.config.ts",
                "type": "",
                "defaultValue": "new InjectionToken<TooltipConfig>('iw-tooltip.config')"
            },
            {
                "name": "NavigationData",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/ui/navigation/navigation-controller.service.ts",
                "type": "",
                "defaultValue": "new InjectionToken<any>('iw-navigation.NAVIGATION_DATA')"
            }
        ],
        "functions": [
            {
                "name": "addClasses",
                "file": "src/app/ui/popover/helpers.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "element"
                    },
                    {
                        "name": "str"
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "element",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "str",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "combineOptionsAndDefaults",
                "file": "src/app/ui/popover/helpers.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "providedConfig"
                    },
                    {
                        "name": "options"
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "providedConfig",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "options",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "delay",
                "file": "src/app/demo/stateful-button/stateful-button-demo/stateful-button-demo.component.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "ts"
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "ts",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "horizontalSmartPosition",
                "file": "src/app/ui/popover/helpers.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "elements"
                    },
                    {
                        "name": "options"
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "elements",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "options",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "horizontalSmartPosition",
                "file": "src/app/ui/tooltip/helpers.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "options"
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "options",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "smartPosition",
                "file": "src/app/ui/popover/helpers.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "elements"
                    },
                    {
                        "name": "options"
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "elements",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "options",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "smartPosition",
                "file": "src/app/ui/tooltip/helpers.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "options"
                    },
                    {
                        "name": "type"
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "options",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "type",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "verticalSmartPosition",
                "file": "src/app/ui/popover/helpers.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "elements"
                    },
                    {
                        "name": "options"
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "elements",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "options",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "verticalSmartPosition",
                "file": "src/app/ui/tooltip/helpers.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "options"
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "options",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        ],
        "typealiases": [
            {
                "name": "ButtonState",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"IDLE\" | \"DOING\" | \"SUCCESS\" | \"FAILURE\"",
                "file": "src/app/ui/state-button/button-state.ts",
                "description": "",
                "kind": 168
            }
        ],
        "enumerations": [],
        "groupedVariables": {
            "src/app/demo/popover/popover.module.ts": [
                {
                    "name": "config",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/demo/popover/popover.module.ts",
                    "type": "PopoverConfig",
                    "defaultValue": "{\n  escToClose: true,\n  clickOutsideToClose: true,\n  popoverClass: 'popover-demo-from-config'\n}"
                }
            ],
            "src/app/demo/tooltip/tooltip.module.ts": [
                {
                    "name": "config",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/demo/tooltip/tooltip.module.ts",
                    "type": "TooltipConfig",
                    "defaultValue": "{\n  containerClass: 'demo-tooltip',\n  horizontal: false,\n  delay: 0,\n}"
                }
            ],
            "src/app/demo/dialog-demo/dialog-demo.module.ts": [
                {
                    "name": "dialogConfig",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/demo/dialog-demo/dialog-demo.module.ts",
                    "type": "DialogConfig",
                    "defaultValue": "{\n  closeOnClickOutside: true,\n  closeOnEsc: false,\n  containerClass: 'dialog-config-demo'\n}"
                }
            ],
            "src/environments/environment.prod.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.prod.ts",
                    "type": "object",
                    "defaultValue": "{\n  production: true\n}"
                }
            ],
            "src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.ts",
                    "type": "object",
                    "defaultValue": "{\n  production: false\n}"
                }
            ],
            "src/app/ui/checkbox/checkbox.config.ts": [
                {
                    "name": "IW_CHECKBOX_CONFIG",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/ui/checkbox/checkbox.config.ts",
                    "type": "",
                    "defaultValue": "new InjectionToken<CheckboxConfig>('iw-checkbox.config')"
                }
            ],
            "src/app/ui/dialog/dialog.config.ts": [
                {
                    "name": "IW_DIALOG_CONFIG",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/ui/dialog/dialog.config.ts",
                    "type": "",
                    "defaultValue": "new InjectionToken<DialogConfig>('iw-dialog.config')"
                }
            ],
            "src/app/ui/popover/popover.config.ts": [
                {
                    "name": "IW_POPOVER_CONFIG",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/ui/popover/popover.config.ts",
                    "type": "",
                    "defaultValue": "new InjectionToken<PopoverConfig>('iw-popover.config')"
                }
            ],
            "src/app/ui/tooltip/tooltip.config.ts": [
                {
                    "name": "IW_TOOLTIP_CONFIG",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/ui/tooltip/tooltip.config.ts",
                    "type": "",
                    "defaultValue": "new InjectionToken<TooltipConfig>('iw-tooltip.config')"
                }
            ],
            "src/app/ui/navigation/navigation-controller.service.ts": [
                {
                    "name": "NavigationData",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/ui/navigation/navigation-controller.service.ts",
                    "type": "",
                    "defaultValue": "new InjectionToken<any>('iw-navigation.NAVIGATION_DATA')"
                }
            ]
        },
        "groupedFunctions": {
            "src/app/ui/popover/helpers.ts": [
                {
                    "name": "addClasses",
                    "file": "src/app/ui/popover/helpers.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "element"
                        },
                        {
                            "name": "str"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "element",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "str",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "combineOptionsAndDefaults",
                    "file": "src/app/ui/popover/helpers.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "providedConfig"
                        },
                        {
                            "name": "options"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "providedConfig",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "horizontalSmartPosition",
                    "file": "src/app/ui/popover/helpers.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "elements"
                        },
                        {
                            "name": "options"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "elements",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "smartPosition",
                    "file": "src/app/ui/popover/helpers.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "elements"
                        },
                        {
                            "name": "options"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "elements",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "verticalSmartPosition",
                    "file": "src/app/ui/popover/helpers.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "elements"
                        },
                        {
                            "name": "options"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "elements",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/app/demo/stateful-button/stateful-button-demo/stateful-button-demo.component.ts": [
                {
                    "name": "delay",
                    "file": "src/app/demo/stateful-button/stateful-button-demo/stateful-button-demo.component.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "ts"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "ts",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/app/ui/tooltip/helpers.ts": [
                {
                    "name": "horizontalSmartPosition",
                    "file": "src/app/ui/tooltip/helpers.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "options"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "options",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "smartPosition",
                    "file": "src/app/ui/tooltip/helpers.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "options"
                        },
                        {
                            "name": "type"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "options",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "type",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "verticalSmartPosition",
                    "file": "src/app/ui/tooltip/helpers.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "options"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "options",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ]
        },
        "groupedEnumerations": {},
        "groupedTypeAliases": {
            "src/app/ui/state-button/button-state.ts": [
                {
                    "name": "ButtonState",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"IDLE\" | \"DOING\" | \"SUCCESS\" | \"FAILURE\"",
                    "file": "src/app/ui/state-button/button-state.ts",
                    "description": "",
                    "kind": 168
                }
            ]
        }
    },
    "routes": {
        "name": "<root>",
        "kind": "module",
        "className": "AppModule",
        "children": [
            {
                "kind": "component",
                "component": "WelcomeComponent",
                "path": ""
            },
            {
                "kind": "component",
                "component": "EllipsisComponent",
                "path": "ellipsis"
            },
            {
                "kind": "component",
                "component": "NavigationDemoComponent",
                "path": "navigation"
            },
            {
                "kind": "component",
                "component": "TreeDemoComponent",
                "path": "tree"
            }
        ]
    },
    "coverage": {
        "count": 5,
        "status": "low",
        "files": [
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/demo/checkbox-demo/checkbox-demo.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CheckboxDemoComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/demo/dialog-demo/dialog-demo.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "dialogConfig",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/demo/dialog-demo/dialog-demo/dialog-demo.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DialogComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/demo/dialog-demo/my-dialog/my-dialog.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MyDialogComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/demo/ellipsis/ellipsis.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "EllipsisComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/demo/movable-demo/movable-demo/movable-demo.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MovableDemoComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/demo/movable-demo/movable-demo/movable-demo.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MovableDemoContent2Component",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/demo/movable-demo/movable-demo/movable-demo.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MovableDemoContentComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/demo/movable-demo/movable-demo/movable-demo.component.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "CustomMoveHandleDirective",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/demo/navigation-demo/navigation.demo.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "NavigationDemoComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/demo/navigation-demo/navigation.demo.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SomeComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/demo/navigation-demo/navigation.demo.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SomeOtherComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/demo/navigation-demo/navigation.demo.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "NavData",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/demo/popover/custom-popover-demo/custom-popover-demo.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CustomPopoverDemoComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/demo/popover/popover-demo/popover-demo.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PopoverDemoComponent",
                "coveragePercent": 0,
                "coverageCount": "0/17",
                "status": "low"
            },
            {
                "filePath": "src/app/demo/popover/popover-demo/popover-demo.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Person",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/demo/popover/popover.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "config",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/demo/popover/property-edit-popover/property-edit-popover.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PropertyEditPopoverComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/demo/stateful-button/stateful-button-demo/stateful-button-demo.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "StatefulButtonDemoComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/demo/stateful-button/stateful-button-demo/stateful-button-demo.component.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "delay",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/demo/tooltip/tooltip-demo/tooltip-demo.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TooltipDemoComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/demo/tooltip/tooltip.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "config",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/demo/tree/tree.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "Tree1Component",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/demo/tree/tree.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "Tree2Component",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/demo/tree/tree.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "Tree3Component",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/demo/tree/tree.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TreeDemoComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/ui/checkbox/checkbox-config.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "CheckboxConfig",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/ui/checkbox/checkbox.config.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "IW_CHECKBOX_CONFIG",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/ui/checkbox/checkbox/checkbox.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CheckboxComponent",
                "coveragePercent": 31,
                "coverageCount": "5/16",
                "status": "medium"
            },
            {
                "filePath": "src/app/ui/dialog/dialog-config.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "DialogConfig",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/ui/dialog/dialog-container/dialog-container.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DialogContainerComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/ui/dialog/dialog-container/dialog-container.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "DialogOptions",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/ui/dialog/dialog-container/dialog-container.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IDialog",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/ui/dialog/dialog-focus-trap.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "DialogFocusTrapDirective",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/ui/dialog/dialog-ref.class.ts",
                "type": "class",
                "linktype": "classe",
                "name": "DialogRef",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/ui/dialog/dialog.config.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "IW_DIALOG_CONFIG",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/ui/dialog/dialog.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "DialogDirective",
                "coveragePercent": 75,
                "coverageCount": "6/8",
                "status": "good"
            },
            {
                "filePath": "src/app/ui/dialog/dialog.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "DialogService",
                "coveragePercent": 27,
                "coverageCount": "3/11",
                "status": "medium"
            },
            {
                "filePath": "src/app/ui/dialog/dialog.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IDialogService",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/ui/movable/movable.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "MovableDirective",
                "coveragePercent": 28,
                "coverageCount": "2/7",
                "status": "medium"
            },
            {
                "filePath": "src/app/ui/movable/movable.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "MovableService",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/ui/movable/move-handle.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "MoveHandleDirective",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/ui/multiline-ellipsis/multiline-ellipsis.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "MultilineEllipsisDirective",
                "coveragePercent": 30,
                "coverageCount": "3/10",
                "status": "medium"
            },
            {
                "filePath": "src/app/ui/multiline-ellipsis/task-runner.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "TaskRunnerService",
                "coveragePercent": 25,
                "coverageCount": "1/4",
                "status": "low"
            },
            {
                "filePath": "src/app/ui/navigation/navigation-controller.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "NavigationController",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/ui/navigation/navigation-controller.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "NavigationItem",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/ui/navigation/navigation-controller.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "NavigationData",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/ui/navigation/navigation/navigation.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "NavigationComponent",
                "coveragePercent": 66,
                "coverageCount": "2/3",
                "status": "good"
            },
            {
                "filePath": "src/app/ui/popover/helpers.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "addClasses",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/ui/popover/helpers.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "combineOptionsAndDefaults",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/ui/popover/helpers.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "horizontalSmartPosition",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/ui/popover/helpers.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "smartPosition",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/ui/popover/helpers.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "verticalSmartPosition",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/ui/popover/popover-config.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "PopoverConfig",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/ui/popover/popover-container/popover-container.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PopoverContainerComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/ui/popover/popover-options.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "PopoverOptions",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/ui/popover/popover-position.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "PopoverPosition",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/ui/popover/popover-scroll-mask/popover-scroll-mask.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PopoverScrollMaskComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/ui/popover/popover.config.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "IW_POPOVER_CONFIG",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/ui/popover/popover.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "PopoverDirective",
                "coveragePercent": 84,
                "coverageCount": "11/13",
                "status": "very-good"
            },
            {
                "filePath": "src/app/ui/popover/popover.service.ts",
                "type": "class",
                "linktype": "classe",
                "name": "PopoverImpl",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/ui/popover/popover.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "Popover",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/ui/popover/popover.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "PopoverService",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/ui/popover/popover.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IPopover",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/ui/state-button/state-button-directive.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IStateButtonDirective",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/ui/state-button/state-button.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "SbDoingDirective",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/ui/state-button/state-button.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "SbFailureDirective",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/ui/state-button/state-button.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "SbIdleDirective",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/ui/state-button/state-button.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "SbSuccessDirective",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/ui/state-button/state-button.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "StateButtonDirective",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/ui/state-button/state-template.class.ts",
                "type": "class",
                "linktype": "classe",
                "name": "StateTemplate",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/ui/tooltip/helpers.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "horizontalSmartPosition",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/ui/tooltip/helpers.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "smartPosition",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/ui/tooltip/helpers.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "verticalSmartPosition",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/ui/tooltip/tooltip-config.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "TooltipConfig",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/ui/tooltip/tooltip-container/tooltip-container.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TooltipContainerComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/ui/tooltip/tooltip.config.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "IW_TOOLTIP_CONFIG",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/ui/tooltip/tooltip.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "TooltipDirective",
                "coveragePercent": 50,
                "coverageCount": "4/8",
                "status": "medium"
            },
            {
                "filePath": "src/app/ui/tree/tree/tree.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TreeComponent",
                "coveragePercent": 69,
                "coverageCount": "9/13",
                "status": "good"
            },
            {
                "filePath": "src/app/ui/tree/tree/tree.component.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "TreeItemDirective",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/ui/tree/tree/tree.component.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "TreeNodeTemplateDirective",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/ui/tree/tree/tree.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "TreeItem",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/welcome/welcome.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "WelcomeComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.prod.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}