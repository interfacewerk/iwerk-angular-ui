{"dialog-example1.component.html":"<button (click)=\"myDialog1.open()\">Open a dialog</button>\n\n<ng-template iwDialog #myDialog1=\"iw-dialog\" [escToClose]=\"true\" [clickToClose]=\"true\">\n  <h1>Here is my dialog</h1>\n\n  <ul>\n    <li>Press ESC to close it</li>\n    <li>You can also click outside</li>\n    <li>or <a (click)=\"myDialog1.close()\">here</a></li>\n  </ul>\n</ng-template>","dialog-example2.component.ts":"import { Component, OnDestroy } from '@angular/core';\nimport { DialogService, IDialog } from 'src/public_api';\nimport { MyDialogComponent } from '../my-dialog/my-dialog.component';\n\n@Component({\n  selector: 'app-dialog-example2',\n  templateUrl: './dialog-example2.component.html'\n})\nexport class DialogExample2Component implements OnDestroy {\n  dialogInstance: IDialog;\n\n  constructor(private dialog: DialogService) { }\n\n  ngOnDestroy() {\n    if (this.dialogInstance) {\n      this.dialogInstance.close();\n      this.dialogInstance = undefined;\n    }\n  }\n\n  open() {\n    this.dialogInstance = this.dialog.open(MyDialogComponent);\n  }\n}\n","my-dialog.component.ts":"import { Component } from '@angular/core';\nimport { DialogService } from 'src/public_api';\n\n@Component({\n  selector: 'app-my-dialog',\n  templateUrl: './my-dialog.component.html'\n})\nexport class MyDialogComponent {\n  constructor(private dialog: DialogService) { }\n\n  close() {\n    this.dialog.close();\n  }\n\n}\n","ellipsis-example1.component.html":"<p class=\"ellipsis\"\n  [iwMultilineEllipsis]=\"text\"\n  style=\"max-height: 100px; max-width: 200px\"\n></p>","navigation-example1.component.ts":"import { Component, ViewChild } from '@angular/core';\nimport { NavigationComponent } from 'src/public_api';\nimport { Example2Component, Example2ComponentNavData, Example2ReturnedData } from './navigation-example1-nested2.component';\n\n@Component({\n  selector: 'app-navigation-example1',\n  template: `<p>Add the <code class=\"inline-code\">iw-navigation</code> element into your template.</p>\n  <div class=\"nav-container\">\n    <iw-navigation #nav>\n      <h3>Here is our first view</h3>\n      <button (click)=\"present()\">Present a new view</button>\n    </iw-navigation>\n  </div>`,\n  styles: [\n    `.nav-container {\n      padding: 3px 10px;\n      box-shadow: 1px 1px 1px 1px black;\n      height: 300px;\n      width: 300px;\n    }`\n  ]\n})\nexport class Example1Component {\n  @ViewChild('nav') nav: NavigationComponent;\n  returnedByExample2 = -1;\n\n  present() {\n    this.nav.present<Example2ReturnedData, Example2ComponentNavData>(Example2Component, { title: 'Example 2 title defined by us!' })\n      .then(v => this.returnedByExample2 = v);\n  }\n}\n","navigation-example1-nested2.component.ts":"import { Component, Inject } from '@angular/core';\nimport { NavigationController, NavigationData } from 'src/public_api';\nimport { Example3Component } from './navigation-example1-nested3.component';\n\nexport interface Example2ComponentNavData {\n  title: string;\n}\n\nexport type Example2ReturnedData = number;\n\n@Component({\n  template: `<h5>{{data.title}}</h5>\n  <button (click)=\"present()\">Present one more view!</button>\n  <button (click)=\"dismiss()\">Dismiss with value 1234</button>`\n})\nexport class Example2Component {\n  constructor(\n    @Inject(NavigationData) public data: Example2ComponentNavData,\n    private navCtrl: NavigationController\n  ) {\n\n  }\n\n  present() {\n    this.navCtrl.present(Example3Component);\n  }\n\n  dismiss() {\n    this.navCtrl.dismiss<Example2ReturnedData>(1234);\n  }\n}\n","navigation-example1-nested3.component.ts":"import { Component } from '@angular/core';\nimport { NavigationController } from 'src/public_api';\n\n@Component({\n  template: `<h5>One level deeper!</h5><button (click)=\"dismiss()\">Dismiss</button>`\n})\nexport class Example3Component {\n  constructor(private navCtrl: NavigationController) {}\n\n  dismiss() {\n    this.navCtrl.dismiss();\n  }\n}\n","popover-example1.component.html":"<button (click)=\"isOpen = true\">\n  Click to open!\n\n  <ng-template iwPopover\n    popoverClass=\"demo-popover\"\n    [isOpen]=\"isOpen\"\n    (shouldClose)=\"isOpen = false\">\n  \n    <div class=\"simple-popover\">\n      Helloooo\n    </div>\n  \n  </ng-template>\n</button>\n\n","popover-example1.component.ts":"import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-popover-example1',\n  templateUrl: './popover-example1.component.html'\n})\nexport class PopoverExample1Component {\n  isOpen = false;\n}\n","popover-example2.component.html":"<table>\n  <thead><tr>\n    <th>First Name</th>\n    <th>Last Name</th>\n  </tr></thead>\n  <tr *ngFor=\"let person of persons\">\n    <td class=\"cell-right-icon\">\n      {{person.first}}\n      <button (click)=\"openEditFirstNamePopover(person, $event)\">&#x270E;</button>\n    </td>\n    <td class=\"cell-right-icon\">\n      {{person.last}}\n      <button (click)=\"openEditLastNamePopover(person, $event)\">&#x270E;</button>          \n    </td>\n  </tr>\n</table>\n","popover-example2.component.ts":"import { Component } from '@angular/core';\nimport { PopoverService } from 'src/public_api';\nimport { PropertyEditPopoverComponent } from './property-edit-popover/property-edit-popover.component';\n\n@Component({\n  selector: 'app-popover-example2',\n  templateUrl: './popover-example2.component.html'\n})\nexport class PopoverExample2Component {\n  persons: Person[] = [];\n  firsts = ['Mark', 'Edy', 'Jack', 'John', 'Mike'];\n  lasts = ['Johnson', 'Willis', 'Chapman', 'Bob', 'Last'];\n\n  constructor(private popoverService: PopoverService) {\n    for (let i = 0; i < 5; i++) {\n      this.persons.push({\n        first: this.firsts[Math.floor(Math.random() * this.firsts.length)],\n        last: this.lasts[Math.floor(Math.random() * this.lasts.length)],\n      });\n    }\n  }\n\n  openEditFirstNamePopover(person: Person, $event: MouseEvent) {\n    return this.openEditPropertyPopover(person, 'First Name', 'first', $event);\n  }\n\n  openEditLastNamePopover(person: Person, $event: MouseEvent) {\n    return this.openEditPropertyPopover(person, 'Last Name', 'last', $event);\n  }\n\n  openEditPropertyPopover(person: Person, propertyName: string, p: keyof Person, $event: MouseEvent) {\n    this.popoverService.open(PropertyEditPopoverComponent, <HTMLElement>$event.target, {\n      popoverClass: 'demo-popover',\n      escToClose: true\n    }, component => {\n      component.value = person[p];\n      component.propertyName = propertyName;\n      component.onValueChange.subscribe((v: string) => {\n        person[p] = v;\n      });\n    });\n  }\n}\n\ninterface Person {\n  first: string;\n  last: string;\n}\n\n","tooltip-demo-example1.component.html":"<button (click)=\"value = value + 1\">\n  Try me!\n  <ng-template iwTooltip>\n    Click to go from {{value}} to {{value+1}}\n  </ng-template>\n</button>","tooltip-demo-example2.component.html":"<button>Horizontal tooltip\n  <ng-template iwTooltip [horizontal]=\"true\">\n    I show up horizontally!\n  </ng-template>\n</button>","tooltip-demo-example3.component.html":"<button>\n  Some delay ~1s\n  <ng-template iwTooltip [delay]=\"1000\">\n    Yes, you waited but it was worth it!\n  </ng-template>\n</button>","tree-docs-example1.component.html":"<iw-tree [tree]=\"items\" #tree>\n  <ng-template iwTreeNodeTemplate let-node let-hasChildren=\"hasChildren\">\n    {{node.data}} <button *ngIf=\"hasChildren\" (click)=\"tree.toggleExpand(node)\">toggle</button>\n  </ng-template>\n</iw-tree>","tree-docs-example1.component.ts":"import { Component } from '@angular/core';\nimport { TreeItem } from 'src/public_api';\n\n@Component({\n  selector: 'app-tree-docs-example1',\n  templateUrl: './tree-docs-example1.component.html'\n})\nexport class TreeDocsExample1Component {\n  items: TreeItem[] = [{\n    data: 'Node #1',\n    children: [{\n      data: 'Node #1.1',\n      children: [{\n        data: 'Node #1.1.1'\n      }, {\n        data: 'Node #1.1.2'\n      }, {\n        data: 'Node #1.1.3'\n      }]\n    }, {\n      data: 'Node #1.2',\n      children: [{\n        data: 'Node #1.2.1'\n      }, {\n        data: 'Node #1.2.2'\n      }, {\n        data: 'Node #1.2.3'\n      }]\n    }, {\n      data: 'Node #1.3',\n      children: [{\n        data: 'Node #1.3.1'\n      }, {\n        data: 'Node #1.3.2'\n      }, {\n        data: 'Node #1.3.3'\n      }]\n    }]\n  }];\n}\n","tree-docs-example2.component.html":"<p>Use your arrow keys to navigate inside this tree.</p>\n\n<iw-tree [tree]=\"items\" #tree>\n  <ng-template iwTreeNodeTemplate let-node>\n    <div tabindex=\"0\"\n      [iwTreeItem]=\"node\"\n    >{{node.data}}</div>\n  </ng-template>\n</iw-tree>","tree-docs-example2.component.ts":"import { Component } from '@angular/core';\nimport { TreeItem } from 'src/public_api';\n\n@Component({\n  selector: 'app-tree-docs-example2',\n  templateUrl: './tree-docs-example2.component.html',\n  styles: [\n    'div:focus { background: grey; }'\n  ]\n})\nexport class TreeDocsExample2Component {\n  items: TreeItem[] = [{\n    data: 'Node #1',\n    children: [{\n      data: 'Node #1.1',\n      children: [{\n        data: 'Node #1.1.1'\n      }, {\n        data: 'Node #1.1.2'\n      }, {\n        data: 'Node #1.1.3'\n      }]\n    }, {\n      data: 'Node #1.2',\n      children: [{\n        data: 'Node #1.2.1'\n      }, {\n        data: 'Node #1.2.2'\n      }, {\n        data: 'Node #1.2.3'\n      }]\n    }, {\n      data: 'Node #1.3',\n      children: [{\n        data: 'Node #1.3.1'\n      }, {\n        data: 'Node #1.3.2'\n      }, {\n        data: 'Node #1.3.3'\n      }]\n    }]\n  }];\n}\n","tree-docs-example3.component.html":"<iw-tree #treeComponent [tree]=\"tree\" class=\"menu-tree\">\n  <ng-template iwTreeNodeTemplate let-node let-depth=\"depth\">\n    <a [routerLink]=\"node.data.routerLink\"\n      [ngStyle]=\"getLinkStyle(depth)\"\n      [queryParams]=\"node.data.queryParams\"\n      [queryParamsHandling]=\"'merge'\"\n      [routerLinkActive]=\"'active'\"\n      [iwTreeItem]=\"node\"\n      (click)=\"treeComponent.expandItem(node)\">\n      <fa-icon\n        [style.visibility]=\"treeComponent.hasChildren(node) ? 'visible' : 'hidden'\"\n        (click)=\"toggleExpand(treeComponent, node, $event)\"\n        [icon]=\"treeComponent.isExpanded(node) ? caretDown : caretRight\"\n      ></fa-icon>\n      Node #{{node.data.label}}\n    </a>\n  </ng-template>\n</iw-tree>","tree-docs-example3.component.ts":"import { Component } from '@angular/core';\nimport { TreeComponent, TreeItem } from 'src/public_api';\nimport { faCaretRight, faCaretDown } from '@fortawesome/free-solid-svg-icons';\n\n@Component({\n  selector: 'app-tree-docs-example3',\n  templateUrl: './tree-docs-example3.component.html'\n})\nexport class TreeDocsExample3Component {\n  tree: TreeItem[] = [{\n    data: {\n      label: '1',\n      routerLink: [],\n      queryParams: {\n        someParam: 1\n      }\n    },\n    children: [{\n      data: {\n        label: '2',\n        routerLink: [],\n        queryParams: {\n          someParam: 2\n        },\n      },\n      children: [{\n        data: {\n          label: '3',\n          routerLink: [],\n          queryParams: {\n            someParam: 3\n          }\n        }\n      }, {\n        data: {\n          label: '4',\n          routerLink: [],\n          queryParams: {\n            someParam: 4\n          }\n        }\n      }]\n    }, {\n      data: {\n        label: '5',\n        routerLink: [],\n        queryParams: {\n          someParam: 5\n        }\n      }\n    }]\n  }, {\n    data: {\n      label: '6',\n      routerLink: [],\n      queryParams: {\n        someParam: 6\n      }\n    },\n    children: [{\n      data: {\n        label: '7',\n        routerLink: [],\n        queryParams: {\n          someParam: 7\n        }\n      }\n    }, {\n      data: {\n        label: '8',\n        routerLink: [],\n        queryParams: {\n          someParam: 8\n        }\n      }\n    }]\n  }];\n\n  caretRight = faCaretRight;\n  caretDown = faCaretDown;\n\n  getLinkStyle(depth: number) {\n    return { padding: `0 ${depth * 20}px` };\n  }\n\n  toggleExpand(tree: TreeComponent, item: TreeItem, $event: MouseEvent) {\n    $event.stopPropagation();\n    $event.preventDefault();\n    $event.stopImmediatePropagation();\n    tree.toggleExpand(item);\n  }\n\n}\n"}